// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: ecr/v1/ecr.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ECR login request
type ECRLoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EcrAuth       *ECRAuthConfig         `protobuf:"bytes,1,opt,name=ecr_auth,json=ecrAuth,proto3" json:"ecr_auth,omitempty"` // ECR authentication configuration
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRLoginRequest) Reset() {
	*x = ECRLoginRequest{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRLoginRequest) ProtoMessage() {}

func (x *ECRLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRLoginRequest.ProtoReflect.Descriptor instead.
func (*ECRLoginRequest) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{0}
}

func (x *ECRLoginRequest) GetEcrAuth() *ECRAuthConfig {
	if x != nil {
		return x.EcrAuth
	}
	return nil
}

// ECR logout request
type ECRLogoutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegistryUrl   string                 `protobuf:"bytes,1,opt,name=registry_url,json=registryUrl,proto3" json:"registry_url,omitempty"` // ECR registry URL to logout from
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRLogoutRequest) Reset() {
	*x = ECRLogoutRequest{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRLogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRLogoutRequest) ProtoMessage() {}

func (x *ECRLogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRLogoutRequest.ProtoReflect.Descriptor instead.
func (*ECRLogoutRequest) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{1}
}

func (x *ECRLogoutRequest) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

// ECR status request
type ECRStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegistryUrl   string                 `protobuf:"bytes,1,opt,name=registry_url,json=registryUrl,proto3" json:"registry_url,omitempty"` // ECR registry URL to check status for
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRStatusRequest) Reset() {
	*x = ECRStatusRequest{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRStatusRequest) ProtoMessage() {}

func (x *ECRStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRStatusRequest.ProtoReflect.Descriptor instead.
func (*ECRStatusRequest) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{2}
}

func (x *ECRStatusRequest) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

// ECR set profile request
type ECRSetProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Profile name
	Profile       *ECRProfile            `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"` // Profile configuration
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRSetProfileRequest) Reset() {
	*x = ECRSetProfileRequest{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRSetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRSetProfileRequest) ProtoMessage() {}

func (x *ECRSetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRSetProfileRequest.ProtoReflect.Descriptor instead.
func (*ECRSetProfileRequest) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{3}
}

func (x *ECRSetProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ECRSetProfileRequest) GetProfile() *ECRProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// ECR delete profile request
type ECRDeleteProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Profile name to delete
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRDeleteProfileRequest) Reset() {
	*x = ECRDeleteProfileRequest{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRDeleteProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRDeleteProfileRequest) ProtoMessage() {}

func (x *ECRDeleteProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRDeleteProfileRequest.ProtoReflect.Descriptor instead.
func (*ECRDeleteProfileRequest) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{4}
}

func (x *ECRDeleteProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ECR login response
type ECRLoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                              // Login status message
	RegistryUrl   string                 `protobuf:"bytes,2,opt,name=registry_url,json=registryUrl,proto3" json:"registry_url,omitempty"` // ECR registry URL
	Username      string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                          // Username for registry auth (typically "AWS")
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                                // Authentication token (masked for security)
	ExpiresAt     int64                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`      // Token expiration timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRLoginResponse) Reset() {
	*x = ECRLoginResponse{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRLoginResponse) ProtoMessage() {}

func (x *ECRLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRLoginResponse.ProtoReflect.Descriptor instead.
func (*ECRLoginResponse) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{5}
}

func (x *ECRLoginResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ECRLoginResponse) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

func (x *ECRLoginResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ECRLoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ECRLoginResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// ECR logout response
type ECRLogoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // Logout status message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRLogoutResponse) Reset() {
	*x = ECRLogoutResponse{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRLogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRLogoutResponse) ProtoMessage() {}

func (x *ECRLogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRLogoutResponse.ProtoReflect.Descriptor instead.
func (*ECRLogoutResponse) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{6}
}

func (x *ECRLogoutResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// ECR status response
type ECRStatusResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Authenticated    bool                   `protobuf:"varint,1,opt,name=authenticated,proto3" json:"authenticated,omitempty"`                                 // Whether currently authenticated
	RegistryUrl      string                 `protobuf:"bytes,2,opt,name=registry_url,json=registryUrl,proto3" json:"registry_url,omitempty"`                   // ECR registry URL
	Username         string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                            // Current username (if authenticated)
	ExpiresAt        int64                  `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`                        // Token expiration timestamp
	ExpiresInSeconds int64                  `protobuf:"varint,5,opt,name=expires_in_seconds,json=expiresInSeconds,proto3" json:"expires_in_seconds,omitempty"` // Seconds until token expires
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ECRStatusResponse) Reset() {
	*x = ECRStatusResponse{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRStatusResponse) ProtoMessage() {}

func (x *ECRStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRStatusResponse.ProtoReflect.Descriptor instead.
func (*ECRStatusResponse) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{7}
}

func (x *ECRStatusResponse) GetAuthenticated() bool {
	if x != nil {
		return x.Authenticated
	}
	return false
}

func (x *ECRStatusResponse) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

func (x *ECRStatusResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ECRStatusResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ECRStatusResponse) GetExpiresInSeconds() int64 {
	if x != nil {
		return x.ExpiresInSeconds
	}
	return 0
}

// ECR profiles list response
type ECRProfilesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profiles      []*ECRProfile          `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"` // List of configured profiles
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRProfilesResponse) Reset() {
	*x = ECRProfilesResponse{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRProfilesResponse) ProtoMessage() {}

func (x *ECRProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRProfilesResponse.ProtoReflect.Descriptor instead.
func (*ECRProfilesResponse) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{8}
}

func (x *ECRProfilesResponse) GetProfiles() []*ECRProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// ECR set profile response
type ECRSetProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`   // Operation status
	Profile       *ECRProfile            `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"` // Created/updated profile
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRSetProfileResponse) Reset() {
	*x = ECRSetProfileResponse{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRSetProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRSetProfileResponse) ProtoMessage() {}

func (x *ECRSetProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRSetProfileResponse.ProtoReflect.Descriptor instead.
func (*ECRSetProfileResponse) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{9}
}

func (x *ECRSetProfileResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ECRSetProfileResponse) GetProfile() *ECRProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// ECR delete profile response
type ECRDeleteProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // Operation status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRDeleteProfileResponse) Reset() {
	*x = ECRDeleteProfileResponse{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRDeleteProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRDeleteProfileResponse) ProtoMessage() {}

func (x *ECRDeleteProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRDeleteProfileResponse.ProtoReflect.Descriptor instead.
func (*ECRDeleteProfileResponse) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{10}
}

func (x *ECRDeleteProfileResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// ECR authentication configuration
type ECRAuthConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Region         string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`                                       // AWS region (e.g., us-west-2)
	RegistryId     string                 `protobuf:"bytes,2,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`             // AWS account ID (optional, auto-detected from URL)
	AwsCredentials *AWSCredentials        `protobuf:"bytes,3,opt,name=aws_credentials,json=awsCredentials,proto3" json:"aws_credentials,omitempty"` // AWS credentials configuration
	AutoRefresh    bool                   `protobuf:"varint,4,opt,name=auto_refresh,json=autoRefresh,proto3" json:"auto_refresh,omitempty"`         // Whether to auto-refresh tokens
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ECRAuthConfig) Reset() {
	*x = ECRAuthConfig{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRAuthConfig) ProtoMessage() {}

func (x *ECRAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRAuthConfig.ProtoReflect.Descriptor instead.
func (*ECRAuthConfig) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{11}
}

func (x *ECRAuthConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ECRAuthConfig) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *ECRAuthConfig) GetAwsCredentials() *AWSCredentials {
	if x != nil {
		return x.AwsCredentials
	}
	return nil
}

func (x *ECRAuthConfig) GetAutoRefresh() bool {
	if x != nil {
		return x.AutoRefresh
	}
	return false
}

// AWS credentials configuration
type AWSCredentials struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to CredentialType:
	//
	//	*AWSCredentials_AccessKey
	//	*AWSCredentials_AssumeRole
	//	*AWSCredentials_InstanceProfile
	//	*AWSCredentials_EcsTaskRole
	CredentialType isAWSCredentials_CredentialType `protobuf_oneof:"credential_type"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AWSCredentials) Reset() {
	*x = AWSCredentials{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSCredentials) ProtoMessage() {}

func (x *AWSCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSCredentials.ProtoReflect.Descriptor instead.
func (*AWSCredentials) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{12}
}

func (x *AWSCredentials) GetCredentialType() isAWSCredentials_CredentialType {
	if x != nil {
		return x.CredentialType
	}
	return nil
}

func (x *AWSCredentials) GetAccessKey() *AWSAccessKeyCredentials {
	if x != nil {
		if x, ok := x.CredentialType.(*AWSCredentials_AccessKey); ok {
			return x.AccessKey
		}
	}
	return nil
}

func (x *AWSCredentials) GetAssumeRole() *AWSAssumeRoleCredentials {
	if x != nil {
		if x, ok := x.CredentialType.(*AWSCredentials_AssumeRole); ok {
			return x.AssumeRole
		}
	}
	return nil
}

func (x *AWSCredentials) GetInstanceProfile() *AWSInstanceProfileCredentials {
	if x != nil {
		if x, ok := x.CredentialType.(*AWSCredentials_InstanceProfile); ok {
			return x.InstanceProfile
		}
	}
	return nil
}

func (x *AWSCredentials) GetEcsTaskRole() *AWSECSTaskRoleCredentials {
	if x != nil {
		if x, ok := x.CredentialType.(*AWSCredentials_EcsTaskRole); ok {
			return x.EcsTaskRole
		}
	}
	return nil
}

type isAWSCredentials_CredentialType interface {
	isAWSCredentials_CredentialType()
}

type AWSCredentials_AccessKey struct {
	AccessKey *AWSAccessKeyCredentials `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3,oneof"` // Access Key and Secret Key
}

type AWSCredentials_AssumeRole struct {
	AssumeRole *AWSAssumeRoleCredentials `protobuf:"bytes,2,opt,name=assume_role,json=assumeRole,proto3,oneof"` // STS Assume Role
}

type AWSCredentials_InstanceProfile struct {
	InstanceProfile *AWSInstanceProfileCredentials `protobuf:"bytes,3,opt,name=instance_profile,json=instanceProfile,proto3,oneof"` // EC2 Instance Profile
}

type AWSCredentials_EcsTaskRole struct {
	EcsTaskRole *AWSECSTaskRoleCredentials `protobuf:"bytes,4,opt,name=ecs_task_role,json=ecsTaskRole,proto3,oneof"` // ECS Task Role
}

func (*AWSCredentials_AccessKey) isAWSCredentials_CredentialType() {}

func (*AWSCredentials_AssumeRole) isAWSCredentials_CredentialType() {}

func (*AWSCredentials_InstanceProfile) isAWSCredentials_CredentialType() {}

func (*AWSCredentials_EcsTaskRole) isAWSCredentials_CredentialType() {}

// AWS Access Key credentials
type AWSAccessKeyCredentials struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccessKeyId     string                 `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`             // AWS Access Key ID
	SecretAccessKey string                 `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"` // AWS Secret Access Key
	SessionToken    string                 `protobuf:"bytes,3,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`            // AWS Session Token (optional)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AWSAccessKeyCredentials) Reset() {
	*x = AWSAccessKeyCredentials{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSAccessKeyCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSAccessKeyCredentials) ProtoMessage() {}

func (x *AWSAccessKeyCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSAccessKeyCredentials.ProtoReflect.Descriptor instead.
func (*AWSAccessKeyCredentials) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{13}
}

func (x *AWSAccessKeyCredentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AWSAccessKeyCredentials) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AWSAccessKeyCredentials) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

// AWS STS Assume Role credentials
type AWSAssumeRoleCredentials struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RoleArn           string                 `protobuf:"bytes,1,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`                               // ARN of the role to assume
	SessionName       string                 `protobuf:"bytes,2,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`                   // Session name for the assumed role
	ExternalId        string                 `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`                      // External ID (optional)
	DurationSeconds   int32                  `protobuf:"varint,4,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`      // Duration of the assumed role session
	SourceCredentials *AWSCredentials        `protobuf:"bytes,5,opt,name=source_credentials,json=sourceCredentials,proto3" json:"source_credentials,omitempty"` // Source credentials to assume the role
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AWSAssumeRoleCredentials) Reset() {
	*x = AWSAssumeRoleCredentials{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSAssumeRoleCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSAssumeRoleCredentials) ProtoMessage() {}

func (x *AWSAssumeRoleCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSAssumeRoleCredentials.ProtoReflect.Descriptor instead.
func (*AWSAssumeRoleCredentials) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{14}
}

func (x *AWSAssumeRoleCredentials) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *AWSAssumeRoleCredentials) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *AWSAssumeRoleCredentials) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *AWSAssumeRoleCredentials) GetDurationSeconds() int32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *AWSAssumeRoleCredentials) GetSourceCredentials() *AWSCredentials {
	if x != nil {
		return x.SourceCredentials
	}
	return nil
}

// AWS Instance Profile credentials
type AWSInstanceProfileCredentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSInstanceProfileCredentials) Reset() {
	*x = AWSInstanceProfileCredentials{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSInstanceProfileCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSInstanceProfileCredentials) ProtoMessage() {}

func (x *AWSInstanceProfileCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSInstanceProfileCredentials.ProtoReflect.Descriptor instead.
func (*AWSInstanceProfileCredentials) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{15}
}

// AWS ECS Task Role credentials
type AWSECSTaskRoleCredentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSECSTaskRoleCredentials) Reset() {
	*x = AWSECSTaskRoleCredentials{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSECSTaskRoleCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSECSTaskRoleCredentials) ProtoMessage() {}

func (x *AWSECSTaskRoleCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSECSTaskRoleCredentials.ProtoReflect.Descriptor instead.
func (*AWSECSTaskRoleCredentials) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{16}
}

// ECR profile configuration
type ECRProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                  // Profile name
	RegistryUrl   string                 `protobuf:"bytes,2,opt,name=registry_url,json=registryUrl,proto3" json:"registry_url,omitempty"` // ECR registry URL
	AuthConfig    *ECRAuthConfig         `protobuf:"bytes,3,opt,name=auth_config,json=authConfig,proto3" json:"auth_config,omitempty"`    // Authentication configuration
	Enabled       bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`                           // Whether profile is enabled
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                    // Profile description
	CreatedAt     int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // Creation timestamp
	UpdatedAt     int64                  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`      // Last update timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ECRProfile) Reset() {
	*x = ECRProfile{}
	mi := &file_ecr_v1_ecr_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ECRProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRProfile) ProtoMessage() {}

func (x *ECRProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ecr_v1_ecr_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRProfile.ProtoReflect.Descriptor instead.
func (*ECRProfile) Descriptor() ([]byte, []int) {
	return file_ecr_v1_ecr_proto_rawDescGZIP(), []int{17}
}

func (x *ECRProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ECRProfile) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

func (x *ECRProfile) GetAuthConfig() *ECRAuthConfig {
	if x != nil {
		return x.AuthConfig
	}
	return nil
}

func (x *ECRProfile) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ECRProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ECRProfile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ECRProfile) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

var File_ecr_v1_ecr_proto protoreflect.FileDescriptor

const file_ecr_v1_ecr_proto_rawDesc = "" +
	"\n" +
	"\x10ecr/v1/ecr.proto\x12\x06ecr.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\"C\n" +
	"\x0fECRLoginRequest\x120\n" +
	"\becr_auth\x18\x01 \x01(\v2\x15.ecr.v1.ECRAuthConfigR\aecrAuth\"5\n" +
	"\x10ECRLogoutRequest\x12!\n" +
	"\fregistry_url\x18\x01 \x01(\tR\vregistryUrl\"5\n" +
	"\x10ECRStatusRequest\x12!\n" +
	"\fregistry_url\x18\x01 \x01(\tR\vregistryUrl\"X\n" +
	"\x14ECRSetProfileRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12,\n" +
	"\aprofile\x18\x02 \x01(\v2\x12.ecr.v1.ECRProfileR\aprofile\"-\n" +
	"\x17ECRDeleteProfileRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x9e\x01\n" +
	"\x10ECRLoginResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12!\n" +
	"\fregistry_url\x18\x02 \x01(\tR\vregistryUrl\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x14\n" +
	"\x05token\x18\x04 \x01(\tR\x05token\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x05 \x01(\x03R\texpiresAt\"+\n" +
	"\x11ECRLogoutResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\"\xc5\x01\n" +
	"\x11ECRStatusResponse\x12$\n" +
	"\rauthenticated\x18\x01 \x01(\bR\rauthenticated\x12!\n" +
	"\fregistry_url\x18\x02 \x01(\tR\vregistryUrl\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x04 \x01(\x03R\texpiresAt\x12,\n" +
	"\x12expires_in_seconds\x18\x05 \x01(\x03R\x10expiresInSeconds\"E\n" +
	"\x13ECRProfilesResponse\x12.\n" +
	"\bprofiles\x18\x01 \x03(\v2\x12.ecr.v1.ECRProfileR\bprofiles\"]\n" +
	"\x15ECRSetProfileResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12,\n" +
	"\aprofile\x18\x02 \x01(\v2\x12.ecr.v1.ECRProfileR\aprofile\"2\n" +
	"\x18ECRDeleteProfileResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\"\xac\x01\n" +
	"\rECRAuthConfig\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12\x1f\n" +
	"\vregistry_id\x18\x02 \x01(\tR\n" +
	"registryId\x12?\n" +
	"\x0faws_credentials\x18\x03 \x01(\v2\x16.ecr.v1.AWSCredentialsR\x0eawsCredentials\x12!\n" +
	"\fauto_refresh\x18\x04 \x01(\bR\vautoRefresh\"\xc7\x02\n" +
	"\x0eAWSCredentials\x12@\n" +
	"\n" +
	"access_key\x18\x01 \x01(\v2\x1f.ecr.v1.AWSAccessKeyCredentialsH\x00R\taccessKey\x12C\n" +
	"\vassume_role\x18\x02 \x01(\v2 .ecr.v1.AWSAssumeRoleCredentialsH\x00R\n" +
	"assumeRole\x12R\n" +
	"\x10instance_profile\x18\x03 \x01(\v2%.ecr.v1.AWSInstanceProfileCredentialsH\x00R\x0finstanceProfile\x12G\n" +
	"\recs_task_role\x18\x04 \x01(\v2!.ecr.v1.AWSECSTaskRoleCredentialsH\x00R\vecsTaskRoleB\x11\n" +
	"\x0fcredential_type\"\x8e\x01\n" +
	"\x17AWSAccessKeyCredentials\x12\"\n" +
	"\raccess_key_id\x18\x01 \x01(\tR\vaccessKeyId\x12*\n" +
	"\x11secret_access_key\x18\x02 \x01(\tR\x0fsecretAccessKey\x12#\n" +
	"\rsession_token\x18\x03 \x01(\tR\fsessionToken\"\xeb\x01\n" +
	"\x18AWSAssumeRoleCredentials\x12\x19\n" +
	"\brole_arn\x18\x01 \x01(\tR\aroleArn\x12!\n" +
	"\fsession_name\x18\x02 \x01(\tR\vsessionName\x12\x1f\n" +
	"\vexternal_id\x18\x03 \x01(\tR\n" +
	"externalId\x12)\n" +
	"\x10duration_seconds\x18\x04 \x01(\x05R\x0fdurationSeconds\x12E\n" +
	"\x12source_credentials\x18\x05 \x01(\v2\x16.ecr.v1.AWSCredentialsR\x11sourceCredentials\"\x1f\n" +
	"\x1dAWSInstanceProfileCredentials\"\x1b\n" +
	"\x19AWSECSTaskRoleCredentials\"\xf5\x01\n" +
	"\n" +
	"ECRProfile\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fregistry_url\x18\x02 \x01(\tR\vregistryUrl\x126\n" +
	"\vauth_config\x18\x03 \x01(\v2\x15.ecr.v1.ECRAuthConfigR\n" +
	"authConfig\x12\x18\n" +
	"\aenabled\x18\x04 \x01(\bR\aenabled\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\a \x01(\x03R\tupdatedAt2\xd9\x04\n" +
	"\n" +
	"ECRService\x12T\n" +
	"\x05Login\x12\x17.ecr.v1.ECRLoginRequest\x1a\x18.ecr.v1.ECRLoginResponse\"\x18\x82\xd3\xe4\x93\x02\x12:\x01*\"\r/v1/ecr/login\x12X\n" +
	"\x06Logout\x12\x18.ecr.v1.ECRLogoutRequest\x1a\x19.ecr.v1.ECRLogoutResponse\"\x19\x82\xd3\xe4\x93\x02\x13:\x01*\"\x0e/v1/ecr/logout\x12X\n" +
	"\tGetStatus\x12\x18.ecr.v1.ECRStatusRequest\x1a\x19.ecr.v1.ECRStatusResponse\"\x16\x82\xd3\xe4\x93\x02\x10\x12\x0e/v1/ecr/status\x12]\n" +
	"\fListProfiles\x12\x16.google.protobuf.Empty\x1a\x1b.ecr.v1.ECRProfilesResponse\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/v1/ecr/profiles\x12m\n" +
	"\n" +
	"SetProfile\x12\x1c.ecr.v1.ECRSetProfileRequest\x1a\x1d.ecr.v1.ECRSetProfileResponse\"\"\x82\xd3\xe4\x93\x02\x1c:\x01*\"\x17/v1/ecr/profiles/{name}\x12s\n" +
	"\rDeleteProfile\x12\x1f.ecr.v1.ECRDeleteProfileRequest\x1a .ecr.v1.ECRDeleteProfileResponse\"\x1f\x82\xd3\xe4\x93\x02\x19*\x17/v1/ecr/profiles/{name}B\x17Z\x15dsagent/api/ecr/v1;v1b\x06proto3"

var (
	file_ecr_v1_ecr_proto_rawDescOnce sync.Once
	file_ecr_v1_ecr_proto_rawDescData []byte
)

func file_ecr_v1_ecr_proto_rawDescGZIP() []byte {
	file_ecr_v1_ecr_proto_rawDescOnce.Do(func() {
		file_ecr_v1_ecr_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ecr_v1_ecr_proto_rawDesc), len(file_ecr_v1_ecr_proto_rawDesc)))
	})
	return file_ecr_v1_ecr_proto_rawDescData
}

var file_ecr_v1_ecr_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_ecr_v1_ecr_proto_goTypes = []any{
	(*ECRLoginRequest)(nil),               // 0: ecr.v1.ECRLoginRequest
	(*ECRLogoutRequest)(nil),              // 1: ecr.v1.ECRLogoutRequest
	(*ECRStatusRequest)(nil),              // 2: ecr.v1.ECRStatusRequest
	(*ECRSetProfileRequest)(nil),          // 3: ecr.v1.ECRSetProfileRequest
	(*ECRDeleteProfileRequest)(nil),       // 4: ecr.v1.ECRDeleteProfileRequest
	(*ECRLoginResponse)(nil),              // 5: ecr.v1.ECRLoginResponse
	(*ECRLogoutResponse)(nil),             // 6: ecr.v1.ECRLogoutResponse
	(*ECRStatusResponse)(nil),             // 7: ecr.v1.ECRStatusResponse
	(*ECRProfilesResponse)(nil),           // 8: ecr.v1.ECRProfilesResponse
	(*ECRSetProfileResponse)(nil),         // 9: ecr.v1.ECRSetProfileResponse
	(*ECRDeleteProfileResponse)(nil),      // 10: ecr.v1.ECRDeleteProfileResponse
	(*ECRAuthConfig)(nil),                 // 11: ecr.v1.ECRAuthConfig
	(*AWSCredentials)(nil),                // 12: ecr.v1.AWSCredentials
	(*AWSAccessKeyCredentials)(nil),       // 13: ecr.v1.AWSAccessKeyCredentials
	(*AWSAssumeRoleCredentials)(nil),      // 14: ecr.v1.AWSAssumeRoleCredentials
	(*AWSInstanceProfileCredentials)(nil), // 15: ecr.v1.AWSInstanceProfileCredentials
	(*AWSECSTaskRoleCredentials)(nil),     // 16: ecr.v1.AWSECSTaskRoleCredentials
	(*ECRProfile)(nil),                    // 17: ecr.v1.ECRProfile
	(*emptypb.Empty)(nil),                 // 18: google.protobuf.Empty
}
var file_ecr_v1_ecr_proto_depIdxs = []int32{
	11, // 0: ecr.v1.ECRLoginRequest.ecr_auth:type_name -> ecr.v1.ECRAuthConfig
	17, // 1: ecr.v1.ECRSetProfileRequest.profile:type_name -> ecr.v1.ECRProfile
	17, // 2: ecr.v1.ECRProfilesResponse.profiles:type_name -> ecr.v1.ECRProfile
	17, // 3: ecr.v1.ECRSetProfileResponse.profile:type_name -> ecr.v1.ECRProfile
	12, // 4: ecr.v1.ECRAuthConfig.aws_credentials:type_name -> ecr.v1.AWSCredentials
	13, // 5: ecr.v1.AWSCredentials.access_key:type_name -> ecr.v1.AWSAccessKeyCredentials
	14, // 6: ecr.v1.AWSCredentials.assume_role:type_name -> ecr.v1.AWSAssumeRoleCredentials
	15, // 7: ecr.v1.AWSCredentials.instance_profile:type_name -> ecr.v1.AWSInstanceProfileCredentials
	16, // 8: ecr.v1.AWSCredentials.ecs_task_role:type_name -> ecr.v1.AWSECSTaskRoleCredentials
	12, // 9: ecr.v1.AWSAssumeRoleCredentials.source_credentials:type_name -> ecr.v1.AWSCredentials
	11, // 10: ecr.v1.ECRProfile.auth_config:type_name -> ecr.v1.ECRAuthConfig
	0,  // 11: ecr.v1.ECRService.Login:input_type -> ecr.v1.ECRLoginRequest
	1,  // 12: ecr.v1.ECRService.Logout:input_type -> ecr.v1.ECRLogoutRequest
	2,  // 13: ecr.v1.ECRService.GetStatus:input_type -> ecr.v1.ECRStatusRequest
	18, // 14: ecr.v1.ECRService.ListProfiles:input_type -> google.protobuf.Empty
	3,  // 15: ecr.v1.ECRService.SetProfile:input_type -> ecr.v1.ECRSetProfileRequest
	4,  // 16: ecr.v1.ECRService.DeleteProfile:input_type -> ecr.v1.ECRDeleteProfileRequest
	5,  // 17: ecr.v1.ECRService.Login:output_type -> ecr.v1.ECRLoginResponse
	6,  // 18: ecr.v1.ECRService.Logout:output_type -> ecr.v1.ECRLogoutResponse
	7,  // 19: ecr.v1.ECRService.GetStatus:output_type -> ecr.v1.ECRStatusResponse
	8,  // 20: ecr.v1.ECRService.ListProfiles:output_type -> ecr.v1.ECRProfilesResponse
	9,  // 21: ecr.v1.ECRService.SetProfile:output_type -> ecr.v1.ECRSetProfileResponse
	10, // 22: ecr.v1.ECRService.DeleteProfile:output_type -> ecr.v1.ECRDeleteProfileResponse
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ecr_v1_ecr_proto_init() }
func file_ecr_v1_ecr_proto_init() {
	if File_ecr_v1_ecr_proto != nil {
		return
	}
	file_ecr_v1_ecr_proto_msgTypes[12].OneofWrappers = []any{
		(*AWSCredentials_AccessKey)(nil),
		(*AWSCredentials_AssumeRole)(nil),
		(*AWSCredentials_InstanceProfile)(nil),
		(*AWSCredentials_EcsTaskRole)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ecr_v1_ecr_proto_rawDesc), len(file_ecr_v1_ecr_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ecr_v1_ecr_proto_goTypes,
		DependencyIndexes: file_ecr_v1_ecr_proto_depIdxs,
		MessageInfos:      file_ecr_v1_ecr_proto_msgTypes,
	}.Build()
	File_ecr_v1_ecr_proto = out.File
	file_ecr_v1_ecr_proto_goTypes = nil
	file_ecr_v1_ecr_proto_depIdxs = nil
}
