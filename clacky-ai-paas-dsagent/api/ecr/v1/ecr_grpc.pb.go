// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: ecr/v1/ecr.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ECRService_Login_FullMethodName         = "/ecr.v1.ECRService/Login"
	ECRService_Logout_FullMethodName        = "/ecr.v1.ECRService/Logout"
	ECRService_GetStatus_FullMethodName     = "/ecr.v1.ECRService/GetStatus"
	ECRService_ListProfiles_FullMethodName  = "/ecr.v1.ECRService/ListProfiles"
	ECRService_SetProfile_FullMethodName    = "/ecr.v1.ECRService/SetProfile"
	ECRService_DeleteProfile_FullMethodName = "/ecr.v1.ECRService/DeleteProfile"
)

// ECRServiceClient is the client API for ECRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ECR authentication service for managing AWS Elastic Container Registry authentication
type ECRServiceClient interface {
	// Login to ECR registry
	Login(ctx context.Context, in *ECRLoginRequest, opts ...grpc.CallOption) (*ECRLoginResponse, error)
	// Logout from ECR registry
	Logout(ctx context.Context, in *ECRLogoutRequest, opts ...grpc.CallOption) (*ECRLogoutResponse, error)
	// Get ECR login status for a registry
	GetStatus(ctx context.Context, in *ECRStatusRequest, opts ...grpc.CallOption) (*ECRStatusResponse, error)
	// List configured ECR profiles
	ListProfiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ECRProfilesResponse, error)
	// Create or update ECR profile
	SetProfile(ctx context.Context, in *ECRSetProfileRequest, opts ...grpc.CallOption) (*ECRSetProfileResponse, error)
	// Delete ECR profile
	DeleteProfile(ctx context.Context, in *ECRDeleteProfileRequest, opts ...grpc.CallOption) (*ECRDeleteProfileResponse, error)
}

type eCRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewECRServiceClient(cc grpc.ClientConnInterface) ECRServiceClient {
	return &eCRServiceClient{cc}
}

func (c *eCRServiceClient) Login(ctx context.Context, in *ECRLoginRequest, opts ...grpc.CallOption) (*ECRLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ECRLoginResponse)
	err := c.cc.Invoke(ctx, ECRService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCRServiceClient) Logout(ctx context.Context, in *ECRLogoutRequest, opts ...grpc.CallOption) (*ECRLogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ECRLogoutResponse)
	err := c.cc.Invoke(ctx, ECRService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCRServiceClient) GetStatus(ctx context.Context, in *ECRStatusRequest, opts ...grpc.CallOption) (*ECRStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ECRStatusResponse)
	err := c.cc.Invoke(ctx, ECRService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCRServiceClient) ListProfiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ECRProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ECRProfilesResponse)
	err := c.cc.Invoke(ctx, ECRService_ListProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCRServiceClient) SetProfile(ctx context.Context, in *ECRSetProfileRequest, opts ...grpc.CallOption) (*ECRSetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ECRSetProfileResponse)
	err := c.cc.Invoke(ctx, ECRService_SetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCRServiceClient) DeleteProfile(ctx context.Context, in *ECRDeleteProfileRequest, opts ...grpc.CallOption) (*ECRDeleteProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ECRDeleteProfileResponse)
	err := c.cc.Invoke(ctx, ECRService_DeleteProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ECRServiceServer is the server API for ECRService service.
// All implementations must embed UnimplementedECRServiceServer
// for forward compatibility.
//
// ECR authentication service for managing AWS Elastic Container Registry authentication
type ECRServiceServer interface {
	// Login to ECR registry
	Login(context.Context, *ECRLoginRequest) (*ECRLoginResponse, error)
	// Logout from ECR registry
	Logout(context.Context, *ECRLogoutRequest) (*ECRLogoutResponse, error)
	// Get ECR login status for a registry
	GetStatus(context.Context, *ECRStatusRequest) (*ECRStatusResponse, error)
	// List configured ECR profiles
	ListProfiles(context.Context, *emptypb.Empty) (*ECRProfilesResponse, error)
	// Create or update ECR profile
	SetProfile(context.Context, *ECRSetProfileRequest) (*ECRSetProfileResponse, error)
	// Delete ECR profile
	DeleteProfile(context.Context, *ECRDeleteProfileRequest) (*ECRDeleteProfileResponse, error)
	mustEmbedUnimplementedECRServiceServer()
}

// UnimplementedECRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedECRServiceServer struct{}

func (UnimplementedECRServiceServer) Login(context.Context, *ECRLoginRequest) (*ECRLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedECRServiceServer) Logout(context.Context, *ECRLogoutRequest) (*ECRLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedECRServiceServer) GetStatus(context.Context, *ECRStatusRequest) (*ECRStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedECRServiceServer) ListProfiles(context.Context, *emptypb.Empty) (*ECRProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedECRServiceServer) SetProfile(context.Context, *ECRSetProfileRequest) (*ECRSetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfile not implemented")
}
func (UnimplementedECRServiceServer) DeleteProfile(context.Context, *ECRDeleteProfileRequest) (*ECRDeleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedECRServiceServer) mustEmbedUnimplementedECRServiceServer() {}
func (UnimplementedECRServiceServer) testEmbeddedByValue()                    {}

// UnsafeECRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ECRServiceServer will
// result in compilation errors.
type UnsafeECRServiceServer interface {
	mustEmbedUnimplementedECRServiceServer()
}

func RegisterECRServiceServer(s grpc.ServiceRegistrar, srv ECRServiceServer) {
	// If the following call pancis, it indicates UnimplementedECRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ECRService_ServiceDesc, srv)
}

func _ECRService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECRLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECRServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECRService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECRServiceServer).Login(ctx, req.(*ECRLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECRService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECRLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECRServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECRService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECRServiceServer).Logout(ctx, req.(*ECRLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECRService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECRStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECRServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECRService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECRServiceServer).GetStatus(ctx, req.(*ECRStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECRService_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECRServiceServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECRService_ListProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECRServiceServer).ListProfiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECRService_SetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECRSetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECRServiceServer).SetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECRService_SetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECRServiceServer).SetProfile(ctx, req.(*ECRSetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECRService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECRDeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECRServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECRService_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECRServiceServer).DeleteProfile(ctx, req.(*ECRDeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ECRService_ServiceDesc is the grpc.ServiceDesc for ECRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ECRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecr.v1.ECRService",
	HandlerType: (*ECRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ECRService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ECRService_Logout_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ECRService_GetStatus_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _ECRService_ListProfiles_Handler,
		},
		{
			MethodName: "SetProfile",
			Handler:    _ECRService_SetProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ECRService_DeleteProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ecr/v1/ecr.proto",
}
