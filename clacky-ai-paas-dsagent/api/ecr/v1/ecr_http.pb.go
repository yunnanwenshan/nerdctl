// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.12.4
// source: ecr/v1/ecr.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationECRServiceDeleteProfile = "/ecr.v1.ECRService/DeleteProfile"
const OperationECRServiceGetStatus = "/ecr.v1.ECRService/GetStatus"
const OperationECRServiceListProfiles = "/ecr.v1.ECRService/ListProfiles"
const OperationECRServiceLogin = "/ecr.v1.ECRService/Login"
const OperationECRServiceLogout = "/ecr.v1.ECRService/Logout"
const OperationECRServiceSetProfile = "/ecr.v1.ECRService/SetProfile"

type ECRServiceHTTPServer interface {
	// DeleteProfile Delete ECR profile
	DeleteProfile(context.Context, *ECRDeleteProfileRequest) (*ECRDeleteProfileResponse, error)
	// GetStatus Get ECR login status for a registry
	GetStatus(context.Context, *ECRStatusRequest) (*ECRStatusResponse, error)
	// ListProfiles List configured ECR profiles
	ListProfiles(context.Context, *emptypb.Empty) (*ECRProfilesResponse, error)
	// Login Login to ECR registry
	Login(context.Context, *ECRLoginRequest) (*ECRLoginResponse, error)
	// Logout Logout from ECR registry
	Logout(context.Context, *ECRLogoutRequest) (*ECRLogoutResponse, error)
	// SetProfile Create or update ECR profile
	SetProfile(context.Context, *ECRSetProfileRequest) (*ECRSetProfileResponse, error)
}

func RegisterECRServiceHTTPServer(s *http.Server, srv ECRServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ecr/login", _ECRService_Login0_HTTP_Handler(srv))
	r.POST("/v1/ecr/logout", _ECRService_Logout0_HTTP_Handler(srv))
	r.GET("/v1/ecr/status", _ECRService_GetStatus0_HTTP_Handler(srv))
	r.GET("/v1/ecr/profiles", _ECRService_ListProfiles0_HTTP_Handler(srv))
	r.POST("/v1/ecr/profiles/{name}", _ECRService_SetProfile0_HTTP_Handler(srv))
	r.DELETE("/v1/ecr/profiles/{name}", _ECRService_DeleteProfile0_HTTP_Handler(srv))
}

func _ECRService_Login0_HTTP_Handler(srv ECRServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ECRLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationECRServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*ECRLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ECRLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _ECRService_Logout0_HTTP_Handler(srv ECRServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ECRLogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationECRServiceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*ECRLogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ECRLogoutResponse)
		return ctx.Result(200, reply)
	}
}

func _ECRService_GetStatus0_HTTP_Handler(srv ECRServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ECRStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationECRServiceGetStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStatus(ctx, req.(*ECRStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ECRStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _ECRService_ListProfiles0_HTTP_Handler(srv ECRServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationECRServiceListProfiles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProfiles(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ECRProfilesResponse)
		return ctx.Result(200, reply)
	}
}

func _ECRService_SetProfile0_HTTP_Handler(srv ECRServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ECRSetProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationECRServiceSetProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetProfile(ctx, req.(*ECRSetProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ECRSetProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _ECRService_DeleteProfile0_HTTP_Handler(srv ECRServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ECRDeleteProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationECRServiceDeleteProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProfile(ctx, req.(*ECRDeleteProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ECRDeleteProfileResponse)
		return ctx.Result(200, reply)
	}
}

type ECRServiceHTTPClient interface {
	DeleteProfile(ctx context.Context, req *ECRDeleteProfileRequest, opts ...http.CallOption) (rsp *ECRDeleteProfileResponse, err error)
	GetStatus(ctx context.Context, req *ECRStatusRequest, opts ...http.CallOption) (rsp *ECRStatusResponse, err error)
	ListProfiles(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ECRProfilesResponse, err error)
	Login(ctx context.Context, req *ECRLoginRequest, opts ...http.CallOption) (rsp *ECRLoginResponse, err error)
	Logout(ctx context.Context, req *ECRLogoutRequest, opts ...http.CallOption) (rsp *ECRLogoutResponse, err error)
	SetProfile(ctx context.Context, req *ECRSetProfileRequest, opts ...http.CallOption) (rsp *ECRSetProfileResponse, err error)
}

type ECRServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewECRServiceHTTPClient(client *http.Client) ECRServiceHTTPClient {
	return &ECRServiceHTTPClientImpl{client}
}

func (c *ECRServiceHTTPClientImpl) DeleteProfile(ctx context.Context, in *ECRDeleteProfileRequest, opts ...http.CallOption) (*ECRDeleteProfileResponse, error) {
	var out ECRDeleteProfileResponse
	pattern := "/v1/ecr/profiles/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationECRServiceDeleteProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ECRServiceHTTPClientImpl) GetStatus(ctx context.Context, in *ECRStatusRequest, opts ...http.CallOption) (*ECRStatusResponse, error) {
	var out ECRStatusResponse
	pattern := "/v1/ecr/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationECRServiceGetStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ECRServiceHTTPClientImpl) ListProfiles(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ECRProfilesResponse, error) {
	var out ECRProfilesResponse
	pattern := "/v1/ecr/profiles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationECRServiceListProfiles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ECRServiceHTTPClientImpl) Login(ctx context.Context, in *ECRLoginRequest, opts ...http.CallOption) (*ECRLoginResponse, error) {
	var out ECRLoginResponse
	pattern := "/v1/ecr/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationECRServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ECRServiceHTTPClientImpl) Logout(ctx context.Context, in *ECRLogoutRequest, opts ...http.CallOption) (*ECRLogoutResponse, error) {
	var out ECRLogoutResponse
	pattern := "/v1/ecr/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationECRServiceLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ECRServiceHTTPClientImpl) SetProfile(ctx context.Context, in *ECRSetProfileRequest, opts ...http.CallOption) (*ECRSetProfileResponse, error) {
	var out ECRSetProfileResponse
	pattern := "/v1/ecr/profiles/{name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationECRServiceSetProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
