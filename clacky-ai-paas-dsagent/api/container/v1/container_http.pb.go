// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.12.4
// source: container/v1/container.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContainerServiceCreateContainer = "/container.v1.ContainerService/CreateContainer"
const OperationContainerServiceExecContainer = "/container.v1.ContainerService/ExecContainer"
const OperationContainerServiceGetContainerPort = "/container.v1.ContainerService/GetContainerPort"
const OperationContainerServiceHealthCheck = "/container.v1.ContainerService/HealthCheck"
const OperationContainerServiceInspectContainer = "/container.v1.ContainerService/InspectContainer"
const OperationContainerServiceKillContainer = "/container.v1.ContainerService/KillContainer"
const OperationContainerServiceListContainers = "/container.v1.ContainerService/ListContainers"
const OperationContainerServicePauseContainer = "/container.v1.ContainerService/PauseContainer"
const OperationContainerServiceRemoveContainer = "/container.v1.ContainerService/RemoveContainer"
const OperationContainerServiceRenameContainer = "/container.v1.ContainerService/RenameContainer"
const OperationContainerServiceRestartContainer = "/container.v1.ContainerService/RestartContainer"
const OperationContainerServiceRunContainer = "/container.v1.ContainerService/RunContainer"
const OperationContainerServiceStartContainer = "/container.v1.ContainerService/StartContainer"
const OperationContainerServiceStopContainer = "/container.v1.ContainerService/StopContainer"
const OperationContainerServiceUnpauseContainer = "/container.v1.ContainerService/UnpauseContainer"
const OperationContainerServiceUpdateContainer = "/container.v1.ContainerService/UpdateContainer"
const OperationContainerServiceWaitContainer = "/container.v1.ContainerService/WaitContainer"

type ContainerServiceHTTPServer interface {
	// CreateContainer Create a container
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	// ExecContainer Execute a command in a running container
	ExecContainer(context.Context, *ExecContainerRequest) (*ExecContainerResponse, error)
	// GetContainerPort Get container port mappings
	GetContainerPort(context.Context, *GetContainerPortRequest) (*GetContainerPortResponse, error)
	// HealthCheck Run health check on container
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// InspectContainer Inspect one or more containers
	InspectContainer(context.Context, *InspectContainerRequest) (*InspectContainerResponse, error)
	// KillContainer Kill one or more containers
	KillContainer(context.Context, *KillContainerRequest) (*KillContainerResponse, error)
	// ListContainers List containers
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	// PauseContainer Pause one or more containers
	PauseContainer(context.Context, *PauseContainerRequest) (*PauseContainerResponse, error)
	// RemoveContainer Remove one or more containers
	RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error)
	// RenameContainer Rename a container
	RenameContainer(context.Context, *RenameContainerRequest) (*RenameContainerResponse, error)
	// RestartContainer Restart one or more containers
	RestartContainer(context.Context, *RestartContainerRequest) (*RestartContainerResponse, error)
	// RunContainer Run a command in a new container
	RunContainer(context.Context, *RunContainerRequest) (*RunContainerResponse, error)
	// StartContainer Start one or more containers
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	// StopContainer Stop one or more containers
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	// UnpauseContainer Unpause one or more containers
	UnpauseContainer(context.Context, *UnpauseContainerRequest) (*UnpauseContainerResponse, error)
	// UpdateContainer Update container configuration
	UpdateContainer(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error)
	// WaitContainer Wait for container to stop
	WaitContainer(context.Context, *WaitContainerRequest) (*WaitContainerResponse, error)
}

func RegisterContainerServiceHTTPServer(s *http.Server, srv ContainerServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/containers", _ContainerService_CreateContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/start", _ContainerService_StartContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/stop", _ContainerService_StopContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/restart", _ContainerService_RestartContainer0_HTTP_Handler(srv))
	r.DELETE("/v1/containers/{container_id}", _ContainerService_RemoveContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/run", _ContainerService_RunContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/exec", _ContainerService_ExecContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/pause", _ContainerService_PauseContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/unpause", _ContainerService_UnpauseContainer0_HTTP_Handler(srv))
	r.GET("/v1/containers", _ContainerService_ListContainers0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/healthcheck", _ContainerService_HealthCheck0_HTTP_Handler(srv))
	r.PUT("/v1/containers/{container_id}/rename", _ContainerService_RenameContainer0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/kill", _ContainerService_KillContainer0_HTTP_Handler(srv))
	r.GET("/v1/containers/{container_id}/port", _ContainerService_GetContainerPort0_HTTP_Handler(srv))
	r.POST("/v1/containers/{container_id}/wait", _ContainerService_WaitContainer0_HTTP_Handler(srv))
	r.PATCH("/v1/containers/{container_id}", _ContainerService_UpdateContainer0_HTTP_Handler(srv))
	r.GET("/v1/containers/{container_id}/inspect", _ContainerService_InspectContainer0_HTTP_Handler(srv))
}

func _ContainerService_CreateContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateContainerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceCreateContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateContainer(ctx, req.(*CreateContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_StartContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceStartContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartContainer(ctx, req.(*StartContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_StopContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceStopContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopContainer(ctx, req.(*StopContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_RestartContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RestartContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceRestartContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestartContainer(ctx, req.(*RestartContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RestartContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_RemoveContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceRemoveContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveContainer(ctx, req.(*RemoveContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_RunContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RunContainerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceRunContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RunContainer(ctx, req.(*RunContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RunContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_ExecContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExecContainerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceExecContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExecContainer(ctx, req.(*ExecContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExecContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_PauseContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PauseContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServicePauseContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PauseContainer(ctx, req.(*PauseContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PauseContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_UnpauseContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnpauseContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceUnpauseContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnpauseContainer(ctx, req.(*UnpauseContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnpauseContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_ListContainers0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListContainersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceListContainers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListContainers(ctx, req.(*ListContainersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListContainersResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_HealthCheck0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthCheckRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*HealthCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthCheckResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_RenameContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RenameContainerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceRenameContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RenameContainer(ctx, req.(*RenameContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RenameContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_KillContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in KillContainerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceKillContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.KillContainer(ctx, req.(*KillContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KillContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_GetContainerPort0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetContainerPortRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceGetContainerPort)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetContainerPort(ctx, req.(*GetContainerPortRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetContainerPortResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_WaitContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WaitContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceWaitContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WaitContainer(ctx, req.(*WaitContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WaitContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_UpdateContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateContainerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceUpdateContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateContainer(ctx, req.(*UpdateContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateContainerResponse)
		return ctx.Result(200, reply)
	}
}

func _ContainerService_InspectContainer0_HTTP_Handler(srv ContainerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InspectContainerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContainerServiceInspectContainer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InspectContainer(ctx, req.(*InspectContainerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InspectContainerResponse)
		return ctx.Result(200, reply)
	}
}

type ContainerServiceHTTPClient interface {
	CreateContainer(ctx context.Context, req *CreateContainerRequest, opts ...http.CallOption) (rsp *CreateContainerResponse, err error)
	ExecContainer(ctx context.Context, req *ExecContainerRequest, opts ...http.CallOption) (rsp *ExecContainerResponse, err error)
	GetContainerPort(ctx context.Context, req *GetContainerPortRequest, opts ...http.CallOption) (rsp *GetContainerPortResponse, err error)
	HealthCheck(ctx context.Context, req *HealthCheckRequest, opts ...http.CallOption) (rsp *HealthCheckResponse, err error)
	InspectContainer(ctx context.Context, req *InspectContainerRequest, opts ...http.CallOption) (rsp *InspectContainerResponse, err error)
	KillContainer(ctx context.Context, req *KillContainerRequest, opts ...http.CallOption) (rsp *KillContainerResponse, err error)
	ListContainers(ctx context.Context, req *ListContainersRequest, opts ...http.CallOption) (rsp *ListContainersResponse, err error)
	PauseContainer(ctx context.Context, req *PauseContainerRequest, opts ...http.CallOption) (rsp *PauseContainerResponse, err error)
	RemoveContainer(ctx context.Context, req *RemoveContainerRequest, opts ...http.CallOption) (rsp *RemoveContainerResponse, err error)
	RenameContainer(ctx context.Context, req *RenameContainerRequest, opts ...http.CallOption) (rsp *RenameContainerResponse, err error)
	RestartContainer(ctx context.Context, req *RestartContainerRequest, opts ...http.CallOption) (rsp *RestartContainerResponse, err error)
	RunContainer(ctx context.Context, req *RunContainerRequest, opts ...http.CallOption) (rsp *RunContainerResponse, err error)
	StartContainer(ctx context.Context, req *StartContainerRequest, opts ...http.CallOption) (rsp *StartContainerResponse, err error)
	StopContainer(ctx context.Context, req *StopContainerRequest, opts ...http.CallOption) (rsp *StopContainerResponse, err error)
	UnpauseContainer(ctx context.Context, req *UnpauseContainerRequest, opts ...http.CallOption) (rsp *UnpauseContainerResponse, err error)
	UpdateContainer(ctx context.Context, req *UpdateContainerRequest, opts ...http.CallOption) (rsp *UpdateContainerResponse, err error)
	WaitContainer(ctx context.Context, req *WaitContainerRequest, opts ...http.CallOption) (rsp *WaitContainerResponse, err error)
}

type ContainerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewContainerServiceHTTPClient(client *http.Client) ContainerServiceHTTPClient {
	return &ContainerServiceHTTPClientImpl{client}
}

func (c *ContainerServiceHTTPClientImpl) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...http.CallOption) (*CreateContainerResponse, error) {
	var out CreateContainerResponse
	pattern := "/v1/containers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContainerServiceCreateContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) ExecContainer(ctx context.Context, in *ExecContainerRequest, opts ...http.CallOption) (*ExecContainerResponse, error) {
	var out ExecContainerResponse
	pattern := "/v1/containers/{container_id}/exec"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContainerServiceExecContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) GetContainerPort(ctx context.Context, in *GetContainerPortRequest, opts ...http.CallOption) (*GetContainerPortResponse, error) {
	var out GetContainerPortResponse
	pattern := "/v1/containers/{container_id}/port"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceGetContainerPort))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...http.CallOption) (*HealthCheckResponse, error) {
	var out HealthCheckResponse
	pattern := "/v1/containers/{container_id}/healthcheck"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) InspectContainer(ctx context.Context, in *InspectContainerRequest, opts ...http.CallOption) (*InspectContainerResponse, error) {
	var out InspectContainerResponse
	pattern := "/v1/containers/{container_id}/inspect"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceInspectContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) KillContainer(ctx context.Context, in *KillContainerRequest, opts ...http.CallOption) (*KillContainerResponse, error) {
	var out KillContainerResponse
	pattern := "/v1/containers/{container_id}/kill"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContainerServiceKillContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...http.CallOption) (*ListContainersResponse, error) {
	var out ListContainersResponse
	pattern := "/v1/containers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceListContainers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...http.CallOption) (*PauseContainerResponse, error) {
	var out PauseContainerResponse
	pattern := "/v1/containers/{container_id}/pause"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServicePauseContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...http.CallOption) (*RemoveContainerResponse, error) {
	var out RemoveContainerResponse
	pattern := "/v1/containers/{container_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceRemoveContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) RenameContainer(ctx context.Context, in *RenameContainerRequest, opts ...http.CallOption) (*RenameContainerResponse, error) {
	var out RenameContainerResponse
	pattern := "/v1/containers/{container_id}/rename"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContainerServiceRenameContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) RestartContainer(ctx context.Context, in *RestartContainerRequest, opts ...http.CallOption) (*RestartContainerResponse, error) {
	var out RestartContainerResponse
	pattern := "/v1/containers/{container_id}/restart"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceRestartContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) RunContainer(ctx context.Context, in *RunContainerRequest, opts ...http.CallOption) (*RunContainerResponse, error) {
	var out RunContainerResponse
	pattern := "/v1/containers/run"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContainerServiceRunContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...http.CallOption) (*StartContainerResponse, error) {
	var out StartContainerResponse
	pattern := "/v1/containers/{container_id}/start"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceStartContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...http.CallOption) (*StopContainerResponse, error) {
	var out StopContainerResponse
	pattern := "/v1/containers/{container_id}/stop"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceStopContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) UnpauseContainer(ctx context.Context, in *UnpauseContainerRequest, opts ...http.CallOption) (*UnpauseContainerResponse, error) {
	var out UnpauseContainerResponse
	pattern := "/v1/containers/{container_id}/unpause"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceUnpauseContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...http.CallOption) (*UpdateContainerResponse, error) {
	var out UpdateContainerResponse
	pattern := "/v1/containers/{container_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContainerServiceUpdateContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ContainerServiceHTTPClientImpl) WaitContainer(ctx context.Context, in *WaitContainerRequest, opts ...http.CallOption) (*WaitContainerResponse, error) {
	var out WaitContainerResponse
	pattern := "/v1/containers/{container_id}/wait"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationContainerServiceWaitContainer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
