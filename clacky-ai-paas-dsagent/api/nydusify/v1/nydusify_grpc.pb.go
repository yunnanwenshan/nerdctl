// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: nydusify/v1/nydusify.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NydusifyService_SubmitCommitTask_FullMethodName = "/nydusify.v1.NydusifyService/SubmitCommitTask"
	NydusifyService_GetTaskStatus_FullMethodName    = "/nydusify.v1.NydusifyService/GetTaskStatus"
	NydusifyService_ListTasks_FullMethodName        = "/nydusify.v1.NydusifyService/ListTasks"
	NydusifyService_CancelTask_FullMethodName       = "/nydusify.v1.NydusifyService/CancelTask"
	NydusifyService_RetryCallback_FullMethodName    = "/nydusify.v1.NydusifyService/RetryCallback"
)

// NydusifyServiceClient is the client API for NydusifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NydusifyService provides asynchronous execution of nydusify commands
type NydusifyServiceClient interface {
	// Submit nydusify commit task for async execution
	SubmitCommitTask(ctx context.Context, in *SubmitCommitTaskRequest, opts ...grpc.CallOption) (*SubmitCommitTaskResponse, error)
	// Get task execution status and results
	GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error)
	// List all tasks with optional filtering
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// Cancel a running task
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
	// Retry callback notification for a completed task
	RetryCallback(ctx context.Context, in *RetryCallbackRequest, opts ...grpc.CallOption) (*RetryCallbackResponse, error)
}

type nydusifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNydusifyServiceClient(cc grpc.ClientConnInterface) NydusifyServiceClient {
	return &nydusifyServiceClient{cc}
}

func (c *nydusifyServiceClient) SubmitCommitTask(ctx context.Context, in *SubmitCommitTaskRequest, opts ...grpc.CallOption) (*SubmitCommitTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitCommitTaskResponse)
	err := c.cc.Invoke(ctx, NydusifyService_SubmitCommitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nydusifyServiceClient) GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskStatusResponse)
	err := c.cc.Invoke(ctx, NydusifyService_GetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nydusifyServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, NydusifyService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nydusifyServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTaskResponse)
	err := c.cc.Invoke(ctx, NydusifyService_CancelTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nydusifyServiceClient) RetryCallback(ctx context.Context, in *RetryCallbackRequest, opts ...grpc.CallOption) (*RetryCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryCallbackResponse)
	err := c.cc.Invoke(ctx, NydusifyService_RetryCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NydusifyServiceServer is the server API for NydusifyService service.
// All implementations must embed UnimplementedNydusifyServiceServer
// for forward compatibility.
//
// NydusifyService provides asynchronous execution of nydusify commands
type NydusifyServiceServer interface {
	// Submit nydusify commit task for async execution
	SubmitCommitTask(context.Context, *SubmitCommitTaskRequest) (*SubmitCommitTaskResponse, error)
	// Get task execution status and results
	GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error)
	// List all tasks with optional filtering
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// Cancel a running task
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
	// Retry callback notification for a completed task
	RetryCallback(context.Context, *RetryCallbackRequest) (*RetryCallbackResponse, error)
	mustEmbedUnimplementedNydusifyServiceServer()
}

// UnimplementedNydusifyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNydusifyServiceServer struct{}

func (UnimplementedNydusifyServiceServer) SubmitCommitTask(context.Context, *SubmitCommitTaskRequest) (*SubmitCommitTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCommitTask not implemented")
}
func (UnimplementedNydusifyServiceServer) GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedNydusifyServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedNydusifyServiceServer) CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedNydusifyServiceServer) RetryCallback(context.Context, *RetryCallbackRequest) (*RetryCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryCallback not implemented")
}
func (UnimplementedNydusifyServiceServer) mustEmbedUnimplementedNydusifyServiceServer() {}
func (UnimplementedNydusifyServiceServer) testEmbeddedByValue()                         {}

// UnsafeNydusifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NydusifyServiceServer will
// result in compilation errors.
type UnsafeNydusifyServiceServer interface {
	mustEmbedUnimplementedNydusifyServiceServer()
}

func RegisterNydusifyServiceServer(s grpc.ServiceRegistrar, srv NydusifyServiceServer) {
	// If the following call pancis, it indicates UnimplementedNydusifyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NydusifyService_ServiceDesc, srv)
}

func _NydusifyService_SubmitCommitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCommitTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NydusifyServiceServer).SubmitCommitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NydusifyService_SubmitCommitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NydusifyServiceServer).SubmitCommitTask(ctx, req.(*SubmitCommitTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NydusifyService_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NydusifyServiceServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NydusifyService_GetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NydusifyServiceServer).GetTaskStatus(ctx, req.(*GetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NydusifyService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NydusifyServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NydusifyService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NydusifyServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NydusifyService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NydusifyServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NydusifyService_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NydusifyServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NydusifyService_RetryCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NydusifyServiceServer).RetryCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NydusifyService_RetryCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NydusifyServiceServer).RetryCallback(ctx, req.(*RetryCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NydusifyService_ServiceDesc is the grpc.ServiceDesc for NydusifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NydusifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nydusify.v1.NydusifyService",
	HandlerType: (*NydusifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitCommitTask",
			Handler:    _NydusifyService_SubmitCommitTask_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _NydusifyService_GetTaskStatus_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _NydusifyService_ListTasks_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _NydusifyService_CancelTask_Handler,
		},
		{
			MethodName: "RetryCallback",
			Handler:    _NydusifyService_RetryCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nydusify/v1/nydusify.proto",
}
