syntax = "proto3";

package events.v1;

option go_package = "dsagent/api/events/v1;v1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

// EventsService provides methods for monitoring container and system events.
service EventsService {
  // Get real-time system events stream - equivalent to `nerdctl events`
  rpc GetSystemEvents (GetSystemEventsRequest) returns (stream SystemEvent) {
    option (google.api.http) = {
      get: "/v1/events"
    };
  }
  
  // Get system events with filters
  rpc GetFilteredSystemEvents (GetFilteredSystemEventsRequest) returns (stream SystemEvent) {
    option (google.api.http) = {
      post: "/v1/events/filtered"
      body: "*"
    };
  }
}

// Request for getting real-time system events
message GetSystemEventsRequest {
  // Output format template (e.g., "json", "{{json .}}")
  string format = 1;
}

// Request for getting filtered system events  
message GetFilteredSystemEventsRequest {
  // Output format template (e.g., "json", "{{json .}}")
  string format = 1;
  
  // Event filters (e.g., "event=start", "status=start")
  repeated string filters = 2;
}

// System event message representing a containerd event
message SystemEvent {
  // Event timestamp
  google.protobuf.Timestamp timestamp = 1;
  
  // Container ID (if applicable)
  string container_id = 2;
  
  // Namespace
  string namespace = 3;
  
  // Event topic (e.g., "/containers/create", "/containers/delete")
  string topic = 4;
  
  // Event status (start, unknown, etc.)
  string status = 5;
  
  // Raw event data as JSON string
  string event_data = 6;
  
  // Event type (container, image, volume, network, etc.)
  string event_type = 7;
  
  // Action (create, start, stop, delete, etc.)
  string action = 8;
  
  // Additional attributes from the event
  map<string, string> attributes = 9;
}

// Event status enumeration
enum EventStatus {
  EVENT_STATUS_UNSPECIFIED = 0;
  EVENT_STATUS_START = 1;
  EVENT_STATUS_UNKNOWN = 2;
}

// Event type enumeration  
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_CONTAINER = 1;
  EVENT_TYPE_IMAGE = 2;
  EVENT_TYPE_VOLUME = 3;
  EVENT_TYPE_NETWORK = 4;
  EVENT_TYPE_SYSTEM = 5;
}