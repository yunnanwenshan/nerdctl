# nerdctl gRPC Server Test Configuration
# This file defines test execution parameters for different environments

# Default test configuration
default:
  timeout: "10m"
  parallel: true
  race_detection: true
  coverage: true
  verbose: true
  test_data_dir: "./testdata"
  log_level: "info"

# Environment-specific configurations
environments:
  development:
    timeout: "5m"
    parallel: false
    race_detection: true
    coverage: true
    verbose: true
    log_level: "debug"
    skip_patterns:
      - "*_integration_test.go"
      - "*_stress_test.go"
    
  ci:
    timeout: "15m"
    parallel: true
    race_detection: false  # Disabled for CI speed
    coverage: true
    verbose: true
    log_level: "warn"
    skip_patterns:
      - "*_stress_test.go"
    retry_count: 2
    
  integration:
    timeout: "20m"
    parallel: true
    race_detection: true
    coverage: true
    verbose: true
    log_level: "info"
    required_binaries:
      - "nerdctl_v1"
      - "nerdctl_v2"
    
  stress:
    timeout: "30m"
    parallel: true
    race_detection: false
    coverage: false
    verbose: true
    log_level: "warn"
    stress_parameters:
      max_goroutines: 100
      test_duration: "5m"
      memory_limit: "1GB"

# Test suite configurations
suites:
  unit:
    description: "Fast unit tests with mocks"
    paths:
      - "./internal/..."
      - "./pkg/..."
      - "./test/adapters/..."
      - "./test/mocks/..."
    flags:
      - "-short"
    exclude_patterns:
      - "*_integration_test.go"
      - "*_stress_test.go"
      - "*_benchmark_test.go"
    
  integration:
    description: "Integration tests with real binaries"
    paths:
      - "./test/integration/..."
    env_vars:
      NERDCTL_INTEGRATION_TESTS: "1"
    requirements:
      - nerdctl_binary_available
      - docker_daemon_running
    pre_setup:
      - "make test-env-check"
    
  stress:
    description: "Stress tests for load and reliability"
    paths:
      - "./test/stress/..."
    flags:
      - "-timeout=30m"
    requirements:
      - sufficient_memory
      - sufficient_cpu
    
  benchmark:
    description: "Performance benchmarks"
    paths:
      - "./..."
    flags:
      - "-bench=."
      - "-benchmem"
      - "-benchtime=5s"
      - "-run=^$"
    
  security:
    description: "Security and vulnerability tests"
    tools:
      - "gosec"
      - "nancy"
    paths:
      - "./..."

# Mock configurations
mocks:
  enabled: true
  auto_generate: true
  output_dir: "./test/mocks"
  interfaces:
    - "interfaces.ContainerManager"
    - "interfaces.ImageManager"
    - "interfaces.NetworkManager"
    - "interfaces.VolumeManager"
    - "interfaces.ComposeManager"
    - "interfaces.SystemManager"
  
# Coverage configurations  
coverage:
  enabled: true
  output_file: "./coverage/coverage.out"
  html_output: "./coverage/coverage.html"
  threshold: 80.0
  exclude_patterns:
    - "*.pb.go"
    - "*_mock.go"
    - "*/testdata/*"
    - "*/test/*"
  include_packages:
    - "./internal/..."
    - "./pkg/..."

# Binary detection and management
binaries:
  search_paths:
    - "/usr/local/bin"
    - "/usr/bin"
    - "/opt/nerdctl/bin"
    - "./bin"
    - "./tmp"
    - "../_output"
  
  version_detection:
    command: "--version"
    timeout: "5s"
    patterns:
      v1: "^nerdctl version 1\\."
      v2: "^nerdctl version 2\\."
  
  download_sources:
    v1_latest: "https://github.com/containerd/nerdctl/releases/download/v1.7.6/nerdctl-1.7.6-linux-amd64.tar.gz"
    v2_latest: "https://github.com/containerd/nerdctl/releases/download/v2.0.0/nerdctl-2.0.0-linux-amd64.tar.gz"

# Adapter testing configurations
adapters:
  v1:
    test_cases:
      - "basic_functionality"
      - "error_handling"
      - "compatibility_checks"
    mock_responses:
      container_list: |
        [
          {"ID": "abc123", "Names": ["test"], "State": "running"},
          {"ID": "def456", "Names": ["web"], "State": "exited"}
        ]
      image_list: |
        [
          {"Repository": "alpine", "Tag": "latest", "ID": "sha256:abc123"},
          {"Repository": "nginx", "Tag": "1.21", "ID": "sha256:def456"}
        ]
  
  v2:
    test_cases:
      - "basic_functionality"
      - "enhanced_features"
      - "json_output"
      - "structured_logging"
      - "metadata_streaming"
    mock_responses:
      container_list: |
        {
          "containers": [
            {
              "id": "abc123",
              "name": "test",
              "status": "running",
              "metadata": {
                "created_at": "2024-01-01T00:00:00Z",
                "health": "healthy"
              }
            }
          ]
        }
      image_list: |
        {
          "images": [
            {
              "repository": "alpine",
              "tag": "latest",
              "digest": "sha256:abc123",
              "metadata": {
                "size": "5.6MB",
                "architecture": "amd64"
              }
            }
          ]
        }

# Performance testing
performance:
  benchmarks:
    enabled: true
    duration: "30s"
    cpu_profile: true
    memory_profile: true
    output_dir: "./performance"
    
  load_testing:
    max_concurrent_requests: 100
    request_rate: "10/s"
    duration: "5m"
    scenarios:
      - "container_lifecycle"
      - "image_operations"
      - "network_management"

# Reporting
reporting:
  formats:
    - "console"
    - "json"
    - "junit"
    - "html"
  
  output_dir: "./test-reports"
  
  console:
    colored: true
    verbose: true
    show_coverage: true
  
  json:
    filename: "test-results.json"
    include_coverage: true
    include_benchmarks: true
  
  junit:
    filename: "junit.xml"
    classname_format: "package"
  
  html:
    filename: "test-report.html"
    include_coverage: true
    theme: "default"

# Integration with external systems
external_systems:
  docker:
    required: false
    check_command: "docker ps"
    setup_commands:
      - "docker pull alpine:latest"
      - "docker pull nginx:alpine"
  
  containerd:
    required: true
    check_command: "ctr version"
    socket_path: "/run/containerd/containerd.sock"
  
  buildkit:
    required: false
    check_command: "buildctl debug info"

# Cleanup configuration
cleanup:
  auto_cleanup: true
  cleanup_timeout: "30s"
  preserve_on_failure: false
  cleanup_commands:
    - "nerdctl system prune -f"
    - "docker system prune -f"

# Debugging and troubleshooting
debugging:
  verbose_logs: false
  trace_execution: false
  preserve_temp_files: false
  debug_port: 2345
  profiling_enabled: false
  
# Notification settings (for CI/CD integration)
notifications:
  slack:
    enabled: false
    webhook_url: "${SLACK_WEBHOOK_URL}"
    channels:
      success: "#ci-success"
      failure: "#ci-alerts"
  
  email:
    enabled: false
    smtp_server: "smtp.gmail.com:587"
    recipients:
      - "team@example.com"

# Version compatibility matrix
compatibility_matrix:
  go_versions:
    - "1.21"
    - "1.22"
    - "1.23"
  
  nerdctl_versions:
    v1:
      - "1.7.0"
      - "1.7.6"
    v2:
      - "2.0.0"
      - "2.1.0"
  
  platforms:
    - "linux/amd64"
    - "linux/arm64"
    - "darwin/amd64"
    - "darwin/arm64"