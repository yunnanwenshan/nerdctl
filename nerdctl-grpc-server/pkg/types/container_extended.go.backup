package types

import (
	"context"
	"io"
	"time"

	"google.golang.org/protobuf/types/known/structpb"
)

// Extended container configuration with comprehensive nerdctl support
type ContainerConfig struct {
	// Basic configuration
	Image      string            `json:"image"`
	Name       string            `json:"name"`
	Command    []string          `json:"command"`
	Args       []string          `json:"args"`
	Env        []string          `json:"env"`
	WorkingDir string            `json:"working_dir"`
	Labels     map[string]string `json:"labels"`
	User       string            `json:"user"`

	// Network configuration
	NetworkConfig *NetworkConfig     `json:"network_config,omitempty"`
	DNS           []string          `json:"dns"`
	DNSSearch     []string          `json:"dns_search"`
	DNSOpts       []string          `json:"dns_opts"`
	Hostname      string            `json:"hostname"`
	Domainname    string            `json:"domainname"`
	ExtraHosts    []string          `json:"extra_hosts"`
	PublishAll    bool              `json:"publish_all"`
	Ports         []PortMapping     `json:"ports"`

	// Storage configuration
	Mounts      []VolumeMount `json:"mounts"`
	VolumesFrom []string      `json:"volumes_from"`
	Tmpfs       []string      `json:"tmpfs"`
	ShmSize     string        `json:"shm_size"`

	// Resource configuration
	Resources    *ResourceLimits `json:"resources,omitempty"`
	CgroupParent string          `json:"cgroup_parent"`
	Ulimit       []string        `json:"ulimit"`
	Sysctl       []string        `json:"sysctl"`

	// Security configuration
	Security      *SecurityOptions `json:"security,omitempty"`
	CapAdd        []string         `json:"cap_add"`
	CapDrop       []string         `json:"cap_drop"`
	Privileged    bool             `json:"privileged"`
	UserNSMode    string           `json:"user_ns_mode"`
	ReadOnlyRootfs bool            `json:"read_only_rootfs"`

	// Process configuration
	TTY    bool   `json:"tty"`
	Stdin  bool   `json:"stdin"`
	Init   bool   `json:"init"`
	InitBinary string `json:"init_binary"`
	PidMode    string `json:"pid_mode"`
	IpcMode    string `json:"ipc_mode"`
	UtsMode    string `json:"uts_mode"`

	// Device configuration
	Devices           []string `json:"devices"`
	DeviceCgroupRules []string `json:"device_cgroup_rules"`
	GPUs              []string `json:"gpus"`

	// Health and logging
	HealthCheck *HealthCheck `json:"health_check,omitempty"`
	LogConfig   *LogConfig   `json:"log_config,omitempty"`

	// Runtime configuration
	RestartPolicy  *RestartPolicy    `json:"restart_policy,omitempty"`
	Platform       *Platform         `json:"platform,omitempty"`
	Runtime        string            `json:"runtime"`
	RuntimeOptions map[string]string `json:"runtime_options"`

	// Stop configuration
	StopSignal  string `json:"stop_signal"`
	StopTimeout int32  `json:"stop_timeout"`

	// Advanced options
	AutoRemove       bool     `json:"auto_remove"`
	ReadOnly         bool     `json:"read_only"`
	Isolation        string   `json:"isolation"`
	GroupAdd         []string `json:"group_add"`
	NoNewPrivileges  bool     `json:"no_new_privileges"`
	ApparmorProfile  string   `json:"apparmor_profile"`
	SeccompProfile   string   `json:"seccomp_profile"`
	CgroupNSMode     string   `json:"cgroup_ns_mode"`
	MemorySwappiness int64    `json:"memory_swappiness"`
	OomScoreAdj      int      `json:"oom_score_adj"`
}

// PortMapping represents port mapping configuration
type PortMapping struct {
	Protocol      string `json:"protocol"`      // tcp, udp, sctp
	ContainerPort int32  `json:"container_port"`
	HostPort      int32  `json:"host_port"`
	HostIP        string `json:"host_ip"`
}

// VolumeMount represents volume mount configuration
type VolumeMount struct {
	Type        string            `json:"type"`        // bind, volume, tmpfs
	Source      string            `json:"source"`
	Target      string            `json:"target"`
	ReadOnly    bool              `json:"read_only"`
	Consistency string            `json:"consistency"` // consistent, cached, delegated
	BindOptions *BindOptions      `json:"bind_options,omitempty"`
	VolumeOptions *VolumeOptions  `json:"volume_options,omitempty"`
	TmpfsOptions *TmpfsOptions    `json:"tmpfs_options,omitempty"`
}

// BindOptions for bind mounts
type BindOptions struct {
	Propagation string `json:"propagation"` // rprivate, private, rshared, shared, rslave, slave
}

// VolumeOptions for volume mounts
type VolumeOptions struct {
	NoCopy       bool              `json:"no_copy"`
	Labels       map[string]string `json:"labels"`
	DriverConfig *VolumeDriverConfig `json:"driver_config,omitempty"`
}

// VolumeDriverConfig represents volume driver configuration
type VolumeDriverConfig struct {
	Name    string            `json:"name"`
	Options map[string]string `json:"options"`
}

// TmpfsOptions for tmpfs mounts
type TmpfsOptions struct {
	SizeBytes int64 `json:"size_bytes"`
	Mode      int32 `json:"mode"`
}

// ResourceLimits represents container resource limits
type ResourceLimits struct {
	Memory            int64  `json:"memory"`
	MemoryReservation int64  `json:"memory_reservation"`
	MemorySwap        int64  `json:"memory_swap"`
	MemorySwappiness  *int64 `json:"memory_swappiness,omitempty"`
	CPUShares         int64  `json:"cpu_shares"`
	CPUPeriod         int64  `json:"cpu_period"`
	CPUQuota          int64  `json:"cpu_quota"`
	CPURealtimePeriod int64  `json:"cpu_realtime_period"`
	CPURealtimeRuntime int64 `json:"cpu_realtime_runtime"`
	CPUs              string `json:"cpus"`
	CPUSet            string `json:"cpuset"`
	CPUSetMems        string `json:"cpuset_mems"`
	PidsLimit         int64  `json:"pids_limit"`
	BlkioWeight       uint16 `json:"blkio_weight"`
	BlkioWeightDevice []WeightDevice `json:"blkio_weight_device"`
	BlkioDeviceReadBps []ThrottleDevice `json:"blkio_device_read_bps"`
	BlkioDeviceWriteBps []ThrottleDevice `json:"blkio_device_write_bps"`
	BlkioDeviceReadIOps []ThrottleDevice `json:"blkio_device_read_iops"`
	BlkioDeviceWriteIOps []ThrottleDevice `json:"blkio_device_write_iops"`
	DeviceRequests    []DeviceRequest `json:"device_requests"`
}

// WeightDevice represents a device weight setting
type WeightDevice struct {
	Path   string `json:"path"`
	Weight uint16 `json:"weight"`
}

// ThrottleDevice represents a device throttle setting
type ThrottleDevice struct {
	Path string `json:"path"`
	Rate uint64 `json:"rate"`
}

// DeviceRequest represents a device request (e.g., GPUs)
type DeviceRequest struct {
	Driver       string            `json:"driver,omitempty"`
	Count        int               `json:"count,omitempty"`
	DeviceIDs    []string          `json:"device_ids,omitempty"`
	Capabilities [][]string        `json:"capabilities,omitempty"`
	Options      map[string]string `json:"options,omitempty"`
}

// SecurityOptions represents container security configuration
type SecurityOptions struct {
	Privileged       bool     `json:"privileged"`
	UserNSMode       string   `json:"user_ns_mode"`
	ReadOnlyRootfs   bool     `json:"read_only_rootfs"`
	NoNewPrivileges  bool     `json:"no_new_privileges"`
	ApparmorProfile  string   `json:"apparmor_profile"`
	SeccompProfile   string   `json:"seccomp_profile"`
	SelinuxLabel     string   `json:"selinux_label"`
	CapAdd           []string `json:"cap_add"`
	CapDrop          []string `json:"cap_drop"`
	GroupAdd         []string `json:"group_add"`
	SupplementalGroups []string `json:"supplemental_groups"`
	Sysctls          map[string]string `json:"sysctls"`
	MaskedPaths      []string `json:"masked_paths"`
	ReadonlyPaths    []string `json:"readonly_paths"`
}

// NetworkConfig represents container network configuration
type NetworkConfig struct {
	NetworkMode  string              `json:"network_mode"`
	Networks     map[string]*EndpointConfig `json:"networks"`
	PortBindings map[string][]PortBinding `json:"port_bindings"`
	PublishAll   bool                `json:"publish_all"`
	DNS          []string            `json:"dns"`
	DNSOptions   []string            `json:"dns_options"`
	DNSSearch    []string            `json:"dns_search"`
	ExtraHosts   []string            `json:"extra_hosts"`
	Hostname     string              `json:"hostname"`
	Domainname   string              `json:"domainname"`
	MacAddress   string              `json:"mac_address"`
}

// EndpointConfig represents network endpoint configuration
type EndpointConfig struct {
	IPAMConfig          *EndpointIPAMConfig `json:"ipam_config,omitempty"`
	Links               []string           `json:"links,omitempty"`
	Aliases             []string           `json:"aliases,omitempty"`
	NetworkID           string             `json:"network_id,omitempty"`
	EndpointID          string             `json:"endpoint_id,omitempty"`
	Gateway             string             `json:"gateway,omitempty"`
	IPAddress           string             `json:"ip_address,omitempty"`
	IPPrefixLen         int                `json:"ip_prefix_len"`
	IPv6Gateway         string             `json:"ipv6_gateway,omitempty"`
	GlobalIPv6Address   string             `json:"global_ipv6_address,omitempty"`
	GlobalIPv6PrefixLen int                `json:"global_ipv6_prefix_len"`
	MacAddress          string             `json:"mac_address,omitempty"`
	DriverOpts          map[string]string  `json:"driver_opts,omitempty"`
}

// HealthCheck represents container health check configuration
type HealthCheck struct {
	Test        []string      `json:"test"`
	Interval    time.Duration `json:"interval"`
	Timeout     time.Duration `json:"timeout"`
	Retries     int           `json:"retries"`
	StartPeriod time.Duration `json:"start_period"`
}

// LogConfig represents container logging configuration
type LogConfig struct {
	Type   string            `json:"type"`   // json-file, journald, syslog, etc.
	Config map[string]string `json:"config"` // driver-specific options
}

// RestartPolicy represents container restart policy
type RestartPolicy struct {
	Name              string `json:"name"`                // no, always, unless-stopped, on-failure
	MaximumRetryCount int    `json:"maximum_retry_count"` // for on-failure policy
}

// Container operation options and results

// CreateContainerOptions represents options for creating a container
type CreateContainerOptions struct {
	Config    *ContainerConfig `json:"config"`
	Namespace string           `json:"namespace"`
	DryRun    bool             `json:"dry_run"`
	Platform  string           `json:"platform"`
}

// CreateContainerResult represents the result of creating a container
type CreateContainerResult struct {
	ID        string    `json:"id"`
	Warnings  []string  `json:"warnings"`
	Container Container `json:"container"`
}

// StartContainerOptions represents options for starting a container
type StartContainerOptions struct {
	ContainerID string   `json:"container_id"`
	Namespace   string   `json:"namespace"`
	Attach      []string `json:"attach"`
	DetachKeys  string   `json:"detach_keys"`
	Interactive bool     `json:"interactive"`
}

// StopContainerOptions represents options for stopping a container
type StopContainerOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	Timeout     int32  `json:"timeout"`
	Kill        bool   `json:"kill"` // Force kill if stop fails
}

// RemoveContainerOptions represents options for removing a container
type RemoveContainerOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	Force       bool   `json:"force"`
	Volumes     bool   `json:"volumes"`
	Link        bool   `json:"link"`
}

// RestartContainerOptions represents options for restarting a container
type RestartContainerOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	Timeout     int32  `json:"timeout"`
}

// KillContainerOptions represents options for killing a container
type KillContainerOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	Signal      string `json:"signal"`
}

// PauseContainerOptions represents options for pausing a container
type PauseContainerOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
}

// UnpauseContainerOptions represents options for unpausing a container
type UnpauseContainerOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
}

// RunContainerOptions represents options for running a container
type RunContainerOptions struct {
	Config     *ContainerConfig  `json:"config"`
	Namespace  string            `json:"namespace"`
	Detach     bool              `json:"detach"`
	DetachKeys string            `json:"detach_keys"`
	Remove     bool              `json:"remove"`
	Attach     []string          `json:"attach"`
	EnvFile    map[string]string `json:"env_file"`
	Platform   string            `json:"platform"`
}

// RunContainerResult represents the result of running a container
type RunContainerResult struct {
	ID        string    `json:"id"`
	ExitCode  int32     `json:"exit_code"`
	Warnings  []string  `json:"warnings"`
	Container Container `json:"container"`
}

// StreamOutput represents streaming output from container operations
type StreamOutput struct {
	ContainerID string `json:"container_id"`
	Stream      string `json:"stream"` // stdout, stderr
	Data        string `json:"data"`
	Timestamp   time.Time `json:"timestamp"`
}

// ListContainersOptions represents options for listing containers
type ListContainersOptions struct {
	Namespace string            `json:"namespace"`
	All       bool              `json:"all"`
	Last      int               `json:"last"`
	Latest    bool              `json:"latest"`
	NoTrunc   bool              `json:"no_trunc"`
	Quiet     bool              `json:"quiet"`
	Size      bool              `json:"size"`
	Filters   map[string]string `json:"filters"`
	Format    string            `json:"format"`
}

// InspectContainerOptions represents options for inspecting a container
type InspectContainerOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	Size        bool   `json:"size"`
	Format      string `json:"format"`
}

// InspectContainerResult represents the result of inspecting a container
type InspectContainerResult struct {
	Container Container         `json:"container"`
	RawData   *structpb.Struct  `json:"raw_data"`
}

// GetContainerLogsOptions represents options for getting container logs
type GetContainerLogsOptions struct {
	ContainerID string    `json:"container_id"`
	Namespace   string    `json:"namespace"`
	Follow      bool      `json:"follow"`
	Tail        string    `json:"tail"`
	Since       time.Time `json:"since"`
	Until       time.Time `json:"until"`
	ShowStdout  bool      `json:"show_stdout"`
	ShowStderr  bool      `json:"show_stderr"`
	Timestamps  bool      `json:"timestamps"`
	Details     bool      `json:"details"`
}

// LogEntry represents a log entry
type LogEntry struct {
	Timestamp time.Time `json:"timestamp"`
	Stream    string    `json:"stream"` // stdout, stderr
	Content   string    `json:"content"`
}

// ExecContainerOptions represents options for executing commands in a container
type ExecContainerOptions struct {
	ContainerID  string   `json:"container_id"`
	Namespace    string   `json:"namespace"`
	Command      []string `json:"command"`
	TTY          bool     `json:"tty"`
	Interactive  bool     `json:"interactive"`
	Detach       bool     `json:"detach"`
	User         string   `json:"user"`
	WorkingDir   string   `json:"working_dir"`
	Env          []string `json:"env"`
	Privileged   bool     `json:"privileged"`
	DetachKeys   string   `json:"detach_keys"`
}

// ExecResult represents the result of executing a command
type ExecResult struct {
	ExecID   string `json:"exec_id"`
	ExitCode int32  `json:"exit_code"`
	Output   string `json:"output"`
	Error    string `json:"error"`
}

// GetContainerStatsOptions represents options for getting container statistics
type GetContainerStatsOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	Stream      bool   `json:"stream"`
	NoStream    bool   `json:"no_stream"`
}

// ContainerStats represents container runtime statistics
type ContainerStats struct {
	ContainerID string    `json:"container_id"`
	Name        string    `json:"name"`
	CPUPercent  float64   `json:"cpu_percent"`
	MemUsage    uint64    `json:"mem_usage"`
	MemLimit    uint64    `json:"mem_limit"`
	MemPercent  float64   `json:"mem_percent"`
	NetI        uint64    `json:"net_i"`
	NetO        uint64    `json:"net_o"`
	BlockI      uint64    `json:"block_i"`
	BlockO      uint64    `json:"block_o"`
	Pids        int       `json:"pids"`
	Timestamp   time.Time `json:"timestamp"`
}

// GetContainerTopOptions represents options for getting container processes
type GetContainerTopOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	PsArgs      string `json:"ps_args"`
}

// ContainerTopResult represents container process information
type ContainerTopResult struct {
	Titles    []string      `json:"titles"`
	Processes []ProcessInfo `json:"processes"`
}

// ProcessInfo represents process information
type ProcessInfo struct {
	Values []string `json:"values"`
}

// GetContainerPortOptions represents options for getting container ports
type GetContainerPortOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	PrivatePort string `json:"private_port"`
}

// ContainerPortInfo represents container port information
type ContainerPortInfo struct {
	PrivatePort string `json:"private_port"`
	PublicPort  string `json:"public_port"`
	Type        string `json:"type"`
	IP          string `json:"ip"`
}

// Batch operation types

// BatchOperationResult represents the result of a batch operation on a single container
type BatchOperationResult struct {
	ContainerID string `json:"container_id"`
	Success     bool   `json:"success"`
	Error       string `json:"error,omitempty"`
	Warning     string `json:"warning,omitempty"`
}

// Container event types

// ContainerEvent represents a container state change event
type ContainerEvent struct {
	Type          string            `json:"type"`
	ContainerID   string            `json:"container_id"`
	ContainerName string            `json:"container_name"`
	Image         string            `json:"image"`
	Timestamp     time.Time         `json:"timestamp"`
	Attributes    map[string]string `json:"attributes"`
}

// MonitorContainerEventsOptions represents options for monitoring container events
type MonitorContainerEventsOptions struct {
	ContainerIDs []string          `json:"container_ids"`
	EventTypes   []string          `json:"event_types"`
	Namespace    string            `json:"namespace"`
	Since        time.Time         `json:"since"`
	Until        time.Time         `json:"until"`
	Filters      map[string]string `json:"filters"`
}

// Container utility interfaces and types

// AttachOptions represents options for attaching to a container
type AttachOptions struct {
	ContainerID string `json:"container_id"`
	Namespace   string `json:"namespace"`
	Stdin       bool   `json:"stdin"`
	Stdout      bool   `json:"stdout"`
	Stderr      bool   `json:"stderr"`
	Stream      bool   `json:"stream"`
	DetachKeys  string `json:"detach_keys"`
}

// AttachSession represents an active attach session
type AttachSession interface {
	SendStdin(data []byte) error
	ReceiveOutput() (*AttachOutput, error)
	Close() error
}

// AttachOutput represents output from an attach session
type AttachOutput struct {
	Stream string `json:"stream"` // stdout, stderr
	Data   []byte `json:"data"`
}

// ExecSession represents an active exec session
type ExecSession interface {
	SendStdin(data []byte) error
	ReceiveOutput() (*ExecOutput, error)
	GetExitCode() (int32, error)
	Close() error
}

// ExecOutput represents output from an exec session
type ExecOutput struct {
	Stream string `json:"stream"` // stdout, stderr
	Data   []byte `json:"data"`
}

// Health check types

// HealthStatus represents container health status
type HealthStatus struct {
	Status      string              `json:"status"`       // healthy, unhealthy, starting
	FailingStreak int               `json:"failing_streak"`
	Log         []*HealthCheckLog   `json:"log"`
}

// HealthCheckLog represents a health check log entry
type HealthCheckLog struct {
	Start    time.Time `json:"start"`
	End      time.Time `json:"end"`
	ExitCode int32     `json:"exit_code"`
	Output   string    `json:"output"`
}

// HealthCheck represents a health check configuration
type HealthCheckConfig struct {
	Test        []string      `json:"test"`
	Interval    time.Duration `json:"interval"`
	Timeout     time.Duration `json:"timeout"`
	Retries     int           `json:"retries"`
	StartPeriod time.Duration `json:"start_period"`
}

// SupportedFeatures represents supported features by the adapter
type SupportedFeatures struct {
	Version           string   `json:"version"`
	SupportedCommands []string `json:"supported_commands"`
	Capabilities      map[string]bool `json:"capabilities"`
	Extensions        map[string]interface{} `json:"extensions"`
}

// VersionInfo represents version information
type VersionInfo struct {
	Version    string `json:"version"`
	GitCommit  string `json:"git_commit"`
	BuildDate  string `json:"build_date"`
	GoVersion  string `json:"go_version"`
	Platform   string `json:"platform"`
}