// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/network_service_extended.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkServiceExtended_CreateNetwork_FullMethodName               = "/nerdctl.v1.NetworkServiceExtended/CreateNetwork"
	NetworkServiceExtended_RemoveNetwork_FullMethodName               = "/nerdctl.v1.NetworkServiceExtended/RemoveNetwork"
	NetworkServiceExtended_ListNetworks_FullMethodName                = "/nerdctl.v1.NetworkServiceExtended/ListNetworks"
	NetworkServiceExtended_InspectNetwork_FullMethodName              = "/nerdctl.v1.NetworkServiceExtended/InspectNetwork"
	NetworkServiceExtended_ConnectNetwork_FullMethodName              = "/nerdctl.v1.NetworkServiceExtended/ConnectNetwork"
	NetworkServiceExtended_DisconnectNetwork_FullMethodName           = "/nerdctl.v1.NetworkServiceExtended/DisconnectNetwork"
	NetworkServiceExtended_PruneNetworks_FullMethodName               = "/nerdctl.v1.NetworkServiceExtended/PruneNetworks"
	NetworkServiceExtended_UpdateNetwork_FullMethodName               = "/nerdctl.v1.NetworkServiceExtended/UpdateNetwork"
	NetworkServiceExtended_NetworkExists_FullMethodName               = "/nerdctl.v1.NetworkServiceExtended/NetworkExists"
	NetworkServiceExtended_NetworkEvents_FullMethodName               = "/nerdctl.v1.NetworkServiceExtended/NetworkEvents"
	NetworkServiceExtended_NetworkStats_FullMethodName                = "/nerdctl.v1.NetworkServiceExtended/NetworkStats"
	NetworkServiceExtended_BatchNetworkOperations_FullMethodName      = "/nerdctl.v1.NetworkServiceExtended/BatchNetworkOperations"
	NetworkServiceExtended_BulkNetworkInspect_FullMethodName          = "/nerdctl.v1.NetworkServiceExtended/BulkNetworkInspect"
	NetworkServiceExtended_ListNetworkDrivers_FullMethodName          = "/nerdctl.v1.NetworkServiceExtended/ListNetworkDrivers"
	NetworkServiceExtended_GetNetworkConfig_FullMethodName            = "/nerdctl.v1.NetworkServiceExtended/GetNetworkConfig"
	NetworkServiceExtended_ValidateNetworkConfig_FullMethodName       = "/nerdctl.v1.NetworkServiceExtended/ValidateNetworkConfig"
	NetworkServiceExtended_DiagnoseNetwork_FullMethodName             = "/nerdctl.v1.NetworkServiceExtended/DiagnoseNetwork"
	NetworkServiceExtended_NetworkConnectivity_FullMethodName         = "/nerdctl.v1.NetworkServiceExtended/NetworkConnectivity"
	NetworkServiceExtended_GetNetworkSupportedFeatures_FullMethodName = "/nerdctl.v1.NetworkServiceExtended/GetNetworkSupportedFeatures"
)

// NetworkServiceExtendedClient is the client API for NetworkServiceExtended service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Extended Network service for managing container networks with comprehensive functionality
type NetworkServiceExtendedClient interface {
	// Basic network lifecycle operations
	CreateNetwork(ctx context.Context, in *CreateNetworkExtendedRequest, opts ...grpc.CallOption) (*CreateNetworkExtendedResponse, error)
	RemoveNetwork(ctx context.Context, in *RemoveNetworkExtendedRequest, opts ...grpc.CallOption) (*RemoveNetworkExtendedResponse, error)
	ListNetworks(ctx context.Context, in *ListNetworksExtendedRequest, opts ...grpc.CallOption) (*ListNetworksExtendedResponse, error)
	InspectNetwork(ctx context.Context, in *InspectNetworkExtendedRequest, opts ...grpc.CallOption) (*InspectNetworkExtendedResponse, error)
	// Network connection operations
	ConnectNetwork(ctx context.Context, in *ConnectNetworkExtendedRequest, opts ...grpc.CallOption) (*ConnectNetworkExtendedResponse, error)
	DisconnectNetwork(ctx context.Context, in *DisconnectNetworkExtendedRequest, opts ...grpc.CallOption) (*DisconnectNetworkExtendedResponse, error)
	// Network cleanup and maintenance
	PruneNetworks(ctx context.Context, in *PruneNetworksExtendedRequest, opts ...grpc.CallOption) (*PruneNetworksExtendedResponse, error)
	// Advanced network operations
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error)
	NetworkExists(ctx context.Context, in *NetworkExistsRequest, opts ...grpc.CallOption) (*NetworkExistsResponse, error)
	// Network monitoring and events
	NetworkEvents(ctx context.Context, in *NetworkEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkEvent], error)
	NetworkStats(ctx context.Context, in *NetworkStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkStatsResponse], error)
	// Batch operations
	BatchNetworkOperations(ctx context.Context, in *BatchNetworkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatchNetworkResponse], error)
	BulkNetworkInspect(ctx context.Context, in *BulkInspectNetworkRequest, opts ...grpc.CallOption) (*BulkInspectNetworkResponse, error)
	// CNI and driver specific operations
	ListNetworkDrivers(ctx context.Context, in *ListNetworkDriversRequest, opts ...grpc.CallOption) (*ListNetworkDriversResponse, error)
	GetNetworkConfig(ctx context.Context, in *GetNetworkConfigRequest, opts ...grpc.CallOption) (*GetNetworkConfigResponse, error)
	ValidateNetworkConfig(ctx context.Context, in *ValidateNetworkConfigRequest, opts ...grpc.CallOption) (*ValidateNetworkConfigResponse, error)
	// Network diagnostics
	DiagnoseNetwork(ctx context.Context, in *DiagnoseNetworkRequest, opts ...grpc.CallOption) (*DiagnoseNetworkResponse, error)
	NetworkConnectivity(ctx context.Context, in *NetworkConnectivityRequest, opts ...grpc.CallOption) (*NetworkConnectivityResponse, error)
	// Version and capabilities
	GetNetworkSupportedFeatures(ctx context.Context, in *GetNetworkSupportedFeaturesRequest, opts ...grpc.CallOption) (*GetNetworkSupportedFeaturesResponse, error)
}

type networkServiceExtendedClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceExtendedClient(cc grpc.ClientConnInterface) NetworkServiceExtendedClient {
	return &networkServiceExtendedClient{cc}
}

func (c *networkServiceExtendedClient) CreateNetwork(ctx context.Context, in *CreateNetworkExtendedRequest, opts ...grpc.CallOption) (*CreateNetworkExtendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNetworkExtendedResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) RemoveNetwork(ctx context.Context, in *RemoveNetworkExtendedRequest, opts ...grpc.CallOption) (*RemoveNetworkExtendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNetworkExtendedResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_RemoveNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) ListNetworks(ctx context.Context, in *ListNetworksExtendedRequest, opts ...grpc.CallOption) (*ListNetworksExtendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworksExtendedResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) InspectNetwork(ctx context.Context, in *InspectNetworkExtendedRequest, opts ...grpc.CallOption) (*InspectNetworkExtendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InspectNetworkExtendedResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_InspectNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) ConnectNetwork(ctx context.Context, in *ConnectNetworkExtendedRequest, opts ...grpc.CallOption) (*ConnectNetworkExtendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectNetworkExtendedResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_ConnectNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) DisconnectNetwork(ctx context.Context, in *DisconnectNetworkExtendedRequest, opts ...grpc.CallOption) (*DisconnectNetworkExtendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectNetworkExtendedResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_DisconnectNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) PruneNetworks(ctx context.Context, in *PruneNetworksExtendedRequest, opts ...grpc.CallOption) (*PruneNetworksExtendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruneNetworksExtendedResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_PruneNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNetworkResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_UpdateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) NetworkExists(ctx context.Context, in *NetworkExistsRequest, opts ...grpc.CallOption) (*NetworkExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkExistsResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_NetworkExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) NetworkEvents(ctx context.Context, in *NetworkEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetworkServiceExtended_ServiceDesc.Streams[0], NetworkServiceExtended_NetworkEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NetworkEventsRequest, NetworkEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkServiceExtended_NetworkEventsClient = grpc.ServerStreamingClient[NetworkEvent]

func (c *networkServiceExtendedClient) NetworkStats(ctx context.Context, in *NetworkStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkStatsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetworkServiceExtended_ServiceDesc.Streams[1], NetworkServiceExtended_NetworkStats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NetworkStatsRequest, NetworkStatsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkServiceExtended_NetworkStatsClient = grpc.ServerStreamingClient[NetworkStatsResponse]

func (c *networkServiceExtendedClient) BatchNetworkOperations(ctx context.Context, in *BatchNetworkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatchNetworkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetworkServiceExtended_ServiceDesc.Streams[2], NetworkServiceExtended_BatchNetworkOperations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatchNetworkRequest, BatchNetworkResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkServiceExtended_BatchNetworkOperationsClient = grpc.ServerStreamingClient[BatchNetworkResponse]

func (c *networkServiceExtendedClient) BulkNetworkInspect(ctx context.Context, in *BulkInspectNetworkRequest, opts ...grpc.CallOption) (*BulkInspectNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkInspectNetworkResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_BulkNetworkInspect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) ListNetworkDrivers(ctx context.Context, in *ListNetworkDriversRequest, opts ...grpc.CallOption) (*ListNetworkDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworkDriversResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_ListNetworkDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) GetNetworkConfig(ctx context.Context, in *GetNetworkConfigRequest, opts ...grpc.CallOption) (*GetNetworkConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkConfigResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_GetNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) ValidateNetworkConfig(ctx context.Context, in *ValidateNetworkConfigRequest, opts ...grpc.CallOption) (*ValidateNetworkConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateNetworkConfigResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_ValidateNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) DiagnoseNetwork(ctx context.Context, in *DiagnoseNetworkRequest, opts ...grpc.CallOption) (*DiagnoseNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiagnoseNetworkResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_DiagnoseNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) NetworkConnectivity(ctx context.Context, in *NetworkConnectivityRequest, opts ...grpc.CallOption) (*NetworkConnectivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkConnectivityResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_NetworkConnectivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceExtendedClient) GetNetworkSupportedFeatures(ctx context.Context, in *GetNetworkSupportedFeaturesRequest, opts ...grpc.CallOption) (*GetNetworkSupportedFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkSupportedFeaturesResponse)
	err := c.cc.Invoke(ctx, NetworkServiceExtended_GetNetworkSupportedFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceExtendedServer is the server API for NetworkServiceExtended service.
// All implementations must embed UnimplementedNetworkServiceExtendedServer
// for forward compatibility.
//
// Extended Network service for managing container networks with comprehensive functionality
type NetworkServiceExtendedServer interface {
	// Basic network lifecycle operations
	CreateNetwork(context.Context, *CreateNetworkExtendedRequest) (*CreateNetworkExtendedResponse, error)
	RemoveNetwork(context.Context, *RemoveNetworkExtendedRequest) (*RemoveNetworkExtendedResponse, error)
	ListNetworks(context.Context, *ListNetworksExtendedRequest) (*ListNetworksExtendedResponse, error)
	InspectNetwork(context.Context, *InspectNetworkExtendedRequest) (*InspectNetworkExtendedResponse, error)
	// Network connection operations
	ConnectNetwork(context.Context, *ConnectNetworkExtendedRequest) (*ConnectNetworkExtendedResponse, error)
	DisconnectNetwork(context.Context, *DisconnectNetworkExtendedRequest) (*DisconnectNetworkExtendedResponse, error)
	// Network cleanup and maintenance
	PruneNetworks(context.Context, *PruneNetworksExtendedRequest) (*PruneNetworksExtendedResponse, error)
	// Advanced network operations
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error)
	NetworkExists(context.Context, *NetworkExistsRequest) (*NetworkExistsResponse, error)
	// Network monitoring and events
	NetworkEvents(*NetworkEventsRequest, grpc.ServerStreamingServer[NetworkEvent]) error
	NetworkStats(*NetworkStatsRequest, grpc.ServerStreamingServer[NetworkStatsResponse]) error
	// Batch operations
	BatchNetworkOperations(*BatchNetworkRequest, grpc.ServerStreamingServer[BatchNetworkResponse]) error
	BulkNetworkInspect(context.Context, *BulkInspectNetworkRequest) (*BulkInspectNetworkResponse, error)
	// CNI and driver specific operations
	ListNetworkDrivers(context.Context, *ListNetworkDriversRequest) (*ListNetworkDriversResponse, error)
	GetNetworkConfig(context.Context, *GetNetworkConfigRequest) (*GetNetworkConfigResponse, error)
	ValidateNetworkConfig(context.Context, *ValidateNetworkConfigRequest) (*ValidateNetworkConfigResponse, error)
	// Network diagnostics
	DiagnoseNetwork(context.Context, *DiagnoseNetworkRequest) (*DiagnoseNetworkResponse, error)
	NetworkConnectivity(context.Context, *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error)
	// Version and capabilities
	GetNetworkSupportedFeatures(context.Context, *GetNetworkSupportedFeaturesRequest) (*GetNetworkSupportedFeaturesResponse, error)
	mustEmbedUnimplementedNetworkServiceExtendedServer()
}

// UnimplementedNetworkServiceExtendedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkServiceExtendedServer struct{}

func (UnimplementedNetworkServiceExtendedServer) CreateNetwork(context.Context, *CreateNetworkExtendedRequest) (*CreateNetworkExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) RemoveNetwork(context.Context, *RemoveNetworkExtendedRequest) (*RemoveNetworkExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNetwork not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) ListNetworks(context.Context, *ListNetworksExtendedRequest) (*ListNetworksExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) InspectNetwork(context.Context, *InspectNetworkExtendedRequest) (*InspectNetworkExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectNetwork not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) ConnectNetwork(context.Context, *ConnectNetworkExtendedRequest) (*ConnectNetworkExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectNetwork not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) DisconnectNetwork(context.Context, *DisconnectNetworkExtendedRequest) (*DisconnectNetworkExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectNetwork not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) PruneNetworks(context.Context, *PruneNetworksExtendedRequest) (*PruneNetworksExtendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneNetworks not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) NetworkExists(context.Context, *NetworkExistsRequest) (*NetworkExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkExists not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) NetworkEvents(*NetworkEventsRequest, grpc.ServerStreamingServer[NetworkEvent]) error {
	return status.Errorf(codes.Unimplemented, "method NetworkEvents not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) NetworkStats(*NetworkStatsRequest, grpc.ServerStreamingServer[NetworkStatsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NetworkStats not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) BatchNetworkOperations(*BatchNetworkRequest, grpc.ServerStreamingServer[BatchNetworkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BatchNetworkOperations not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) BulkNetworkInspect(context.Context, *BulkInspectNetworkRequest) (*BulkInspectNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkNetworkInspect not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) ListNetworkDrivers(context.Context, *ListNetworkDriversRequest) (*ListNetworkDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkDrivers not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) GetNetworkConfig(context.Context, *GetNetworkConfigRequest) (*GetNetworkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkConfig not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) ValidateNetworkConfig(context.Context, *ValidateNetworkConfigRequest) (*ValidateNetworkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNetworkConfig not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) DiagnoseNetwork(context.Context, *DiagnoseNetworkRequest) (*DiagnoseNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiagnoseNetwork not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) NetworkConnectivity(context.Context, *NetworkConnectivityRequest) (*NetworkConnectivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkConnectivity not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) GetNetworkSupportedFeatures(context.Context, *GetNetworkSupportedFeaturesRequest) (*GetNetworkSupportedFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkSupportedFeatures not implemented")
}
func (UnimplementedNetworkServiceExtendedServer) mustEmbedUnimplementedNetworkServiceExtendedServer() {
}
func (UnimplementedNetworkServiceExtendedServer) testEmbeddedByValue() {}

// UnsafeNetworkServiceExtendedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceExtendedServer will
// result in compilation errors.
type UnsafeNetworkServiceExtendedServer interface {
	mustEmbedUnimplementedNetworkServiceExtendedServer()
}

func RegisterNetworkServiceExtendedServer(s grpc.ServiceRegistrar, srv NetworkServiceExtendedServer) {
	// If the following call pancis, it indicates UnimplementedNetworkServiceExtendedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkServiceExtended_ServiceDesc, srv)
}

func _NetworkServiceExtended_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).CreateNetwork(ctx, req.(*CreateNetworkExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_RemoveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNetworkExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).RemoveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_RemoveNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).RemoveNetwork(ctx, req.(*RemoveNetworkExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).ListNetworks(ctx, req.(*ListNetworksExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_InspectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectNetworkExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).InspectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_InspectNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).InspectNetwork(ctx, req.(*InspectNetworkExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_ConnectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectNetworkExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).ConnectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_ConnectNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).ConnectNetwork(ctx, req.(*ConnectNetworkExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_DisconnectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectNetworkExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).DisconnectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_DisconnectNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).DisconnectNetwork(ctx, req.(*DisconnectNetworkExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_PruneNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneNetworksExtendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).PruneNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_PruneNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).PruneNetworks(ctx, req.(*PruneNetworksExtendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_UpdateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).UpdateNetwork(ctx, req.(*UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_NetworkExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).NetworkExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_NetworkExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).NetworkExists(ctx, req.(*NetworkExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_NetworkEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceExtendedServer).NetworkEvents(m, &grpc.GenericServerStream[NetworkEventsRequest, NetworkEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkServiceExtended_NetworkEventsServer = grpc.ServerStreamingServer[NetworkEvent]

func _NetworkServiceExtended_NetworkStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceExtendedServer).NetworkStats(m, &grpc.GenericServerStream[NetworkStatsRequest, NetworkStatsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkServiceExtended_NetworkStatsServer = grpc.ServerStreamingServer[NetworkStatsResponse]

func _NetworkServiceExtended_BatchNetworkOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchNetworkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceExtendedServer).BatchNetworkOperations(m, &grpc.GenericServerStream[BatchNetworkRequest, BatchNetworkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NetworkServiceExtended_BatchNetworkOperationsServer = grpc.ServerStreamingServer[BatchNetworkResponse]

func _NetworkServiceExtended_BulkNetworkInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInspectNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).BulkNetworkInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_BulkNetworkInspect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).BulkNetworkInspect(ctx, req.(*BulkInspectNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_ListNetworkDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).ListNetworkDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_ListNetworkDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).ListNetworkDrivers(ctx, req.(*ListNetworkDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_GetNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).GetNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_GetNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).GetNetworkConfig(ctx, req.(*GetNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_ValidateNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNetworkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).ValidateNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_ValidateNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).ValidateNetworkConfig(ctx, req.(*ValidateNetworkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_DiagnoseNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnoseNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).DiagnoseNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_DiagnoseNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).DiagnoseNetwork(ctx, req.(*DiagnoseNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_NetworkConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkConnectivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).NetworkConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_NetworkConnectivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).NetworkConnectivity(ctx, req.(*NetworkConnectivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceExtended_GetNetworkSupportedFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkSupportedFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceExtendedServer).GetNetworkSupportedFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServiceExtended_GetNetworkSupportedFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceExtendedServer).GetNetworkSupportedFeatures(ctx, req.(*GetNetworkSupportedFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkServiceExtended_ServiceDesc is the grpc.ServiceDesc for NetworkServiceExtended service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkServiceExtended_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nerdctl.v1.NetworkServiceExtended",
	HandlerType: (*NetworkServiceExtendedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _NetworkServiceExtended_CreateNetwork_Handler,
		},
		{
			MethodName: "RemoveNetwork",
			Handler:    _NetworkServiceExtended_RemoveNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _NetworkServiceExtended_ListNetworks_Handler,
		},
		{
			MethodName: "InspectNetwork",
			Handler:    _NetworkServiceExtended_InspectNetwork_Handler,
		},
		{
			MethodName: "ConnectNetwork",
			Handler:    _NetworkServiceExtended_ConnectNetwork_Handler,
		},
		{
			MethodName: "DisconnectNetwork",
			Handler:    _NetworkServiceExtended_DisconnectNetwork_Handler,
		},
		{
			MethodName: "PruneNetworks",
			Handler:    _NetworkServiceExtended_PruneNetworks_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _NetworkServiceExtended_UpdateNetwork_Handler,
		},
		{
			MethodName: "NetworkExists",
			Handler:    _NetworkServiceExtended_NetworkExists_Handler,
		},
		{
			MethodName: "BulkNetworkInspect",
			Handler:    _NetworkServiceExtended_BulkNetworkInspect_Handler,
		},
		{
			MethodName: "ListNetworkDrivers",
			Handler:    _NetworkServiceExtended_ListNetworkDrivers_Handler,
		},
		{
			MethodName: "GetNetworkConfig",
			Handler:    _NetworkServiceExtended_GetNetworkConfig_Handler,
		},
		{
			MethodName: "ValidateNetworkConfig",
			Handler:    _NetworkServiceExtended_ValidateNetworkConfig_Handler,
		},
		{
			MethodName: "DiagnoseNetwork",
			Handler:    _NetworkServiceExtended_DiagnoseNetwork_Handler,
		},
		{
			MethodName: "NetworkConnectivity",
			Handler:    _NetworkServiceExtended_NetworkConnectivity_Handler,
		},
		{
			MethodName: "GetNetworkSupportedFeatures",
			Handler:    _NetworkServiceExtended_GetNetworkSupportedFeatures_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NetworkEvents",
			Handler:       _NetworkServiceExtended_NetworkEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NetworkStats",
			Handler:       _NetworkServiceExtended_NetworkStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BatchNetworkOperations",
			Handler:       _NetworkServiceExtended_BatchNetworkOperations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/network_service_extended.proto",
}
