// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/image_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageService_PullImage_FullMethodName    = "/nerdctl.v1.ImageService/PullImage"
	ImageService_PushImage_FullMethodName    = "/nerdctl.v1.ImageService/PushImage"
	ImageService_ListImages_FullMethodName   = "/nerdctl.v1.ImageService/ListImages"
	ImageService_RemoveImage_FullMethodName  = "/nerdctl.v1.ImageService/RemoveImage"
	ImageService_InspectImage_FullMethodName = "/nerdctl.v1.ImageService/InspectImage"
	ImageService_TagImage_FullMethodName     = "/nerdctl.v1.ImageService/TagImage"
	ImageService_BuildImage_FullMethodName   = "/nerdctl.v1.ImageService/BuildImage"
	ImageService_LoadImage_FullMethodName    = "/nerdctl.v1.ImageService/LoadImage"
	ImageService_SaveImage_FullMethodName    = "/nerdctl.v1.ImageService/SaveImage"
	ImageService_ImportImage_FullMethodName  = "/nerdctl.v1.ImageService/ImportImage"
	ImageService_ExportImage_FullMethodName  = "/nerdctl.v1.ImageService/ExportImage"
	ImageService_ImageHistory_FullMethodName = "/nerdctl.v1.ImageService/ImageHistory"
	ImageService_PruneImages_FullMethodName  = "/nerdctl.v1.ImageService/PruneImages"
	ImageService_SearchImages_FullMethodName = "/nerdctl.v1.ImageService/SearchImages"
	ImageService_ConvertImage_FullMethodName = "/nerdctl.v1.ImageService/ConvertImage"
	ImageService_EncryptImage_FullMethodName = "/nerdctl.v1.ImageService/EncryptImage"
	ImageService_DecryptImage_FullMethodName = "/nerdctl.v1.ImageService/DecryptImage"
	ImageService_SignImage_FullMethodName    = "/nerdctl.v1.ImageService/SignImage"
	ImageService_VerifyImage_FullMethodName  = "/nerdctl.v1.ImageService/VerifyImage"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Image service for managing container images
type ImageServiceClient interface {
	// Pull an image from registry
	PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullImageResponse], error)
	// Push an image to registry
	PushImage(ctx context.Context, in *PushImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PushImageResponse], error)
	// List images
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// Remove images
	RemoveImage(ctx context.Context, in *RemoveImageRequest, opts ...grpc.CallOption) (*RemoveImageResponse, error)
	// Inspect image
	InspectImage(ctx context.Context, in *InspectImageRequest, opts ...grpc.CallOption) (*InspectImageResponse, error)
	// Tag image
	TagImage(ctx context.Context, in *TagImageRequest, opts ...grpc.CallOption) (*TagImageResponse, error)
	// Build image from Dockerfile
	BuildImage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuildImageRequest, BuildImageResponse], error)
	// Load images from tar archive
	LoadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadImageRequest, LoadImageResponse], error)
	// Save images to tar archive
	SaveImage(ctx context.Context, in *SaveImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SaveImageResponse], error)
	// Import image from tar archive
	ImportImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImportImageRequest, ImportImageResponse], error)
	// Export image as tar archive
	ExportImage(ctx context.Context, in *ExportImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportImageResponse], error)
	// Get image history
	ImageHistory(ctx context.Context, in *ImageHistoryRequest, opts ...grpc.CallOption) (*ImageHistoryResponse, error)
	// Prune unused images
	PruneImages(ctx context.Context, in *PruneImagesRequest, opts ...grpc.CallOption) (*PruneImagesResponse, error)
	// Search images in registry
	SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error)
	// Convert image format
	ConvertImage(ctx context.Context, in *ConvertImageRequest, opts ...grpc.CallOption) (*ConvertImageResponse, error)
	// Encrypt image
	EncryptImage(ctx context.Context, in *EncryptImageRequest, opts ...grpc.CallOption) (*EncryptImageResponse, error)
	// Decrypt image
	DecryptImage(ctx context.Context, in *DecryptImageRequest, opts ...grpc.CallOption) (*DecryptImageResponse, error)
	// Sign image
	SignImage(ctx context.Context, in *SignImageRequest, opts ...grpc.CallOption) (*SignImageResponse, error)
	// Verify image signature
	VerifyImage(ctx context.Context, in *VerifyImageRequest, opts ...grpc.CallOption) (*VerifyImageResponse, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[0], ImageService_PullImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullImageRequest, PullImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_PullImageClient = grpc.ServerStreamingClient[PullImageResponse]

func (c *imageServiceClient) PushImage(ctx context.Context, in *PushImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PushImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[1], ImageService_PushImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushImageRequest, PushImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_PushImageClient = grpc.ServerStreamingClient[PushImageResponse]

func (c *imageServiceClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, ImageService_ListImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) RemoveImage(ctx context.Context, in *RemoveImageRequest, opts ...grpc.CallOption) (*RemoveImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveImageResponse)
	err := c.cc.Invoke(ctx, ImageService_RemoveImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) InspectImage(ctx context.Context, in *InspectImageRequest, opts ...grpc.CallOption) (*InspectImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InspectImageResponse)
	err := c.cc.Invoke(ctx, ImageService_InspectImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) TagImage(ctx context.Context, in *TagImageRequest, opts ...grpc.CallOption) (*TagImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagImageResponse)
	err := c.cc.Invoke(ctx, ImageService_TagImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) BuildImage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuildImageRequest, BuildImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[2], ImageService_BuildImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BuildImageRequest, BuildImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_BuildImageClient = grpc.BidiStreamingClient[BuildImageRequest, BuildImageResponse]

func (c *imageServiceClient) LoadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadImageRequest, LoadImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[3], ImageService_LoadImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoadImageRequest, LoadImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_LoadImageClient = grpc.ClientStreamingClient[LoadImageRequest, LoadImageResponse]

func (c *imageServiceClient) SaveImage(ctx context.Context, in *SaveImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SaveImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[4], ImageService_SaveImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SaveImageRequest, SaveImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_SaveImageClient = grpc.ServerStreamingClient[SaveImageResponse]

func (c *imageServiceClient) ImportImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImportImageRequest, ImportImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[5], ImageService_ImportImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImportImageRequest, ImportImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_ImportImageClient = grpc.ClientStreamingClient[ImportImageRequest, ImportImageResponse]

func (c *imageServiceClient) ExportImage(ctx context.Context, in *ExportImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[6], ImageService_ExportImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportImageRequest, ExportImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_ExportImageClient = grpc.ServerStreamingClient[ExportImageResponse]

func (c *imageServiceClient) ImageHistory(ctx context.Context, in *ImageHistoryRequest, opts ...grpc.CallOption) (*ImageHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageHistoryResponse)
	err := c.cc.Invoke(ctx, ImageService_ImageHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) PruneImages(ctx context.Context, in *PruneImagesRequest, opts ...grpc.CallOption) (*PruneImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruneImagesResponse)
	err := c.cc.Invoke(ctx, ImageService_PruneImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchImagesResponse)
	err := c.cc.Invoke(ctx, ImageService_SearchImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) ConvertImage(ctx context.Context, in *ConvertImageRequest, opts ...grpc.CallOption) (*ConvertImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertImageResponse)
	err := c.cc.Invoke(ctx, ImageService_ConvertImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) EncryptImage(ctx context.Context, in *EncryptImageRequest, opts ...grpc.CallOption) (*EncryptImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptImageResponse)
	err := c.cc.Invoke(ctx, ImageService_EncryptImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) DecryptImage(ctx context.Context, in *DecryptImageRequest, opts ...grpc.CallOption) (*DecryptImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecryptImageResponse)
	err := c.cc.Invoke(ctx, ImageService_DecryptImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) SignImage(ctx context.Context, in *SignImageRequest, opts ...grpc.CallOption) (*SignImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignImageResponse)
	err := c.cc.Invoke(ctx, ImageService_SignImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) VerifyImage(ctx context.Context, in *VerifyImageRequest, opts ...grpc.CallOption) (*VerifyImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyImageResponse)
	err := c.cc.Invoke(ctx, ImageService_VerifyImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility.
//
// Image service for managing container images
type ImageServiceServer interface {
	// Pull an image from registry
	PullImage(*PullImageRequest, grpc.ServerStreamingServer[PullImageResponse]) error
	// Push an image to registry
	PushImage(*PushImageRequest, grpc.ServerStreamingServer[PushImageResponse]) error
	// List images
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	// Remove images
	RemoveImage(context.Context, *RemoveImageRequest) (*RemoveImageResponse, error)
	// Inspect image
	InspectImage(context.Context, *InspectImageRequest) (*InspectImageResponse, error)
	// Tag image
	TagImage(context.Context, *TagImageRequest) (*TagImageResponse, error)
	// Build image from Dockerfile
	BuildImage(grpc.BidiStreamingServer[BuildImageRequest, BuildImageResponse]) error
	// Load images from tar archive
	LoadImage(grpc.ClientStreamingServer[LoadImageRequest, LoadImageResponse]) error
	// Save images to tar archive
	SaveImage(*SaveImageRequest, grpc.ServerStreamingServer[SaveImageResponse]) error
	// Import image from tar archive
	ImportImage(grpc.ClientStreamingServer[ImportImageRequest, ImportImageResponse]) error
	// Export image as tar archive
	ExportImage(*ExportImageRequest, grpc.ServerStreamingServer[ExportImageResponse]) error
	// Get image history
	ImageHistory(context.Context, *ImageHistoryRequest) (*ImageHistoryResponse, error)
	// Prune unused images
	PruneImages(context.Context, *PruneImagesRequest) (*PruneImagesResponse, error)
	// Search images in registry
	SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error)
	// Convert image format
	ConvertImage(context.Context, *ConvertImageRequest) (*ConvertImageResponse, error)
	// Encrypt image
	EncryptImage(context.Context, *EncryptImageRequest) (*EncryptImageResponse, error)
	// Decrypt image
	DecryptImage(context.Context, *DecryptImageRequest) (*DecryptImageResponse, error)
	// Sign image
	SignImage(context.Context, *SignImageRequest) (*SignImageResponse, error)
	// Verify image signature
	VerifyImage(context.Context, *VerifyImageRequest) (*VerifyImageResponse, error)
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageServiceServer struct{}

func (UnimplementedImageServiceServer) PullImage(*PullImageRequest, grpc.ServerStreamingServer[PullImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullImage not implemented")
}
func (UnimplementedImageServiceServer) PushImage(*PushImageRequest, grpc.ServerStreamingServer[PushImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PushImage not implemented")
}
func (UnimplementedImageServiceServer) ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedImageServiceServer) RemoveImage(context.Context, *RemoveImageRequest) (*RemoveImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveImage not implemented")
}
func (UnimplementedImageServiceServer) InspectImage(context.Context, *InspectImageRequest) (*InspectImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectImage not implemented")
}
func (UnimplementedImageServiceServer) TagImage(context.Context, *TagImageRequest) (*TagImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagImage not implemented")
}
func (UnimplementedImageServiceServer) BuildImage(grpc.BidiStreamingServer[BuildImageRequest, BuildImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BuildImage not implemented")
}
func (UnimplementedImageServiceServer) LoadImage(grpc.ClientStreamingServer[LoadImageRequest, LoadImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LoadImage not implemented")
}
func (UnimplementedImageServiceServer) SaveImage(*SaveImageRequest, grpc.ServerStreamingServer[SaveImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SaveImage not implemented")
}
func (UnimplementedImageServiceServer) ImportImage(grpc.ClientStreamingServer[ImportImageRequest, ImportImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ImportImage not implemented")
}
func (UnimplementedImageServiceServer) ExportImage(*ExportImageRequest, grpc.ServerStreamingServer[ExportImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExportImage not implemented")
}
func (UnimplementedImageServiceServer) ImageHistory(context.Context, *ImageHistoryRequest) (*ImageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageHistory not implemented")
}
func (UnimplementedImageServiceServer) PruneImages(context.Context, *PruneImagesRequest) (*PruneImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneImages not implemented")
}
func (UnimplementedImageServiceServer) SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImages not implemented")
}
func (UnimplementedImageServiceServer) ConvertImage(context.Context, *ConvertImageRequest) (*ConvertImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertImage not implemented")
}
func (UnimplementedImageServiceServer) EncryptImage(context.Context, *EncryptImageRequest) (*EncryptImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptImage not implemented")
}
func (UnimplementedImageServiceServer) DecryptImage(context.Context, *DecryptImageRequest) (*DecryptImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptImage not implemented")
}
func (UnimplementedImageServiceServer) SignImage(context.Context, *SignImageRequest) (*SignImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignImage not implemented")
}
func (UnimplementedImageServiceServer) VerifyImage(context.Context, *VerifyImageRequest) (*VerifyImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyImage not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}
func (UnimplementedImageServiceServer) testEmbeddedByValue()                      {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_PullImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).PullImage(m, &grpc.GenericServerStream[PullImageRequest, PullImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_PullImageServer = grpc.ServerStreamingServer[PullImageResponse]

func _ImageService_PushImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).PushImage(m, &grpc.GenericServerStream[PushImageRequest, PushImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_PushImageServer = grpc.ServerStreamingServer[PushImageResponse]

func _ImageService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_ListImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_RemoveImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).RemoveImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_RemoveImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).RemoveImage(ctx, req.(*RemoveImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_InspectImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).InspectImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_InspectImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).InspectImage(ctx, req.(*InspectImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_TagImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).TagImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_TagImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).TagImage(ctx, req.(*TagImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_BuildImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServiceServer).BuildImage(&grpc.GenericServerStream[BuildImageRequest, BuildImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_BuildImageServer = grpc.BidiStreamingServer[BuildImageRequest, BuildImageResponse]

func _ImageService_LoadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServiceServer).LoadImage(&grpc.GenericServerStream[LoadImageRequest, LoadImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_LoadImageServer = grpc.ClientStreamingServer[LoadImageRequest, LoadImageResponse]

func _ImageService_SaveImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SaveImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).SaveImage(m, &grpc.GenericServerStream[SaveImageRequest, SaveImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_SaveImageServer = grpc.ServerStreamingServer[SaveImageResponse]

func _ImageService_ImportImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServiceServer).ImportImage(&grpc.GenericServerStream[ImportImageRequest, ImportImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_ImportImageServer = grpc.ClientStreamingServer[ImportImageRequest, ImportImageResponse]

func _ImageService_ExportImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).ExportImage(m, &grpc.GenericServerStream[ExportImageRequest, ExportImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_ExportImageServer = grpc.ServerStreamingServer[ExportImageResponse]

func _ImageService_ImageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).ImageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_ImageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).ImageHistory(ctx, req.(*ImageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_PruneImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).PruneImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_PruneImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).PruneImages(ctx, req.(*PruneImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_SearchImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).SearchImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_SearchImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).SearchImages(ctx, req.(*SearchImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_ConvertImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).ConvertImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_ConvertImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).ConvertImage(ctx, req.(*ConvertImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_EncryptImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).EncryptImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_EncryptImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).EncryptImage(ctx, req.(*EncryptImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_DecryptImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).DecryptImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_DecryptImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).DecryptImage(ctx, req.(*DecryptImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_SignImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).SignImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_SignImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).SignImage(ctx, req.(*SignImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_VerifyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).VerifyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_VerifyImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).VerifyImage(ctx, req.(*VerifyImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nerdctl.v1.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListImages",
			Handler:    _ImageService_ListImages_Handler,
		},
		{
			MethodName: "RemoveImage",
			Handler:    _ImageService_RemoveImage_Handler,
		},
		{
			MethodName: "InspectImage",
			Handler:    _ImageService_InspectImage_Handler,
		},
		{
			MethodName: "TagImage",
			Handler:    _ImageService_TagImage_Handler,
		},
		{
			MethodName: "ImageHistory",
			Handler:    _ImageService_ImageHistory_Handler,
		},
		{
			MethodName: "PruneImages",
			Handler:    _ImageService_PruneImages_Handler,
		},
		{
			MethodName: "SearchImages",
			Handler:    _ImageService_SearchImages_Handler,
		},
		{
			MethodName: "ConvertImage",
			Handler:    _ImageService_ConvertImage_Handler,
		},
		{
			MethodName: "EncryptImage",
			Handler:    _ImageService_EncryptImage_Handler,
		},
		{
			MethodName: "DecryptImage",
			Handler:    _ImageService_DecryptImage_Handler,
		},
		{
			MethodName: "SignImage",
			Handler:    _ImageService_SignImage_Handler,
		},
		{
			MethodName: "VerifyImage",
			Handler:    _ImageService_VerifyImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullImage",
			Handler:       _ImageService_PullImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushImage",
			Handler:       _ImageService_PushImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildImage",
			Handler:       _ImageService_BuildImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LoadImage",
			Handler:       _ImageService_LoadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SaveImage",
			Handler:       _ImageService_SaveImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportImage",
			Handler:       _ImageService_ImportImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExportImage",
			Handler:       _ImageService_ExportImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/image_service.proto",
}
