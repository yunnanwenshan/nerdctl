// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: api/proto/container_service.proto

package proto

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContainerChange_Kind int32

const (
	ContainerChange_UNKNOWN  ContainerChange_Kind = 0
	ContainerChange_MODIFIED ContainerChange_Kind = 1
	ContainerChange_ADDED    ContainerChange_Kind = 2
	ContainerChange_DELETED  ContainerChange_Kind = 3
)

// Enum value maps for ContainerChange_Kind.
var (
	ContainerChange_Kind_name = map[int32]string{
		0: "UNKNOWN",
		1: "MODIFIED",
		2: "ADDED",
		3: "DELETED",
	}
	ContainerChange_Kind_value = map[string]int32{
		"UNKNOWN":  0,
		"MODIFIED": 1,
		"ADDED":    2,
		"DELETED":  3,
	}
)

func (x ContainerChange_Kind) Enum() *ContainerChange_Kind {
	p := new(ContainerChange_Kind)
	*p = x
	return p
}

func (x ContainerChange_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerChange_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_container_service_proto_enumTypes[0].Descriptor()
}

func (ContainerChange_Kind) Type() protoreflect.EnumType {
	return &file_api_proto_container_service_proto_enumTypes[0]
}

func (x ContainerChange_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerChange_Kind.Descriptor instead.
func (ContainerChange_Kind) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{48, 0}
}

type CreateContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`                                                                             // Image reference
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                               // Container name
	Command       []string               `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`                                                                         // Command to run
	Args          []string               `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`                                                                               // Command arguments
	Env           []string               `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`                                                                                 // Environment variables
	WorkingDir    string                 `protobuf:"bytes,6,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`                                                 // Working directory
	Labels        map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Container labels
	NetworkConfig *NetworkConfig         `protobuf:"bytes,8,opt,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty"`                                        // Network configuration
	Mounts        []*VolumeMount         `protobuf:"bytes,9,rep,name=mounts,proto3" json:"mounts,omitempty"`                                                                           // Volume mounts
	Resources     *ResourceLimits        `protobuf:"bytes,10,opt,name=resources,proto3" json:"resources,omitempty"`                                                                    // Resource limits
	Security      *SecurityOptions       `protobuf:"bytes,11,opt,name=security,proto3" json:"security,omitempty"`                                                                      // Security options
	HealthCheck   *HealthCheck           `protobuf:"bytes,12,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`                                             // Health check configuration
	LogConfig     *LogConfig             `protobuf:"bytes,13,opt,name=log_config,json=logConfig,proto3" json:"log_config,omitempty"`                                                   // Log configuration
	RestartPolicy *RestartPolicy         `protobuf:"bytes,14,opt,name=restart_policy,json=restartPolicy,proto3" json:"restart_policy,omitempty"`                                       // Restart policy
	Platform      *Platform              `protobuf:"bytes,15,opt,name=platform,proto3" json:"platform,omitempty"`                                                                      // Platform specification
	Namespace     string                 `protobuf:"bytes,16,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                    // Containerd namespace
	Tty           bool                   `protobuf:"varint,17,opt,name=tty,proto3" json:"tty,omitempty"`                                                                               // Allocate pseudo-TTY
	Stdin         bool                   `protobuf:"varint,18,opt,name=stdin,proto3" json:"stdin,omitempty"`                                                                           // Keep STDIN open
	Init          bool                   `protobuf:"varint,19,opt,name=init,proto3" json:"init,omitempty"`                                                                             // Run init process
	InitBinary    string                 `protobuf:"bytes,20,opt,name=init_binary,json=initBinary,proto3" json:"init_binary,omitempty"`                                                // Init binary path
	CapAdd        []string               `protobuf:"bytes,21,rep,name=cap_add,json=capAdd,proto3" json:"cap_add,omitempty"`                                                            // Capabilities to add
	CapDrop       []string               `protobuf:"bytes,22,rep,name=cap_drop,json=capDrop,proto3" json:"cap_drop,omitempty"`                                                         // Capabilities to drop
	Device        []string               `protobuf:"bytes,23,rep,name=device,proto3" json:"device,omitempty"`                                                                          // Device mappings
	CgroupParent  string                 `protobuf:"bytes,24,opt,name=cgroup_parent,json=cgroupParent,proto3" json:"cgroup_parent,omitempty"`                                          // Parent cgroup
	IpcMode       string                 `protobuf:"bytes,25,opt,name=ipc_mode,json=ipcMode,proto3" json:"ipc_mode,omitempty"`                                                         // IPC mode
	PidMode       string                 `protobuf:"bytes,26,opt,name=pid_mode,json=pidMode,proto3" json:"pid_mode,omitempty"`                                                         // PID mode
	UtsMode       string                 `protobuf:"bytes,27,opt,name=uts_mode,json=utsMode,proto3" json:"uts_mode,omitempty"`                                                         // UTS mode
	Sysctl        []string               `protobuf:"bytes,28,rep,name=sysctl,proto3" json:"sysctl,omitempty"`                                                                          // Sysctl settings
	Tmpfs         []string               `protobuf:"bytes,29,rep,name=tmpfs,proto3" json:"tmpfs,omitempty"`                                                                            // Tmpfs mounts
	ShmSize       string                 `protobuf:"bytes,30,opt,name=shm_size,json=shmSize,proto3" json:"shm_size,omitempty"`                                                         // Shared memory size
	StopSignal    string                 `protobuf:"bytes,31,opt,name=stop_signal,json=stopSignal,proto3" json:"stop_signal,omitempty"`                                                // Stop signal
	StopTimeout   int32                  `protobuf:"varint,32,opt,name=stop_timeout,json=stopTimeout,proto3" json:"stop_timeout,omitempty"`                                            // Stop timeout in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateContainerRequest) Reset() {
	*x = CreateContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContainerRequest) ProtoMessage() {}

func (x *CreateContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContainerRequest.ProtoReflect.Descriptor instead.
func (*CreateContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateContainerRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateContainerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateContainerRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CreateContainerRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CreateContainerRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CreateContainerRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *CreateContainerRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateContainerRequest) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *CreateContainerRequest) GetMounts() []*VolumeMount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *CreateContainerRequest) GetResources() *ResourceLimits {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CreateContainerRequest) GetSecurity() *SecurityOptions {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *CreateContainerRequest) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *CreateContainerRequest) GetLogConfig() *LogConfig {
	if x != nil {
		return x.LogConfig
	}
	return nil
}

func (x *CreateContainerRequest) GetRestartPolicy() *RestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return nil
}

func (x *CreateContainerRequest) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *CreateContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateContainerRequest) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *CreateContainerRequest) GetStdin() bool {
	if x != nil {
		return x.Stdin
	}
	return false
}

func (x *CreateContainerRequest) GetInit() bool {
	if x != nil {
		return x.Init
	}
	return false
}

func (x *CreateContainerRequest) GetInitBinary() string {
	if x != nil {
		return x.InitBinary
	}
	return ""
}

func (x *CreateContainerRequest) GetCapAdd() []string {
	if x != nil {
		return x.CapAdd
	}
	return nil
}

func (x *CreateContainerRequest) GetCapDrop() []string {
	if x != nil {
		return x.CapDrop
	}
	return nil
}

func (x *CreateContainerRequest) GetDevice() []string {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CreateContainerRequest) GetCgroupParent() string {
	if x != nil {
		return x.CgroupParent
	}
	return ""
}

func (x *CreateContainerRequest) GetIpcMode() string {
	if x != nil {
		return x.IpcMode
	}
	return ""
}

func (x *CreateContainerRequest) GetPidMode() string {
	if x != nil {
		return x.PidMode
	}
	return ""
}

func (x *CreateContainerRequest) GetUtsMode() string {
	if x != nil {
		return x.UtsMode
	}
	return ""
}

func (x *CreateContainerRequest) GetSysctl() []string {
	if x != nil {
		return x.Sysctl
	}
	return nil
}

func (x *CreateContainerRequest) GetTmpfs() []string {
	if x != nil {
		return x.Tmpfs
	}
	return nil
}

func (x *CreateContainerRequest) GetShmSize() string {
	if x != nil {
		return x.ShmSize
	}
	return ""
}

func (x *CreateContainerRequest) GetStopSignal() string {
	if x != nil {
		return x.StopSignal
	}
	return ""
}

func (x *CreateContainerRequest) GetStopTimeout() int32 {
	if x != nil {
		return x.StopTimeout
	}
	return 0
}

type CreateContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Created container ID
	Warnings      []string               `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`                          // Warning messages
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateContainerResponse) Reset() {
	*x = CreateContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContainerResponse) ProtoMessage() {}

func (x *CreateContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContainerResponse.ProtoReflect.Descriptor instead.
func (*CreateContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateContainerResponse) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *CreateContainerResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type StartContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Attach        []string               `protobuf:"bytes,3,rep,name=attach,proto3" json:"attach,omitempty"`                              // Attach to STDIN/STDOUT/STDERR
	DetachKeys    string                 `protobuf:"bytes,4,opt,name=detach_keys,json=detachKeys,proto3" json:"detach_keys,omitempty"`    // Detach key sequence
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerRequest) Reset() {
	*x = StartContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest) ProtoMessage() {}

func (x *StartContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest.ProtoReflect.Descriptor instead.
func (*StartContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{2}
}

func (x *StartContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *StartContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StartContainerRequest) GetAttach() []string {
	if x != nil {
		return x.Attach
	}
	return nil
}

func (x *StartContainerRequest) GetDetachKeys() string {
	if x != nil {
		return x.DetachKeys
	}
	return ""
}

type StartContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Started       bool                   `protobuf:"varint,1,opt,name=started,proto3" json:"started,omitempty"`  // Whether container was started
	Warnings      []string               `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"` // Warning messages
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerResponse) Reset() {
	*x = StartContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerResponse) ProtoMessage() {}

func (x *StartContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerResponse.ProtoReflect.Descriptor instead.
func (*StartContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{3}
}

func (x *StartContainerResponse) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *StartContainerResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type StopContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Timeout       int32                  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                           // Timeout in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerRequest) Reset() {
	*x = StopContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerRequest) ProtoMessage() {}

func (x *StopContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerRequest.ProtoReflect.Descriptor instead.
func (*StopContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{4}
}

func (x *StopContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *StopContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StopContainerRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type StopContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stopped       bool                   `protobuf:"varint,1,opt,name=stopped,proto3" json:"stopped,omitempty"` // Whether container was stopped
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerResponse) Reset() {
	*x = StopContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerResponse) ProtoMessage() {}

func (x *StopContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerResponse.ProtoReflect.Descriptor instead.
func (*StopContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{5}
}

func (x *StopContainerResponse) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

type RestartContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Timeout       int32                  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                           // Timeout in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartContainerRequest) Reset() {
	*x = RestartContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartContainerRequest) ProtoMessage() {}

func (x *RestartContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartContainerRequest.ProtoReflect.Descriptor instead.
func (*RestartContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{6}
}

func (x *RestartContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RestartContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RestartContainerRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type RestartContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Restarted     bool                   `protobuf:"varint,1,opt,name=restarted,proto3" json:"restarted,omitempty"` // Whether container was restarted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartContainerResponse) Reset() {
	*x = RestartContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartContainerResponse) ProtoMessage() {}

func (x *RestartContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartContainerResponse.ProtoReflect.Descriptor instead.
func (*RestartContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{7}
}

func (x *RestartContainerResponse) GetRestarted() bool {
	if x != nil {
		return x.Restarted
	}
	return false
}

type RemoveContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`                               // Force removal
	Volumes       bool                   `protobuf:"varint,4,opt,name=volumes,proto3" json:"volumes,omitempty"`                           // Remove associated volumes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveContainerRequest) Reset() {
	*x = RemoveContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContainerRequest) ProtoMessage() {}

func (x *RemoveContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContainerRequest.ProtoReflect.Descriptor instead.
func (*RemoveContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RemoveContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RemoveContainerRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RemoveContainerRequest) GetVolumes() bool {
	if x != nil {
		return x.Volumes
	}
	return false
}

type RemoveContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Removed       bool                   `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"` // Whether container was removed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveContainerResponse) Reset() {
	*x = RemoveContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContainerResponse) ProtoMessage() {}

func (x *RemoveContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContainerResponse.ProtoReflect.Descriptor instead.
func (*RemoveContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveContainerResponse) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

type KillContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Signal        string                 `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`                              // Signal to send (default: SIGKILL)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KillContainerRequest) Reset() {
	*x = KillContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillContainerRequest) ProtoMessage() {}

func (x *KillContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillContainerRequest.ProtoReflect.Descriptor instead.
func (*KillContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{10}
}

func (x *KillContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *KillContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KillContainerRequest) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

type KillContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Killed        bool                   `protobuf:"varint,1,opt,name=killed,proto3" json:"killed,omitempty"` // Whether signal was sent
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KillContainerResponse) Reset() {
	*x = KillContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillContainerResponse) ProtoMessage() {}

func (x *KillContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillContainerResponse.ProtoReflect.Descriptor instead.
func (*KillContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{11}
}

func (x *KillContainerResponse) GetKilled() bool {
	if x != nil {
		return x.Killed
	}
	return false
}

type PauseContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseContainerRequest) Reset() {
	*x = PauseContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseContainerRequest) ProtoMessage() {}

func (x *PauseContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseContainerRequest.ProtoReflect.Descriptor instead.
func (*PauseContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{12}
}

func (x *PauseContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *PauseContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type PauseContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paused        bool                   `protobuf:"varint,1,opt,name=paused,proto3" json:"paused,omitempty"` // Whether container was paused
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseContainerResponse) Reset() {
	*x = PauseContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseContainerResponse) ProtoMessage() {}

func (x *PauseContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseContainerResponse.ProtoReflect.Descriptor instead.
func (*PauseContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{13}
}

func (x *PauseContainerResponse) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

type UnpauseContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpauseContainerRequest) Reset() {
	*x = UnpauseContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpauseContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpauseContainerRequest) ProtoMessage() {}

func (x *UnpauseContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpauseContainerRequest.ProtoReflect.Descriptor instead.
func (*UnpauseContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{14}
}

func (x *UnpauseContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *UnpauseContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type UnpauseContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unpaused      bool                   `protobuf:"varint,1,opt,name=unpaused,proto3" json:"unpaused,omitempty"` // Whether container was unpaused
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpauseContainerResponse) Reset() {
	*x = UnpauseContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpauseContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpauseContainerResponse) ProtoMessage() {}

func (x *UnpauseContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpauseContainerResponse.ProtoReflect.Descriptor instead.
func (*UnpauseContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{15}
}

func (x *UnpauseContainerResponse) GetUnpaused() bool {
	if x != nil {
		return x.Unpaused
	}
	return false
}

type RunContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`                                                                             // Image reference
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                               // Container name
	Command       []string               `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`                                                                         // Command to run
	Args          []string               `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`                                                                               // Command arguments
	Env           []string               `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`                                                                                 // Environment variables
	WorkingDir    string                 `protobuf:"bytes,6,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`                                                 // Working directory
	Labels        map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Container labels
	NetworkConfig *NetworkConfig         `protobuf:"bytes,8,opt,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty"`                                        // Network configuration
	Mounts        []*VolumeMount         `protobuf:"bytes,9,rep,name=mounts,proto3" json:"mounts,omitempty"`                                                                           // Volume mounts
	Resources     *ResourceLimits        `protobuf:"bytes,10,opt,name=resources,proto3" json:"resources,omitempty"`                                                                    // Resource limits
	Security      *SecurityOptions       `protobuf:"bytes,11,opt,name=security,proto3" json:"security,omitempty"`                                                                      // Security options
	Namespace     string                 `protobuf:"bytes,12,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                    // Containerd namespace
	Detached      bool                   `protobuf:"varint,13,opt,name=detached,proto3" json:"detached,omitempty"`                                                                     // Run in background
	Tty           bool                   `protobuf:"varint,14,opt,name=tty,proto3" json:"tty,omitempty"`                                                                               // Allocate pseudo-TTY
	Interactive   bool                   `protobuf:"varint,15,opt,name=interactive,proto3" json:"interactive,omitempty"`                                                               // Keep STDIN open
	Remove        bool                   `protobuf:"varint,16,opt,name=remove,proto3" json:"remove,omitempty"`                                                                         // Remove container after exit
	PullPolicy    string                 `protobuf:"bytes,17,opt,name=pull_policy,json=pullPolicy,proto3" json:"pull_policy,omitempty"`                                                // Image pull policy
	Platform      *Platform              `protobuf:"bytes,18,opt,name=platform,proto3" json:"platform,omitempty"`                                                                      // Platform specification
	RestartPolicy *RestartPolicy         `protobuf:"bytes,19,opt,name=restart_policy,json=restartPolicy,proto3" json:"restart_policy,omitempty"`                                       // Restart policy
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunContainerRequest) Reset() {
	*x = RunContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunContainerRequest) ProtoMessage() {}

func (x *RunContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunContainerRequest.ProtoReflect.Descriptor instead.
func (*RunContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{16}
}

func (x *RunContainerRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RunContainerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunContainerRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RunContainerRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RunContainerRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *RunContainerRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *RunContainerRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RunContainerRequest) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *RunContainerRequest) GetMounts() []*VolumeMount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *RunContainerRequest) GetResources() *ResourceLimits {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RunContainerRequest) GetSecurity() *SecurityOptions {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *RunContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RunContainerRequest) GetDetached() bool {
	if x != nil {
		return x.Detached
	}
	return false
}

func (x *RunContainerRequest) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *RunContainerRequest) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

func (x *RunContainerRequest) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

func (x *RunContainerRequest) GetPullPolicy() string {
	if x != nil {
		return x.PullPolicy
	}
	return ""
}

func (x *RunContainerRequest) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *RunContainerRequest) GetRestartPolicy() *RestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return nil
}

type RunContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`     // Container ID
	Status        ContainerStatus        `protobuf:"varint,2,opt,name=status,proto3,enum=nerdctl.v1.ContainerStatus" json:"status,omitempty"` // Container status
	ExitCode      int32                  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`             // Exit code (if exited)
	Warnings      []string               `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`                              // Warning messages
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunContainerResponse) Reset() {
	*x = RunContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunContainerResponse) ProtoMessage() {}

func (x *RunContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunContainerResponse.ProtoReflect.Descriptor instead.
func (*RunContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{17}
}

func (x *RunContainerResponse) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RunContainerResponse) GetStatus() ContainerStatus {
	if x != nil {
		return x.Status
	}
	return ContainerStatus_CONTAINER_STATUS_UNSPECIFIED
}

func (x *RunContainerResponse) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *RunContainerResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type RunContainerStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*RunContainerStreamResponse_Progress
	//	*RunContainerStreamResponse_Log
	//	*RunContainerStreamResponse_Result
	Response      isRunContainerStreamResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunContainerStreamResponse) Reset() {
	*x = RunContainerStreamResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunContainerStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunContainerStreamResponse) ProtoMessage() {}

func (x *RunContainerStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunContainerStreamResponse.ProtoReflect.Descriptor instead.
func (*RunContainerStreamResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{18}
}

func (x *RunContainerStreamResponse) GetResponse() isRunContainerStreamResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RunContainerStreamResponse) GetProgress() *OperationProgress {
	if x != nil {
		if x, ok := x.Response.(*RunContainerStreamResponse_Progress); ok {
			return x.Progress
		}
	}
	return nil
}

func (x *RunContainerStreamResponse) GetLog() *LogEntry {
	if x != nil {
		if x, ok := x.Response.(*RunContainerStreamResponse_Log); ok {
			return x.Log
		}
	}
	return nil
}

func (x *RunContainerStreamResponse) GetResult() *RunContainerResponse {
	if x != nil {
		if x, ok := x.Response.(*RunContainerStreamResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

type isRunContainerStreamResponse_Response interface {
	isRunContainerStreamResponse_Response()
}

type RunContainerStreamResponse_Progress struct {
	Progress *OperationProgress `protobuf:"bytes,1,opt,name=progress,proto3,oneof"` // Operation progress
}

type RunContainerStreamResponse_Log struct {
	Log *LogEntry `protobuf:"bytes,2,opt,name=log,proto3,oneof"` // Log output
}

type RunContainerStreamResponse_Result struct {
	Result *RunContainerResponse `protobuf:"bytes,3,opt,name=result,proto3,oneof"` // Final result
}

func (*RunContainerStreamResponse_Progress) isRunContainerStreamResponse_Response() {}

func (*RunContainerStreamResponse_Log) isRunContainerStreamResponse_Response() {}

func (*RunContainerStreamResponse_Result) isRunContainerStreamResponse_Response() {}

type ListContainersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                       // Containerd namespace
	All           bool                   `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`                                                                                  // Include stopped containers
	Filters       map[string]string      `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Filters (name, label, status, etc.)
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`                                                                              // Limit number of results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContainersRequest) Reset() {
	*x = ListContainersRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContainersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainersRequest) ProtoMessage() {}

func (x *ListContainersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainersRequest.ProtoReflect.Descriptor instead.
func (*ListContainersRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListContainersRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListContainersRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListContainersRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListContainersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListContainersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Containers    []*ContainerInfo       `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"` // Container list
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContainersResponse) Reset() {
	*x = ListContainersResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContainersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainersResponse) ProtoMessage() {}

func (x *ListContainersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainersResponse.ProtoReflect.Descriptor instead.
func (*ListContainersResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListContainersResponse) GetContainers() []*ContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

type InspectContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InspectContainerRequest) Reset() {
	*x = InspectContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InspectContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectContainerRequest) ProtoMessage() {}

func (x *InspectContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectContainerRequest.ProtoReflect.Descriptor instead.
func (*InspectContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{21}
}

func (x *InspectContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *InspectContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type InspectContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Container     *ContainerInfo         `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"` // Container information
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InspectContainerResponse) Reset() {
	*x = InspectContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InspectContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectContainerResponse) ProtoMessage() {}

func (x *InspectContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectContainerResponse.ProtoReflect.Descriptor instead.
func (*InspectContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{22}
}

func (x *InspectContainerResponse) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

type GetContainerLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Follow        bool                   `protobuf:"varint,3,opt,name=follow,proto3" json:"follow,omitempty"`                             // Follow log output
	Timestamps    bool                   `protobuf:"varint,4,opt,name=timestamps,proto3" json:"timestamps,omitempty"`                     // Include timestamps
	Since         string                 `protobuf:"bytes,5,opt,name=since,proto3" json:"since,omitempty"`                                // Show logs since timestamp
	Until         string                 `protobuf:"bytes,6,opt,name=until,proto3" json:"until,omitempty"`                                // Show logs until timestamp
	Tail          int32                  `protobuf:"varint,7,opt,name=tail,proto3" json:"tail,omitempty"`                                 // Number of lines from end
	Stdout        bool                   `protobuf:"varint,8,opt,name=stdout,proto3" json:"stdout,omitempty"`                             // Include stdout (default: true)
	Stderr        bool                   `protobuf:"varint,9,opt,name=stderr,proto3" json:"stderr,omitempty"`                             // Include stderr (default: true)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContainerLogsRequest) Reset() {
	*x = GetContainerLogsRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContainerLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerLogsRequest) ProtoMessage() {}

func (x *GetContainerLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerLogsRequest.ProtoReflect.Descriptor instead.
func (*GetContainerLogsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetContainerLogsRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *GetContainerLogsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetContainerLogsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

func (x *GetContainerLogsRequest) GetTimestamps() bool {
	if x != nil {
		return x.Timestamps
	}
	return false
}

func (x *GetContainerLogsRequest) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *GetContainerLogsRequest) GetUntil() string {
	if x != nil {
		return x.Until
	}
	return ""
}

func (x *GetContainerLogsRequest) GetTail() int32 {
	if x != nil {
		return x.Tail
	}
	return 0
}

func (x *GetContainerLogsRequest) GetStdout() bool {
	if x != nil {
		return x.Stdout
	}
	return false
}

func (x *GetContainerLogsRequest) GetStderr() bool {
	if x != nil {
		return x.Stderr
	}
	return false
}

type LogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Log timestamp
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`       // Stream type: "stdout", "stderr"
	Content       []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`     // Log content
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_api_proto_container_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{24}
}

func (x *LogEntry) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogEntry) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *LogEntry) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type AttachContainerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*AttachContainerRequest_Options
	//	*AttachContainerRequest_Stdin
	Request       isAttachContainerRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachContainerRequest) Reset() {
	*x = AttachContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachContainerRequest) ProtoMessage() {}

func (x *AttachContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachContainerRequest.ProtoReflect.Descriptor instead.
func (*AttachContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{25}
}

func (x *AttachContainerRequest) GetRequest() isAttachContainerRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AttachContainerRequest) GetOptions() *AttachContainerOptions {
	if x != nil {
		if x, ok := x.Request.(*AttachContainerRequest_Options); ok {
			return x.Options
		}
	}
	return nil
}

func (x *AttachContainerRequest) GetStdin() []byte {
	if x != nil {
		if x, ok := x.Request.(*AttachContainerRequest_Stdin); ok {
			return x.Stdin
		}
	}
	return nil
}

type isAttachContainerRequest_Request interface {
	isAttachContainerRequest_Request()
}

type AttachContainerRequest_Options struct {
	Options *AttachContainerOptions `protobuf:"bytes,1,opt,name=options,proto3,oneof"` // Attach options
}

type AttachContainerRequest_Stdin struct {
	Stdin []byte `protobuf:"bytes,2,opt,name=stdin,proto3,oneof"` // STDIN data
}

func (*AttachContainerRequest_Options) isAttachContainerRequest_Request() {}

func (*AttachContainerRequest_Stdin) isAttachContainerRequest_Request() {}

type AttachContainerOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Stdin         bool                   `protobuf:"varint,3,opt,name=stdin,proto3" json:"stdin,omitempty"`                               // Attach STDIN
	Stdout        bool                   `protobuf:"varint,4,opt,name=stdout,proto3" json:"stdout,omitempty"`                             // Attach STDOUT
	Stderr        bool                   `protobuf:"varint,5,opt,name=stderr,proto3" json:"stderr,omitempty"`                             // Attach STDERR
	DetachKeys    string                 `protobuf:"bytes,6,opt,name=detach_keys,json=detachKeys,proto3" json:"detach_keys,omitempty"`    // Detach key sequence
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachContainerOptions) Reset() {
	*x = AttachContainerOptions{}
	mi := &file_api_proto_container_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachContainerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachContainerOptions) ProtoMessage() {}

func (x *AttachContainerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachContainerOptions.ProtoReflect.Descriptor instead.
func (*AttachContainerOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{26}
}

func (x *AttachContainerOptions) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *AttachContainerOptions) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AttachContainerOptions) GetStdin() bool {
	if x != nil {
		return x.Stdin
	}
	return false
}

func (x *AttachContainerOptions) GetStdout() bool {
	if x != nil {
		return x.Stdout
	}
	return false
}

func (x *AttachContainerOptions) GetStderr() bool {
	if x != nil {
		return x.Stderr
	}
	return false
}

func (x *AttachContainerOptions) GetDetachKeys() string {
	if x != nil {
		return x.DetachKeys
	}
	return ""
}

type AttachContainerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*AttachContainerResponse_Stdout
	//	*AttachContainerResponse_Stderr
	//	*AttachContainerResponse_Detached
	Response      isAttachContainerResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachContainerResponse) Reset() {
	*x = AttachContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachContainerResponse) ProtoMessage() {}

func (x *AttachContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachContainerResponse.ProtoReflect.Descriptor instead.
func (*AttachContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{27}
}

func (x *AttachContainerResponse) GetResponse() isAttachContainerResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AttachContainerResponse) GetStdout() []byte {
	if x != nil {
		if x, ok := x.Response.(*AttachContainerResponse_Stdout); ok {
			return x.Stdout
		}
	}
	return nil
}

func (x *AttachContainerResponse) GetStderr() []byte {
	if x != nil {
		if x, ok := x.Response.(*AttachContainerResponse_Stderr); ok {
			return x.Stderr
		}
	}
	return nil
}

func (x *AttachContainerResponse) GetDetached() bool {
	if x != nil {
		if x, ok := x.Response.(*AttachContainerResponse_Detached); ok {
			return x.Detached
		}
	}
	return false
}

type isAttachContainerResponse_Response interface {
	isAttachContainerResponse_Response()
}

type AttachContainerResponse_Stdout struct {
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3,oneof"` // STDOUT data
}

type AttachContainerResponse_Stderr struct {
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3,oneof"` // STDERR data
}

type AttachContainerResponse_Detached struct {
	Detached bool `protobuf:"varint,3,opt,name=detached,proto3,oneof"` // Detached from container
}

func (*AttachContainerResponse_Stdout) isAttachContainerResponse_Response() {}

func (*AttachContainerResponse_Stderr) isAttachContainerResponse_Response() {}

func (*AttachContainerResponse_Detached) isAttachContainerResponse_Response() {}

type ExecContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Command       []string               `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`                            // Command to execute
	Env           []string               `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`                                    // Environment variables
	WorkingDir    string                 `protobuf:"bytes,5,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`    // Working directory
	User          string                 `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`                                  // User specification
	Privileged    bool                   `protobuf:"varint,7,opt,name=privileged,proto3" json:"privileged,omitempty"`                     // Run as privileged
	Tty           bool                   `protobuf:"varint,8,opt,name=tty,proto3" json:"tty,omitempty"`                                   // Allocate pseudo-TTY
	Detach        bool                   `protobuf:"varint,9,opt,name=detach,proto3" json:"detach,omitempty"`                             // Run in background
	DetachKeys    string                 `protobuf:"bytes,10,opt,name=detach_keys,json=detachKeys,proto3" json:"detach_keys,omitempty"`   // Detach key sequence
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecContainerRequest) Reset() {
	*x = ExecContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecContainerRequest) ProtoMessage() {}

func (x *ExecContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecContainerRequest.ProtoReflect.Descriptor instead.
func (*ExecContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{28}
}

func (x *ExecContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ExecContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ExecContainerRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ExecContainerRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ExecContainerRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *ExecContainerRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ExecContainerRequest) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *ExecContainerRequest) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *ExecContainerRequest) GetDetach() bool {
	if x != nil {
		return x.Detach
	}
	return false
}

func (x *ExecContainerRequest) GetDetachKeys() string {
	if x != nil {
		return x.DetachKeys
	}
	return ""
}

type ExecContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExitCode      int32                  `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"` // Exit code
	Stdout        []byte                 `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`                      // STDOUT output
	Stderr        []byte                 `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`                      // STDERR output
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecContainerResponse) Reset() {
	*x = ExecContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecContainerResponse) ProtoMessage() {}

func (x *ExecContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecContainerResponse.ProtoReflect.Descriptor instead.
func (*ExecContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{29}
}

func (x *ExecContainerResponse) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ExecContainerResponse) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ExecContainerResponse) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

type ExecContainerStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*ExecContainerStreamRequest_Exec
	//	*ExecContainerStreamRequest_Stdin
	Request       isExecContainerStreamRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecContainerStreamRequest) Reset() {
	*x = ExecContainerStreamRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecContainerStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecContainerStreamRequest) ProtoMessage() {}

func (x *ExecContainerStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecContainerStreamRequest.ProtoReflect.Descriptor instead.
func (*ExecContainerStreamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{30}
}

func (x *ExecContainerStreamRequest) GetRequest() isExecContainerStreamRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExecContainerStreamRequest) GetExec() *ExecContainerRequest {
	if x != nil {
		if x, ok := x.Request.(*ExecContainerStreamRequest_Exec); ok {
			return x.Exec
		}
	}
	return nil
}

func (x *ExecContainerStreamRequest) GetStdin() []byte {
	if x != nil {
		if x, ok := x.Request.(*ExecContainerStreamRequest_Stdin); ok {
			return x.Stdin
		}
	}
	return nil
}

type isExecContainerStreamRequest_Request interface {
	isExecContainerStreamRequest_Request()
}

type ExecContainerStreamRequest_Exec struct {
	Exec *ExecContainerRequest `protobuf:"bytes,1,opt,name=exec,proto3,oneof"` // Execute request
}

type ExecContainerStreamRequest_Stdin struct {
	Stdin []byte `protobuf:"bytes,2,opt,name=stdin,proto3,oneof"` // STDIN data
}

func (*ExecContainerStreamRequest_Exec) isExecContainerStreamRequest_Request() {}

func (*ExecContainerStreamRequest_Stdin) isExecContainerStreamRequest_Request() {}

type ExecContainerStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ExecContainerStreamResponse_Stdout
	//	*ExecContainerStreamResponse_Stderr
	//	*ExecContainerStreamResponse_ExitCode
	Response      isExecContainerStreamResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecContainerStreamResponse) Reset() {
	*x = ExecContainerStreamResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecContainerStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecContainerStreamResponse) ProtoMessage() {}

func (x *ExecContainerStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecContainerStreamResponse.ProtoReflect.Descriptor instead.
func (*ExecContainerStreamResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{31}
}

func (x *ExecContainerStreamResponse) GetResponse() isExecContainerStreamResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExecContainerStreamResponse) GetStdout() []byte {
	if x != nil {
		if x, ok := x.Response.(*ExecContainerStreamResponse_Stdout); ok {
			return x.Stdout
		}
	}
	return nil
}

func (x *ExecContainerStreamResponse) GetStderr() []byte {
	if x != nil {
		if x, ok := x.Response.(*ExecContainerStreamResponse_Stderr); ok {
			return x.Stderr
		}
	}
	return nil
}

func (x *ExecContainerStreamResponse) GetExitCode() int32 {
	if x != nil {
		if x, ok := x.Response.(*ExecContainerStreamResponse_ExitCode); ok {
			return x.ExitCode
		}
	}
	return 0
}

type isExecContainerStreamResponse_Response interface {
	isExecContainerStreamResponse_Response()
}

type ExecContainerStreamResponse_Stdout struct {
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3,oneof"` // STDOUT data
}

type ExecContainerStreamResponse_Stderr struct {
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3,oneof"` // STDERR data
}

type ExecContainerStreamResponse_ExitCode struct {
	ExitCode int32 `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3,oneof"` // Exit code
}

func (*ExecContainerStreamResponse_Stdout) isExecContainerStreamResponse_Response() {}

func (*ExecContainerStreamResponse_Stderr) isExecContainerStreamResponse_Response() {}

func (*ExecContainerStreamResponse_ExitCode) isExecContainerStreamResponse_Response() {}

type GetContainerStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Stream        bool                   `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`                             // Stream statistics
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContainerStatsRequest) Reset() {
	*x = GetContainerStatsRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContainerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerStatsRequest) ProtoMessage() {}

func (x *GetContainerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerStatsRequest.ProtoReflect.Descriptor instead.
func (*GetContainerStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetContainerStatsRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *GetContainerStatsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetContainerStatsRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type ContainerStats struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	ContainerId   string                                  `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID
	Name          string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // Container name
	Timestamp     *timestamp.Timestamp                    `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                        // Stats timestamp
	Cpu           *ContainerStats_CPUStats                `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        *ContainerStats_MemoryStats             `protobuf:"bytes,5,opt,name=memory,proto3" json:"memory,omitempty"`
	Blkio         *ContainerStats_BlkioStats              `protobuf:"bytes,6,opt,name=blkio,proto3" json:"blkio,omitempty"`
	Networks      map[string]*ContainerStats_NetworkStats `protobuf:"bytes,7,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Per-network stats
	Pids          *ContainerStats_PidsStats               `protobuf:"bytes,8,opt,name=pids,proto3" json:"pids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerStats) Reset() {
	*x = ContainerStats{}
	mi := &file_api_proto_container_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats) ProtoMessage() {}

func (x *ContainerStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats.ProtoReflect.Descriptor instead.
func (*ContainerStats) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{33}
}

func (x *ContainerStats) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerStats) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ContainerStats) GetCpu() *ContainerStats_CPUStats {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *ContainerStats) GetMemory() *ContainerStats_MemoryStats {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *ContainerStats) GetBlkio() *ContainerStats_BlkioStats {
	if x != nil {
		return x.Blkio
	}
	return nil
}

func (x *ContainerStats) GetNetworks() map[string]*ContainerStats_NetworkStats {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ContainerStats) GetPids() *ContainerStats_PidsStats {
	if x != nil {
		return x.Pids
	}
	return nil
}

type WaitContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitContainerRequest) Reset() {
	*x = WaitContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitContainerRequest) ProtoMessage() {}

func (x *WaitContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitContainerRequest.ProtoReflect.Descriptor instead.
func (*WaitContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{34}
}

func (x *WaitContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *WaitContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type WaitContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExitCode      int32                  `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"` // Exit code
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                        // Error message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitContainerResponse) Reset() {
	*x = WaitContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitContainerResponse) ProtoMessage() {}

func (x *WaitContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitContainerResponse.ProtoReflect.Descriptor instead.
func (*WaitContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{35}
}

func (x *WaitContainerResponse) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *WaitContainerResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RenameContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Current container ID or name
	NewName       string                 `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`             // New container name
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameContainerRequest) Reset() {
	*x = RenameContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameContainerRequest) ProtoMessage() {}

func (x *RenameContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameContainerRequest.ProtoReflect.Descriptor instead.
func (*RenameContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{36}
}

func (x *RenameContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RenameContainerRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *RenameContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RenameContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Renamed       bool                   `protobuf:"varint,1,opt,name=renamed,proto3" json:"renamed,omitempty"` // Whether container was renamed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameContainerResponse) Reset() {
	*x = RenameContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameContainerResponse) ProtoMessage() {}

func (x *RenameContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameContainerResponse.ProtoReflect.Descriptor instead.
func (*RenameContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{37}
}

func (x *RenameContainerResponse) GetRenamed() bool {
	if x != nil {
		return x.Renamed
	}
	return false
}

type UpdateContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`       // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                              // Containerd namespace
	Resources     *ResourceLimits        `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`                              // Updated resource limits
	RestartPolicy *RestartPolicy         `protobuf:"bytes,4,opt,name=restart_policy,json=restartPolicy,proto3" json:"restart_policy,omitempty"` // Updated restart policy
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContainerRequest) Reset() {
	*x = UpdateContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContainerRequest) ProtoMessage() {}

func (x *UpdateContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContainerRequest.ProtoReflect.Descriptor instead.
func (*UpdateContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *UpdateContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateContainerRequest) GetResources() *ResourceLimits {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *UpdateContainerRequest) GetRestartPolicy() *RestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return nil
}

type UpdateContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updated       bool                   `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`  // Whether container was updated
	Warnings      []string               `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"` // Warning messages
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContainerResponse) Reset() {
	*x = UpdateContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContainerResponse) ProtoMessage() {}

func (x *UpdateContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContainerResponse.ProtoReflect.Descriptor instead.
func (*UpdateContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateContainerResponse) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *UpdateContainerResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type CopyToContainerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*CopyToContainerRequest_Options
	//	*CopyToContainerRequest_Data
	Request       isCopyToContainerRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyToContainerRequest) Reset() {
	*x = CopyToContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyToContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyToContainerRequest) ProtoMessage() {}

func (x *CopyToContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyToContainerRequest.ProtoReflect.Descriptor instead.
func (*CopyToContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{40}
}

func (x *CopyToContainerRequest) GetRequest() isCopyToContainerRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CopyToContainerRequest) GetOptions() *CopyToContainerOptions {
	if x != nil {
		if x, ok := x.Request.(*CopyToContainerRequest_Options); ok {
			return x.Options
		}
	}
	return nil
}

func (x *CopyToContainerRequest) GetData() []byte {
	if x != nil {
		if x, ok := x.Request.(*CopyToContainerRequest_Data); ok {
			return x.Data
		}
	}
	return nil
}

type isCopyToContainerRequest_Request interface {
	isCopyToContainerRequest_Request()
}

type CopyToContainerRequest_Options struct {
	Options *CopyToContainerOptions `protobuf:"bytes,1,opt,name=options,proto3,oneof"` // Copy options
}

type CopyToContainerRequest_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"` // File data chunk
}

func (*CopyToContainerRequest_Options) isCopyToContainerRequest_Request() {}

func (*CopyToContainerRequest_Data) isCopyToContainerRequest_Request() {}

type CopyToContainerOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`  // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                         // Containerd namespace
	DestPath      string                 `protobuf:"bytes,3,opt,name=dest_path,json=destPath,proto3" json:"dest_path,omitempty"`           // Destination path in container
	ExtractTar    bool                   `protobuf:"varint,4,opt,name=extract_tar,json=extractTar,proto3" json:"extract_tar,omitempty"`    // Extract tar archive
	NoOverwrite   bool                   `protobuf:"varint,5,opt,name=no_overwrite,json=noOverwrite,proto3" json:"no_overwrite,omitempty"` // Don't overwrite existing files
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyToContainerOptions) Reset() {
	*x = CopyToContainerOptions{}
	mi := &file_api_proto_container_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyToContainerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyToContainerOptions) ProtoMessage() {}

func (x *CopyToContainerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyToContainerOptions.ProtoReflect.Descriptor instead.
func (*CopyToContainerOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{41}
}

func (x *CopyToContainerOptions) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *CopyToContainerOptions) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CopyToContainerOptions) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

func (x *CopyToContainerOptions) GetExtractTar() bool {
	if x != nil {
		return x.ExtractTar
	}
	return false
}

func (x *CopyToContainerOptions) GetNoOverwrite() bool {
	if x != nil {
		return x.NoOverwrite
	}
	return false
}

type CopyToContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Copied        bool                   `protobuf:"varint,1,opt,name=copied,proto3" json:"copied,omitempty"` // Whether files were copied
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyToContainerResponse) Reset() {
	*x = CopyToContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyToContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyToContainerResponse) ProtoMessage() {}

func (x *CopyToContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyToContainerResponse.ProtoReflect.Descriptor instead.
func (*CopyToContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{42}
}

func (x *CopyToContainerResponse) GetCopied() bool {
	if x != nil {
		return x.Copied
	}
	return false
}

type CopyFromContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	SrcPath       string                 `protobuf:"bytes,3,opt,name=src_path,json=srcPath,proto3" json:"src_path,omitempty"`             // Source path in container
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyFromContainerRequest) Reset() {
	*x = CopyFromContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyFromContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFromContainerRequest) ProtoMessage() {}

func (x *CopyFromContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFromContainerRequest.ProtoReflect.Descriptor instead.
func (*CopyFromContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{43}
}

func (x *CopyFromContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *CopyFromContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CopyFromContainerRequest) GetSrcPath() string {
	if x != nil {
		return x.SrcPath
	}
	return ""
}

type CopyFromContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`          // File data chunk
	Finished      bool                   `protobuf:"varint,2,opt,name=finished,proto3" json:"finished,omitempty"` // Whether copy is finished
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyFromContainerResponse) Reset() {
	*x = CopyFromContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyFromContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFromContainerResponse) ProtoMessage() {}

func (x *CopyFromContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFromContainerResponse.ProtoReflect.Descriptor instead.
func (*CopyFromContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{44}
}

func (x *CopyFromContainerResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CopyFromContainerResponse) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type ExportContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportContainerRequest) Reset() {
	*x = ExportContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportContainerRequest) ProtoMessage() {}

func (x *ExportContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportContainerRequest.ProtoReflect.Descriptor instead.
func (*ExportContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{45}
}

func (x *ExportContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ExportContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ExportContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`          // Tar archive data chunk
	Finished      bool                   `protobuf:"varint,2,opt,name=finished,proto3" json:"finished,omitempty"` // Whether export is finished
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportContainerResponse) Reset() {
	*x = ExportContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportContainerResponse) ProtoMessage() {}

func (x *ExportContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportContainerResponse.ProtoReflect.Descriptor instead.
func (*ExportContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{46}
}

func (x *ExportContainerResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExportContainerResponse) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type DiffContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiffContainerRequest) Reset() {
	*x = DiffContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffContainerRequest) ProtoMessage() {}

func (x *DiffContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffContainerRequest.ProtoReflect.Descriptor instead.
func (*DiffContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{47}
}

func (x *DiffContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *DiffContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ContainerChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          ContainerChange_Kind   `protobuf:"varint,1,opt,name=kind,proto3,enum=nerdctl.v1.ContainerChange_Kind" json:"kind,omitempty"` // Change kind
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                       // File path
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerChange) Reset() {
	*x = ContainerChange{}
	mi := &file_api_proto_container_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerChange) ProtoMessage() {}

func (x *ContainerChange) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerChange.ProtoReflect.Descriptor instead.
func (*ContainerChange) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{48}
}

func (x *ContainerChange) GetKind() ContainerChange_Kind {
	if x != nil {
		return x.Kind
	}
	return ContainerChange_UNKNOWN
}

func (x *ContainerChange) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DiffContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Changes       []*ContainerChange     `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"` // File changes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiffContainerResponse) Reset() {
	*x = DiffContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffContainerResponse) ProtoMessage() {}

func (x *DiffContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffContainerResponse.ProtoReflect.Descriptor instead.
func (*DiffContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{49}
}

func (x *DiffContainerResponse) GetChanges() []*ContainerChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type CommitContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Container ID or name
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                        // Containerd namespace
	Repository    string                 `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`                      // Repository name
	Tag           string                 `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`                                    // Tag name
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                            // Commit message
	Author        string                 `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`                              // Author information
	Changes       []string               `protobuf:"bytes,7,rep,name=changes,proto3" json:"changes,omitempty"`                            // Dockerfile changes
	Pause         bool                   `protobuf:"varint,8,opt,name=pause,proto3" json:"pause,omitempty"`                               // Pause container during commit
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitContainerRequest) Reset() {
	*x = CommitContainerRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitContainerRequest) ProtoMessage() {}

func (x *CommitContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitContainerRequest.ProtoReflect.Descriptor instead.
func (*CommitContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{50}
}

func (x *CommitContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *CommitContainerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CommitContainerRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *CommitContainerRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CommitContainerRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommitContainerRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *CommitContainerRequest) GetChanges() []string {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CommitContainerRequest) GetPause() bool {
	if x != nil {
		return x.Pause
	}
	return false
}

type CommitContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageId       string                 `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"` // Created image ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitContainerResponse) Reset() {
	*x = CommitContainerResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitContainerResponse) ProtoMessage() {}

func (x *CommitContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitContainerResponse.ProtoReflect.Descriptor instead.
func (*CommitContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{51}
}

func (x *CommitContainerResponse) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type PruneContainersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                       // Containerd namespace
	Filters       map[string]string      `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Filters for pruning
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PruneContainersRequest) Reset() {
	*x = PruneContainersRequest{}
	mi := &file_api_proto_container_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PruneContainersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneContainersRequest) ProtoMessage() {}

func (x *PruneContainersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneContainersRequest.ProtoReflect.Descriptor instead.
func (*PruneContainersRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{52}
}

func (x *PruneContainersRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PruneContainersRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type PruneContainerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"` // Pruned container ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // Container name
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                                 // Reclaimed size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PruneContainerInfo) Reset() {
	*x = PruneContainerInfo{}
	mi := &file_api_proto_container_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PruneContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneContainerInfo) ProtoMessage() {}

func (x *PruneContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneContainerInfo.ProtoReflect.Descriptor instead.
func (*PruneContainerInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{53}
}

func (x *PruneContainerInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *PruneContainerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PruneContainerInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PruneContainersResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Pruned         []*PruneContainerInfo  `protobuf:"bytes,1,rep,name=pruned,proto3" json:"pruned,omitempty"`                                        // Pruned containers
	SpaceReclaimed int64                  `protobuf:"varint,2,opt,name=space_reclaimed,json=spaceReclaimed,proto3" json:"space_reclaimed,omitempty"` // Total space reclaimed
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PruneContainersResponse) Reset() {
	*x = PruneContainersResponse{}
	mi := &file_api_proto_container_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PruneContainersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneContainersResponse) ProtoMessage() {}

func (x *PruneContainersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneContainersResponse.ProtoReflect.Descriptor instead.
func (*PruneContainersResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{54}
}

func (x *PruneContainersResponse) GetPruned() []*PruneContainerInfo {
	if x != nil {
		return x.Pruned
	}
	return nil
}

func (x *PruneContainersResponse) GetSpaceReclaimed() int64 {
	if x != nil {
		return x.SpaceReclaimed
	}
	return 0
}

// CPU stats
type ContainerStats_CPUStats struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CpuUsageTotal    uint64                 `protobuf:"varint,1,opt,name=cpu_usage_total,json=cpuUsageTotal,proto3" json:"cpu_usage_total,omitempty"`        // Total CPU usage
	CpuUsageSystem   uint64                 `protobuf:"varint,2,opt,name=cpu_usage_system,json=cpuUsageSystem,proto3" json:"cpu_usage_system,omitempty"`     // System CPU usage
	CpuUsageUser     uint64                 `protobuf:"varint,3,opt,name=cpu_usage_user,json=cpuUsageUser,proto3" json:"cpu_usage_user,omitempty"`           // User CPU usage
	CpuUsagePerCpu   uint64                 `protobuf:"varint,4,opt,name=cpu_usage_per_cpu,json=cpuUsagePerCpu,proto3" json:"cpu_usage_per_cpu,omitempty"`   // Per-CPU usage
	CpuPercent       float64                `protobuf:"fixed64,5,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`                  // CPU usage percentage
	ThrottledPeriods uint64                 `protobuf:"varint,6,opt,name=throttled_periods,json=throttledPeriods,proto3" json:"throttled_periods,omitempty"` // Throttled periods
	ThrottledTime    uint64                 `protobuf:"varint,7,opt,name=throttled_time,json=throttledTime,proto3" json:"throttled_time,omitempty"`          // Throttled time
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContainerStats_CPUStats) Reset() {
	*x = ContainerStats_CPUStats{}
	mi := &file_api_proto_container_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStats_CPUStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats_CPUStats) ProtoMessage() {}

func (x *ContainerStats_CPUStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats_CPUStats.ProtoReflect.Descriptor instead.
func (*ContainerStats_CPUStats) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{33, 0}
}

func (x *ContainerStats_CPUStats) GetCpuUsageTotal() uint64 {
	if x != nil {
		return x.CpuUsageTotal
	}
	return 0
}

func (x *ContainerStats_CPUStats) GetCpuUsageSystem() uint64 {
	if x != nil {
		return x.CpuUsageSystem
	}
	return 0
}

func (x *ContainerStats_CPUStats) GetCpuUsageUser() uint64 {
	if x != nil {
		return x.CpuUsageUser
	}
	return 0
}

func (x *ContainerStats_CPUStats) GetCpuUsagePerCpu() uint64 {
	if x != nil {
		return x.CpuUsagePerCpu
	}
	return 0
}

func (x *ContainerStats_CPUStats) GetCpuPercent() float64 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *ContainerStats_CPUStats) GetThrottledPeriods() uint64 {
	if x != nil {
		return x.ThrottledPeriods
	}
	return 0
}

func (x *ContainerStats_CPUStats) GetThrottledTime() uint64 {
	if x != nil {
		return x.ThrottledTime
	}
	return 0
}

// Memory stats
type ContainerStats_MemoryStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Usage         uint64                 `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`                       // Memory usage
	Limit         uint64                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                       // Memory limit
	MaxUsage      uint64                 `protobuf:"varint,3,opt,name=max_usage,json=maxUsage,proto3" json:"max_usage,omitempty"` // Maximum memory usage
	Cache         uint64                 `protobuf:"varint,4,opt,name=cache,proto3" json:"cache,omitempty"`                       // Cache usage
	Rss           uint64                 `protobuf:"varint,5,opt,name=rss,proto3" json:"rss,omitempty"`                           // RSS usage
	Swap          uint64                 `protobuf:"varint,6,opt,name=swap,proto3" json:"swap,omitempty"`                         // Swap usage
	Percent       float64                `protobuf:"fixed64,7,opt,name=percent,proto3" json:"percent,omitempty"`                  // Memory usage percentage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerStats_MemoryStats) Reset() {
	*x = ContainerStats_MemoryStats{}
	mi := &file_api_proto_container_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStats_MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats_MemoryStats) ProtoMessage() {}

func (x *ContainerStats_MemoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats_MemoryStats.ProtoReflect.Descriptor instead.
func (*ContainerStats_MemoryStats) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{33, 1}
}

func (x *ContainerStats_MemoryStats) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *ContainerStats_MemoryStats) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ContainerStats_MemoryStats) GetMaxUsage() uint64 {
	if x != nil {
		return x.MaxUsage
	}
	return 0
}

func (x *ContainerStats_MemoryStats) GetCache() uint64 {
	if x != nil {
		return x.Cache
	}
	return 0
}

func (x *ContainerStats_MemoryStats) GetRss() uint64 {
	if x != nil {
		return x.Rss
	}
	return 0
}

func (x *ContainerStats_MemoryStats) GetSwap() uint64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *ContainerStats_MemoryStats) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

// Block I/O stats
type ContainerStats_BlkioStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReadBytes     uint64                 `protobuf:"varint,1,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`    // Bytes read
	WriteBytes    uint64                 `protobuf:"varint,2,opt,name=write_bytes,json=writeBytes,proto3" json:"write_bytes,omitempty"` // Bytes written
	ReadIops      uint64                 `protobuf:"varint,3,opt,name=read_iops,json=readIops,proto3" json:"read_iops,omitempty"`       // Read IOPS
	WriteIops     uint64                 `protobuf:"varint,4,opt,name=write_iops,json=writeIops,proto3" json:"write_iops,omitempty"`    // Write IOPS
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerStats_BlkioStats) Reset() {
	*x = ContainerStats_BlkioStats{}
	mi := &file_api_proto_container_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStats_BlkioStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats_BlkioStats) ProtoMessage() {}

func (x *ContainerStats_BlkioStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats_BlkioStats.ProtoReflect.Descriptor instead.
func (*ContainerStats_BlkioStats) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{33, 2}
}

func (x *ContainerStats_BlkioStats) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *ContainerStats_BlkioStats) GetWriteBytes() uint64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *ContainerStats_BlkioStats) GetReadIops() uint64 {
	if x != nil {
		return x.ReadIops
	}
	return 0
}

func (x *ContainerStats_BlkioStats) GetWriteIops() uint64 {
	if x != nil {
		return x.WriteIops
	}
	return 0
}

// Network stats
type ContainerStats_NetworkStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RxBytes       uint64                 `protobuf:"varint,1,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`       // Received bytes
	TxBytes       uint64                 `protobuf:"varint,2,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`       // Transmitted bytes
	RxPackets     uint64                 `protobuf:"varint,3,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"` // Received packets
	TxPackets     uint64                 `protobuf:"varint,4,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"` // Transmitted packets
	RxErrors      uint64                 `protobuf:"varint,5,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`    // Receive errors
	TxErrors      uint64                 `protobuf:"varint,6,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`    // Transmit errors
	RxDropped     uint64                 `protobuf:"varint,7,opt,name=rx_dropped,json=rxDropped,proto3" json:"rx_dropped,omitempty"` // Received dropped
	TxDropped     uint64                 `protobuf:"varint,8,opt,name=tx_dropped,json=txDropped,proto3" json:"tx_dropped,omitempty"` // Transmitted dropped
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerStats_NetworkStats) Reset() {
	*x = ContainerStats_NetworkStats{}
	mi := &file_api_proto_container_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStats_NetworkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats_NetworkStats) ProtoMessage() {}

func (x *ContainerStats_NetworkStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats_NetworkStats.ProtoReflect.Descriptor instead.
func (*ContainerStats_NetworkStats) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{33, 3}
}

func (x *ContainerStats_NetworkStats) GetRxBytes() uint64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *ContainerStats_NetworkStats) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *ContainerStats_NetworkStats) GetRxPackets() uint64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *ContainerStats_NetworkStats) GetTxPackets() uint64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *ContainerStats_NetworkStats) GetRxErrors() uint64 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *ContainerStats_NetworkStats) GetTxErrors() uint64 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *ContainerStats_NetworkStats) GetRxDropped() uint64 {
	if x != nil {
		return x.RxDropped
	}
	return 0
}

func (x *ContainerStats_NetworkStats) GetTxDropped() uint64 {
	if x != nil {
		return x.TxDropped
	}
	return 0
}

// PIDs stats
type ContainerStats_PidsStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       uint64                 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"` // Current PIDs
	Limit         uint64                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`     // PIDs limit
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerStats_PidsStats) Reset() {
	*x = ContainerStats_PidsStats{}
	mi := &file_api_proto_container_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStats_PidsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats_PidsStats) ProtoMessage() {}

func (x *ContainerStats_PidsStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_container_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats_PidsStats.ProtoReflect.Descriptor instead.
func (*ContainerStats_PidsStats) Descriptor() ([]byte, []int) {
	return file_api_proto_container_service_proto_rawDescGZIP(), []int{33, 5}
}

func (x *ContainerStats_PidsStats) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ContainerStats_PidsStats) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_api_proto_container_service_proto protoreflect.FileDescriptor

const file_api_proto_container_service_proto_rawDesc = "" +
	"\n" +
	"!api/proto/container_service.proto\x12\n" +
	"nerdctl.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16api/proto/common.proto\"\xbc\t\n" +
	"\x16CreateContainerRequest\x12\x14\n" +
	"\x05image\x18\x01 \x01(\tR\x05image\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acommand\x18\x03 \x03(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x04 \x03(\tR\x04args\x12\x10\n" +
	"\x03env\x18\x05 \x03(\tR\x03env\x12\x1f\n" +
	"\vworking_dir\x18\x06 \x01(\tR\n" +
	"workingDir\x12F\n" +
	"\x06labels\x18\a \x03(\v2..nerdctl.v1.CreateContainerRequest.LabelsEntryR\x06labels\x12@\n" +
	"\x0enetwork_config\x18\b \x01(\v2\x19.nerdctl.v1.NetworkConfigR\rnetworkConfig\x12/\n" +
	"\x06mounts\x18\t \x03(\v2\x17.nerdctl.v1.VolumeMountR\x06mounts\x128\n" +
	"\tresources\x18\n" +
	" \x01(\v2\x1a.nerdctl.v1.ResourceLimitsR\tresources\x127\n" +
	"\bsecurity\x18\v \x01(\v2\x1b.nerdctl.v1.SecurityOptionsR\bsecurity\x12:\n" +
	"\fhealth_check\x18\f \x01(\v2\x17.nerdctl.v1.HealthCheckR\vhealthCheck\x124\n" +
	"\n" +
	"log_config\x18\r \x01(\v2\x15.nerdctl.v1.LogConfigR\tlogConfig\x12@\n" +
	"\x0erestart_policy\x18\x0e \x01(\v2\x19.nerdctl.v1.RestartPolicyR\rrestartPolicy\x120\n" +
	"\bplatform\x18\x0f \x01(\v2\x14.nerdctl.v1.PlatformR\bplatform\x12\x1c\n" +
	"\tnamespace\x18\x10 \x01(\tR\tnamespace\x12\x10\n" +
	"\x03tty\x18\x11 \x01(\bR\x03tty\x12\x14\n" +
	"\x05stdin\x18\x12 \x01(\bR\x05stdin\x12\x12\n" +
	"\x04init\x18\x13 \x01(\bR\x04init\x12\x1f\n" +
	"\vinit_binary\x18\x14 \x01(\tR\n" +
	"initBinary\x12\x17\n" +
	"\acap_add\x18\x15 \x03(\tR\x06capAdd\x12\x19\n" +
	"\bcap_drop\x18\x16 \x03(\tR\acapDrop\x12\x16\n" +
	"\x06device\x18\x17 \x03(\tR\x06device\x12#\n" +
	"\rcgroup_parent\x18\x18 \x01(\tR\fcgroupParent\x12\x19\n" +
	"\bipc_mode\x18\x19 \x01(\tR\aipcMode\x12\x19\n" +
	"\bpid_mode\x18\x1a \x01(\tR\apidMode\x12\x19\n" +
	"\buts_mode\x18\x1b \x01(\tR\autsMode\x12\x16\n" +
	"\x06sysctl\x18\x1c \x03(\tR\x06sysctl\x12\x14\n" +
	"\x05tmpfs\x18\x1d \x03(\tR\x05tmpfs\x12\x19\n" +
	"\bshm_size\x18\x1e \x01(\tR\ashmSize\x12\x1f\n" +
	"\vstop_signal\x18\x1f \x01(\tR\n" +
	"stopSignal\x12!\n" +
	"\fstop_timeout\x18  \x01(\x05R\vstopTimeout\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"X\n" +
	"\x17CreateContainerResponse\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\"\x91\x01\n" +
	"\x15StartContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06attach\x18\x03 \x03(\tR\x06attach\x12\x1f\n" +
	"\vdetach_keys\x18\x04 \x01(\tR\n" +
	"detachKeys\"N\n" +
	"\x16StartContainerResponse\x12\x18\n" +
	"\astarted\x18\x01 \x01(\bR\astarted\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\"q\n" +
	"\x14StopContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x18\n" +
	"\atimeout\x18\x03 \x01(\x05R\atimeout\"1\n" +
	"\x15StopContainerResponse\x12\x18\n" +
	"\astopped\x18\x01 \x01(\bR\astopped\"t\n" +
	"\x17RestartContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x18\n" +
	"\atimeout\x18\x03 \x01(\x05R\atimeout\"8\n" +
	"\x18RestartContainerResponse\x12\x1c\n" +
	"\trestarted\x18\x01 \x01(\bR\trestarted\"\x89\x01\n" +
	"\x16RemoveContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\x12\x18\n" +
	"\avolumes\x18\x04 \x01(\bR\avolumes\"3\n" +
	"\x17RemoveContainerResponse\x12\x18\n" +
	"\aremoved\x18\x01 \x01(\bR\aremoved\"o\n" +
	"\x14KillContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06signal\x18\x03 \x01(\tR\x06signal\"/\n" +
	"\x15KillContainerResponse\x12\x16\n" +
	"\x06killed\x18\x01 \x01(\bR\x06killed\"X\n" +
	"\x15PauseContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"0\n" +
	"\x16PauseContainerResponse\x12\x16\n" +
	"\x06paused\x18\x01 \x01(\bR\x06paused\"Z\n" +
	"\x17UnpauseContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"6\n" +
	"\x18UnpauseContainerResponse\x12\x1a\n" +
	"\bunpaused\x18\x01 \x01(\bR\bunpaused\"\xa1\x06\n" +
	"\x13RunContainerRequest\x12\x14\n" +
	"\x05image\x18\x01 \x01(\tR\x05image\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acommand\x18\x03 \x03(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x04 \x03(\tR\x04args\x12\x10\n" +
	"\x03env\x18\x05 \x03(\tR\x03env\x12\x1f\n" +
	"\vworking_dir\x18\x06 \x01(\tR\n" +
	"workingDir\x12C\n" +
	"\x06labels\x18\a \x03(\v2+.nerdctl.v1.RunContainerRequest.LabelsEntryR\x06labels\x12@\n" +
	"\x0enetwork_config\x18\b \x01(\v2\x19.nerdctl.v1.NetworkConfigR\rnetworkConfig\x12/\n" +
	"\x06mounts\x18\t \x03(\v2\x17.nerdctl.v1.VolumeMountR\x06mounts\x128\n" +
	"\tresources\x18\n" +
	" \x01(\v2\x1a.nerdctl.v1.ResourceLimitsR\tresources\x127\n" +
	"\bsecurity\x18\v \x01(\v2\x1b.nerdctl.v1.SecurityOptionsR\bsecurity\x12\x1c\n" +
	"\tnamespace\x18\f \x01(\tR\tnamespace\x12\x1a\n" +
	"\bdetached\x18\r \x01(\bR\bdetached\x12\x10\n" +
	"\x03tty\x18\x0e \x01(\bR\x03tty\x12 \n" +
	"\vinteractive\x18\x0f \x01(\bR\vinteractive\x12\x16\n" +
	"\x06remove\x18\x10 \x01(\bR\x06remove\x12\x1f\n" +
	"\vpull_policy\x18\x11 \x01(\tR\n" +
	"pullPolicy\x120\n" +
	"\bplatform\x18\x12 \x01(\v2\x14.nerdctl.v1.PlatformR\bplatform\x12@\n" +
	"\x0erestart_policy\x18\x13 \x01(\v2\x19.nerdctl.v1.RestartPolicyR\rrestartPolicy\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa7\x01\n" +
	"\x14RunContainerResponse\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x123\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1b.nerdctl.v1.ContainerStatusR\x06status\x12\x1b\n" +
	"\texit_code\x18\x03 \x01(\x05R\bexitCode\x12\x1a\n" +
	"\bwarnings\x18\x04 \x03(\tR\bwarnings\"\xcb\x01\n" +
	"\x1aRunContainerStreamResponse\x12;\n" +
	"\bprogress\x18\x01 \x01(\v2\x1d.nerdctl.v1.OperationProgressH\x00R\bprogress\x12(\n" +
	"\x03log\x18\x02 \x01(\v2\x14.nerdctl.v1.LogEntryH\x00R\x03log\x12:\n" +
	"\x06result\x18\x03 \x01(\v2 .nerdctl.v1.RunContainerResponseH\x00R\x06resultB\n" +
	"\n" +
	"\bresponse\"\xe3\x01\n" +
	"\x15ListContainersRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x10\n" +
	"\x03all\x18\x02 \x01(\bR\x03all\x12H\n" +
	"\afilters\x18\x03 \x03(\v2..nerdctl.v1.ListContainersRequest.FiltersEntryR\afilters\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\x1a:\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"S\n" +
	"\x16ListContainersResponse\x129\n" +
	"\n" +
	"containers\x18\x01 \x03(\v2\x19.nerdctl.v1.ContainerInfoR\n" +
	"containers\"Z\n" +
	"\x17InspectContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"S\n" +
	"\x18InspectContainerResponse\x127\n" +
	"\tcontainer\x18\x01 \x01(\v2\x19.nerdctl.v1.ContainerInfoR\tcontainer\"\x82\x02\n" +
	"\x17GetContainerLogsRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06follow\x18\x03 \x01(\bR\x06follow\x12\x1e\n" +
	"\n" +
	"timestamps\x18\x04 \x01(\bR\n" +
	"timestamps\x12\x14\n" +
	"\x05since\x18\x05 \x01(\tR\x05since\x12\x14\n" +
	"\x05until\x18\x06 \x01(\tR\x05until\x12\x12\n" +
	"\x04tail\x18\a \x01(\x05R\x04tail\x12\x16\n" +
	"\x06stdout\x18\b \x01(\bR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\t \x01(\bR\x06stderr\"v\n" +
	"\bLogEntry\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x18\n" +
	"\acontent\x18\x03 \x01(\fR\acontent\"{\n" +
	"\x16AttachContainerRequest\x12>\n" +
	"\aoptions\x18\x01 \x01(\v2\".nerdctl.v1.AttachContainerOptionsH\x00R\aoptions\x12\x16\n" +
	"\x05stdin\x18\x02 \x01(\fH\x00R\x05stdinB\t\n" +
	"\arequest\"\xc0\x01\n" +
	"\x16AttachContainerOptions\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05stdin\x18\x03 \x01(\bR\x05stdin\x12\x16\n" +
	"\x06stdout\x18\x04 \x01(\bR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\x05 \x01(\bR\x06stderr\x12\x1f\n" +
	"\vdetach_keys\x18\x06 \x01(\tR\n" +
	"detachKeys\"w\n" +
	"\x17AttachContainerResponse\x12\x18\n" +
	"\x06stdout\x18\x01 \x01(\fH\x00R\x06stdout\x12\x18\n" +
	"\x06stderr\x18\x02 \x01(\fH\x00R\x06stderr\x12\x1c\n" +
	"\bdetached\x18\x03 \x01(\bH\x00R\bdetachedB\n" +
	"\n" +
	"\bresponse\"\xa3\x02\n" +
	"\x14ExecContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x18\n" +
	"\acommand\x18\x03 \x03(\tR\acommand\x12\x10\n" +
	"\x03env\x18\x04 \x03(\tR\x03env\x12\x1f\n" +
	"\vworking_dir\x18\x05 \x01(\tR\n" +
	"workingDir\x12\x12\n" +
	"\x04user\x18\x06 \x01(\tR\x04user\x12\x1e\n" +
	"\n" +
	"privileged\x18\a \x01(\bR\n" +
	"privileged\x12\x10\n" +
	"\x03tty\x18\b \x01(\bR\x03tty\x12\x16\n" +
	"\x06detach\x18\t \x01(\bR\x06detach\x12\x1f\n" +
	"\vdetach_keys\x18\n" +
	" \x01(\tR\n" +
	"detachKeys\"d\n" +
	"\x15ExecContainerResponse\x12\x1b\n" +
	"\texit_code\x18\x01 \x01(\x05R\bexitCode\x12\x16\n" +
	"\x06stdout\x18\x02 \x01(\fR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\x03 \x01(\fR\x06stderr\"w\n" +
	"\x1aExecContainerStreamRequest\x126\n" +
	"\x04exec\x18\x01 \x01(\v2 .nerdctl.v1.ExecContainerRequestH\x00R\x04exec\x12\x16\n" +
	"\x05stdin\x18\x02 \x01(\fH\x00R\x05stdinB\t\n" +
	"\arequest\"|\n" +
	"\x1bExecContainerStreamResponse\x12\x18\n" +
	"\x06stdout\x18\x01 \x01(\fH\x00R\x06stdout\x12\x18\n" +
	"\x06stderr\x18\x02 \x01(\fH\x00R\x06stderr\x12\x1d\n" +
	"\texit_code\x18\x03 \x01(\x05H\x00R\bexitCodeB\n" +
	"\n" +
	"\bresponse\"s\n" +
	"\x18GetContainerStatsRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x03 \x01(\bR\x06stream\"\xb4\v\n" +
	"\x0eContainerStats\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x125\n" +
	"\x03cpu\x18\x04 \x01(\v2#.nerdctl.v1.ContainerStats.CPUStatsR\x03cpu\x12>\n" +
	"\x06memory\x18\x05 \x01(\v2&.nerdctl.v1.ContainerStats.MemoryStatsR\x06memory\x12;\n" +
	"\x05blkio\x18\x06 \x01(\v2%.nerdctl.v1.ContainerStats.BlkioStatsR\x05blkio\x12D\n" +
	"\bnetworks\x18\a \x03(\v2(.nerdctl.v1.ContainerStats.NetworksEntryR\bnetworks\x128\n" +
	"\x04pids\x18\b \x01(\v2$.nerdctl.v1.ContainerStats.PidsStatsR\x04pids\x1a\xa2\x02\n" +
	"\bCPUStats\x12&\n" +
	"\x0fcpu_usage_total\x18\x01 \x01(\x04R\rcpuUsageTotal\x12(\n" +
	"\x10cpu_usage_system\x18\x02 \x01(\x04R\x0ecpuUsageSystem\x12$\n" +
	"\x0ecpu_usage_user\x18\x03 \x01(\x04R\fcpuUsageUser\x12)\n" +
	"\x11cpu_usage_per_cpu\x18\x04 \x01(\x04R\x0ecpuUsagePerCpu\x12\x1f\n" +
	"\vcpu_percent\x18\x05 \x01(\x01R\n" +
	"cpuPercent\x12+\n" +
	"\x11throttled_periods\x18\x06 \x01(\x04R\x10throttledPeriods\x12%\n" +
	"\x0ethrottled_time\x18\a \x01(\x04R\rthrottledTime\x1a\xac\x01\n" +
	"\vMemoryStats\x12\x14\n" +
	"\x05usage\x18\x01 \x01(\x04R\x05usage\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x04R\x05limit\x12\x1b\n" +
	"\tmax_usage\x18\x03 \x01(\x04R\bmaxUsage\x12\x14\n" +
	"\x05cache\x18\x04 \x01(\x04R\x05cache\x12\x10\n" +
	"\x03rss\x18\x05 \x01(\x04R\x03rss\x12\x12\n" +
	"\x04swap\x18\x06 \x01(\x04R\x04swap\x12\x18\n" +
	"\apercent\x18\a \x01(\x01R\apercent\x1a\x88\x01\n" +
	"\n" +
	"BlkioStats\x12\x1d\n" +
	"\n" +
	"read_bytes\x18\x01 \x01(\x04R\treadBytes\x12\x1f\n" +
	"\vwrite_bytes\x18\x02 \x01(\x04R\n" +
	"writeBytes\x12\x1b\n" +
	"\tread_iops\x18\x03 \x01(\x04R\breadIops\x12\x1d\n" +
	"\n" +
	"write_iops\x18\x04 \x01(\x04R\twriteIops\x1a\xfa\x01\n" +
	"\fNetworkStats\x12\x19\n" +
	"\brx_bytes\x18\x01 \x01(\x04R\arxBytes\x12\x19\n" +
	"\btx_bytes\x18\x02 \x01(\x04R\atxBytes\x12\x1d\n" +
	"\n" +
	"rx_packets\x18\x03 \x01(\x04R\trxPackets\x12\x1d\n" +
	"\n" +
	"tx_packets\x18\x04 \x01(\x04R\ttxPackets\x12\x1b\n" +
	"\trx_errors\x18\x05 \x01(\x04R\brxErrors\x12\x1b\n" +
	"\ttx_errors\x18\x06 \x01(\x04R\btxErrors\x12\x1d\n" +
	"\n" +
	"rx_dropped\x18\a \x01(\x04R\trxDropped\x12\x1d\n" +
	"\n" +
	"tx_dropped\x18\b \x01(\x04R\ttxDropped\x1ad\n" +
	"\rNetworksEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12=\n" +
	"\x05value\x18\x02 \x01(\v2'.nerdctl.v1.ContainerStats.NetworkStatsR\x05value:\x028\x01\x1a;\n" +
	"\tPidsStats\x12\x18\n" +
	"\acurrent\x18\x01 \x01(\x04R\acurrent\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x04R\x05limit\"W\n" +
	"\x14WaitContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"J\n" +
	"\x15WaitContainerResponse\x12\x1b\n" +
	"\texit_code\x18\x01 \x01(\x05R\bexitCode\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"t\n" +
	"\x16RenameContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x19\n" +
	"\bnew_name\x18\x02 \x01(\tR\anewName\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\"3\n" +
	"\x17RenameContainerResponse\x12\x18\n" +
	"\arenamed\x18\x01 \x01(\bR\arenamed\"\xd5\x01\n" +
	"\x16UpdateContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x128\n" +
	"\tresources\x18\x03 \x01(\v2\x1a.nerdctl.v1.ResourceLimitsR\tresources\x12@\n" +
	"\x0erestart_policy\x18\x04 \x01(\v2\x19.nerdctl.v1.RestartPolicyR\rrestartPolicy\"O\n" +
	"\x17UpdateContainerResponse\x12\x18\n" +
	"\aupdated\x18\x01 \x01(\bR\aupdated\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\"y\n" +
	"\x16CopyToContainerRequest\x12>\n" +
	"\aoptions\x18\x01 \x01(\v2\".nerdctl.v1.CopyToContainerOptionsH\x00R\aoptions\x12\x14\n" +
	"\x04data\x18\x02 \x01(\fH\x00R\x04dataB\t\n" +
	"\arequest\"\xba\x01\n" +
	"\x16CopyToContainerOptions\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x1b\n" +
	"\tdest_path\x18\x03 \x01(\tR\bdestPath\x12\x1f\n" +
	"\vextract_tar\x18\x04 \x01(\bR\n" +
	"extractTar\x12!\n" +
	"\fno_overwrite\x18\x05 \x01(\bR\vnoOverwrite\"1\n" +
	"\x17CopyToContainerResponse\x12\x16\n" +
	"\x06copied\x18\x01 \x01(\bR\x06copied\"v\n" +
	"\x18CopyFromContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x19\n" +
	"\bsrc_path\x18\x03 \x01(\tR\asrcPath\"K\n" +
	"\x19CopyFromContainerResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x1a\n" +
	"\bfinished\x18\x02 \x01(\bR\bfinished\"Y\n" +
	"\x16ExportContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"I\n" +
	"\x17ExportContainerResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x1a\n" +
	"\bfinished\x18\x02 \x01(\bR\bfinished\"W\n" +
	"\x14DiffContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"\x96\x01\n" +
	"\x0fContainerChange\x124\n" +
	"\x04kind\x18\x01 \x01(\x0e2 .nerdctl.v1.ContainerChange.KindR\x04kind\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\"9\n" +
	"\x04Kind\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\f\n" +
	"\bMODIFIED\x10\x01\x12\t\n" +
	"\x05ADDED\x10\x02\x12\v\n" +
	"\aDELETED\x10\x03\"N\n" +
	"\x15DiffContainerResponse\x125\n" +
	"\achanges\x18\x01 \x03(\v2\x1b.nerdctl.v1.ContainerChangeR\achanges\"\xed\x01\n" +
	"\x16CommitContainerRequest\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x1e\n" +
	"\n" +
	"repository\x18\x03 \x01(\tR\n" +
	"repository\x12\x10\n" +
	"\x03tag\x18\x04 \x01(\tR\x03tag\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12\x16\n" +
	"\x06author\x18\x06 \x01(\tR\x06author\x12\x18\n" +
	"\achanges\x18\a \x03(\tR\achanges\x12\x14\n" +
	"\x05pause\x18\b \x01(\bR\x05pause\"4\n" +
	"\x17CommitContainerResponse\x12\x19\n" +
	"\bimage_id\x18\x01 \x01(\tR\aimageId\"\xbd\x01\n" +
	"\x16PruneContainersRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12I\n" +
	"\afilters\x18\x02 \x03(\v2/.nerdctl.v1.PruneContainersRequest.FiltersEntryR\afilters\x1a:\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"_\n" +
	"\x12PruneContainerInfo\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\"z\n" +
	"\x17PruneContainersResponse\x126\n" +
	"\x06pruned\x18\x01 \x03(\v2\x1e.nerdctl.v1.PruneContainerInfoR\x06pruned\x12'\n" +
	"\x0fspace_reclaimed\x18\x02 \x01(\x03R\x0espaceReclaimed2\xda\x12\n" +
	"\x10ContainerService\x12Z\n" +
	"\x0fCreateContainer\x12\".nerdctl.v1.CreateContainerRequest\x1a#.nerdctl.v1.CreateContainerResponse\x12W\n" +
	"\x0eStartContainer\x12!.nerdctl.v1.StartContainerRequest\x1a\".nerdctl.v1.StartContainerResponse\x12T\n" +
	"\rStopContainer\x12 .nerdctl.v1.StopContainerRequest\x1a!.nerdctl.v1.StopContainerResponse\x12]\n" +
	"\x10RestartContainer\x12#.nerdctl.v1.RestartContainerRequest\x1a$.nerdctl.v1.RestartContainerResponse\x12Z\n" +
	"\x0fRemoveContainer\x12\".nerdctl.v1.RemoveContainerRequest\x1a#.nerdctl.v1.RemoveContainerResponse\x12T\n" +
	"\rKillContainer\x12 .nerdctl.v1.KillContainerRequest\x1a!.nerdctl.v1.KillContainerResponse\x12W\n" +
	"\x0ePauseContainer\x12!.nerdctl.v1.PauseContainerRequest\x1a\".nerdctl.v1.PauseContainerResponse\x12]\n" +
	"\x10UnpauseContainer\x12#.nerdctl.v1.UnpauseContainerRequest\x1a$.nerdctl.v1.UnpauseContainerResponse\x12Q\n" +
	"\fRunContainer\x12\x1f.nerdctl.v1.RunContainerRequest\x1a .nerdctl.v1.RunContainerResponse\x12_\n" +
	"\x12RunContainerStream\x12\x1f.nerdctl.v1.RunContainerRequest\x1a&.nerdctl.v1.RunContainerStreamResponse0\x01\x12W\n" +
	"\x0eListContainers\x12!.nerdctl.v1.ListContainersRequest\x1a\".nerdctl.v1.ListContainersResponse\x12]\n" +
	"\x10InspectContainer\x12#.nerdctl.v1.InspectContainerRequest\x1a$.nerdctl.v1.InspectContainerResponse\x12O\n" +
	"\x10GetContainerLogs\x12#.nerdctl.v1.GetContainerLogsRequest\x1a\x14.nerdctl.v1.LogEntry0\x01\x12^\n" +
	"\x0fAttachContainer\x12\".nerdctl.v1.AttachContainerRequest\x1a#.nerdctl.v1.AttachContainerResponse(\x010\x01\x12T\n" +
	"\rExecContainer\x12 .nerdctl.v1.ExecContainerRequest\x1a!.nerdctl.v1.ExecContainerResponse\x12j\n" +
	"\x13ExecContainerStream\x12&.nerdctl.v1.ExecContainerStreamRequest\x1a'.nerdctl.v1.ExecContainerStreamResponse(\x010\x01\x12W\n" +
	"\x11GetContainerStats\x12$.nerdctl.v1.GetContainerStatsRequest\x1a\x1a.nerdctl.v1.ContainerStats0\x01\x12T\n" +
	"\rWaitContainer\x12 .nerdctl.v1.WaitContainerRequest\x1a!.nerdctl.v1.WaitContainerResponse\x12Z\n" +
	"\x0fRenameContainer\x12\".nerdctl.v1.RenameContainerRequest\x1a#.nerdctl.v1.RenameContainerResponse\x12Z\n" +
	"\x0fUpdateContainer\x12\".nerdctl.v1.UpdateContainerRequest\x1a#.nerdctl.v1.UpdateContainerResponse\x12\\\n" +
	"\x0fCopyToContainer\x12\".nerdctl.v1.CopyToContainerRequest\x1a#.nerdctl.v1.CopyToContainerResponse(\x01\x12b\n" +
	"\x11CopyFromContainer\x12$.nerdctl.v1.CopyFromContainerRequest\x1a%.nerdctl.v1.CopyFromContainerResponse0\x01\x12\\\n" +
	"\x0fExportContainer\x12\".nerdctl.v1.ExportContainerRequest\x1a#.nerdctl.v1.ExportContainerResponse0\x01\x12T\n" +
	"\rDiffContainer\x12 .nerdctl.v1.DiffContainerRequest\x1a!.nerdctl.v1.DiffContainerResponse\x12Z\n" +
	"\x0fCommitContainer\x12\".nerdctl.v1.CommitContainerRequest\x1a#.nerdctl.v1.CommitContainerResponse\x12Z\n" +
	"\x0fPruneContainers\x12\".nerdctl.v1.PruneContainersRequest\x1a#.nerdctl.v1.PruneContainersResponseB5Z3github.com/containerd/nerdctl-grpc-server/api/protob\x06proto3"

var (
	file_api_proto_container_service_proto_rawDescOnce sync.Once
	file_api_proto_container_service_proto_rawDescData []byte
)

func file_api_proto_container_service_proto_rawDescGZIP() []byte {
	file_api_proto_container_service_proto_rawDescOnce.Do(func() {
		file_api_proto_container_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_container_service_proto_rawDesc), len(file_api_proto_container_service_proto_rawDesc)))
	})
	return file_api_proto_container_service_proto_rawDescData
}

var file_api_proto_container_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_container_service_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_api_proto_container_service_proto_goTypes = []any{
	(ContainerChange_Kind)(0),           // 0: nerdctl.v1.ContainerChange.Kind
	(*CreateContainerRequest)(nil),      // 1: nerdctl.v1.CreateContainerRequest
	(*CreateContainerResponse)(nil),     // 2: nerdctl.v1.CreateContainerResponse
	(*StartContainerRequest)(nil),       // 3: nerdctl.v1.StartContainerRequest
	(*StartContainerResponse)(nil),      // 4: nerdctl.v1.StartContainerResponse
	(*StopContainerRequest)(nil),        // 5: nerdctl.v1.StopContainerRequest
	(*StopContainerResponse)(nil),       // 6: nerdctl.v1.StopContainerResponse
	(*RestartContainerRequest)(nil),     // 7: nerdctl.v1.RestartContainerRequest
	(*RestartContainerResponse)(nil),    // 8: nerdctl.v1.RestartContainerResponse
	(*RemoveContainerRequest)(nil),      // 9: nerdctl.v1.RemoveContainerRequest
	(*RemoveContainerResponse)(nil),     // 10: nerdctl.v1.RemoveContainerResponse
	(*KillContainerRequest)(nil),        // 11: nerdctl.v1.KillContainerRequest
	(*KillContainerResponse)(nil),       // 12: nerdctl.v1.KillContainerResponse
	(*PauseContainerRequest)(nil),       // 13: nerdctl.v1.PauseContainerRequest
	(*PauseContainerResponse)(nil),      // 14: nerdctl.v1.PauseContainerResponse
	(*UnpauseContainerRequest)(nil),     // 15: nerdctl.v1.UnpauseContainerRequest
	(*UnpauseContainerResponse)(nil),    // 16: nerdctl.v1.UnpauseContainerResponse
	(*RunContainerRequest)(nil),         // 17: nerdctl.v1.RunContainerRequest
	(*RunContainerResponse)(nil),        // 18: nerdctl.v1.RunContainerResponse
	(*RunContainerStreamResponse)(nil),  // 19: nerdctl.v1.RunContainerStreamResponse
	(*ListContainersRequest)(nil),       // 20: nerdctl.v1.ListContainersRequest
	(*ListContainersResponse)(nil),      // 21: nerdctl.v1.ListContainersResponse
	(*InspectContainerRequest)(nil),     // 22: nerdctl.v1.InspectContainerRequest
	(*InspectContainerResponse)(nil),    // 23: nerdctl.v1.InspectContainerResponse
	(*GetContainerLogsRequest)(nil),     // 24: nerdctl.v1.GetContainerLogsRequest
	(*LogEntry)(nil),                    // 25: nerdctl.v1.LogEntry
	(*AttachContainerRequest)(nil),      // 26: nerdctl.v1.AttachContainerRequest
	(*AttachContainerOptions)(nil),      // 27: nerdctl.v1.AttachContainerOptions
	(*AttachContainerResponse)(nil),     // 28: nerdctl.v1.AttachContainerResponse
	(*ExecContainerRequest)(nil),        // 29: nerdctl.v1.ExecContainerRequest
	(*ExecContainerResponse)(nil),       // 30: nerdctl.v1.ExecContainerResponse
	(*ExecContainerStreamRequest)(nil),  // 31: nerdctl.v1.ExecContainerStreamRequest
	(*ExecContainerStreamResponse)(nil), // 32: nerdctl.v1.ExecContainerStreamResponse
	(*GetContainerStatsRequest)(nil),    // 33: nerdctl.v1.GetContainerStatsRequest
	(*ContainerStats)(nil),              // 34: nerdctl.v1.ContainerStats
	(*WaitContainerRequest)(nil),        // 35: nerdctl.v1.WaitContainerRequest
	(*WaitContainerResponse)(nil),       // 36: nerdctl.v1.WaitContainerResponse
	(*RenameContainerRequest)(nil),      // 37: nerdctl.v1.RenameContainerRequest
	(*RenameContainerResponse)(nil),     // 38: nerdctl.v1.RenameContainerResponse
	(*UpdateContainerRequest)(nil),      // 39: nerdctl.v1.UpdateContainerRequest
	(*UpdateContainerResponse)(nil),     // 40: nerdctl.v1.UpdateContainerResponse
	(*CopyToContainerRequest)(nil),      // 41: nerdctl.v1.CopyToContainerRequest
	(*CopyToContainerOptions)(nil),      // 42: nerdctl.v1.CopyToContainerOptions
	(*CopyToContainerResponse)(nil),     // 43: nerdctl.v1.CopyToContainerResponse
	(*CopyFromContainerRequest)(nil),    // 44: nerdctl.v1.CopyFromContainerRequest
	(*CopyFromContainerResponse)(nil),   // 45: nerdctl.v1.CopyFromContainerResponse
	(*ExportContainerRequest)(nil),      // 46: nerdctl.v1.ExportContainerRequest
	(*ExportContainerResponse)(nil),     // 47: nerdctl.v1.ExportContainerResponse
	(*DiffContainerRequest)(nil),        // 48: nerdctl.v1.DiffContainerRequest
	(*ContainerChange)(nil),             // 49: nerdctl.v1.ContainerChange
	(*DiffContainerResponse)(nil),       // 50: nerdctl.v1.DiffContainerResponse
	(*CommitContainerRequest)(nil),      // 51: nerdctl.v1.CommitContainerRequest
	(*CommitContainerResponse)(nil),     // 52: nerdctl.v1.CommitContainerResponse
	(*PruneContainersRequest)(nil),      // 53: nerdctl.v1.PruneContainersRequest
	(*PruneContainerInfo)(nil),          // 54: nerdctl.v1.PruneContainerInfo
	(*PruneContainersResponse)(nil),     // 55: nerdctl.v1.PruneContainersResponse
	nil,                                 // 56: nerdctl.v1.CreateContainerRequest.LabelsEntry
	nil,                                 // 57: nerdctl.v1.RunContainerRequest.LabelsEntry
	nil,                                 // 58: nerdctl.v1.ListContainersRequest.FiltersEntry
	(*ContainerStats_CPUStats)(nil),     // 59: nerdctl.v1.ContainerStats.CPUStats
	(*ContainerStats_MemoryStats)(nil),  // 60: nerdctl.v1.ContainerStats.MemoryStats
	(*ContainerStats_BlkioStats)(nil),   // 61: nerdctl.v1.ContainerStats.BlkioStats
	(*ContainerStats_NetworkStats)(nil), // 62: nerdctl.v1.ContainerStats.NetworkStats
	nil,                                 // 63: nerdctl.v1.ContainerStats.NetworksEntry
	(*ContainerStats_PidsStats)(nil),    // 64: nerdctl.v1.ContainerStats.PidsStats
	nil,                                 // 65: nerdctl.v1.PruneContainersRequest.FiltersEntry
	(*NetworkConfig)(nil),               // 66: nerdctl.v1.NetworkConfig
	(*VolumeMount)(nil),                 // 67: nerdctl.v1.VolumeMount
	(*ResourceLimits)(nil),              // 68: nerdctl.v1.ResourceLimits
	(*SecurityOptions)(nil),             // 69: nerdctl.v1.SecurityOptions
	(*HealthCheck)(nil),                 // 70: nerdctl.v1.HealthCheck
	(*LogConfig)(nil),                   // 71: nerdctl.v1.LogConfig
	(*RestartPolicy)(nil),               // 72: nerdctl.v1.RestartPolicy
	(*Platform)(nil),                    // 73: nerdctl.v1.Platform
	(ContainerStatus)(0),                // 74: nerdctl.v1.ContainerStatus
	(*OperationProgress)(nil),           // 75: nerdctl.v1.OperationProgress
	(*ContainerInfo)(nil),               // 76: nerdctl.v1.ContainerInfo
	(*timestamp.Timestamp)(nil),         // 77: google.protobuf.Timestamp
}
var file_api_proto_container_service_proto_depIdxs = []int32{
	56, // 0: nerdctl.v1.CreateContainerRequest.labels:type_name -> nerdctl.v1.CreateContainerRequest.LabelsEntry
	66, // 1: nerdctl.v1.CreateContainerRequest.network_config:type_name -> nerdctl.v1.NetworkConfig
	67, // 2: nerdctl.v1.CreateContainerRequest.mounts:type_name -> nerdctl.v1.VolumeMount
	68, // 3: nerdctl.v1.CreateContainerRequest.resources:type_name -> nerdctl.v1.ResourceLimits
	69, // 4: nerdctl.v1.CreateContainerRequest.security:type_name -> nerdctl.v1.SecurityOptions
	70, // 5: nerdctl.v1.CreateContainerRequest.health_check:type_name -> nerdctl.v1.HealthCheck
	71, // 6: nerdctl.v1.CreateContainerRequest.log_config:type_name -> nerdctl.v1.LogConfig
	72, // 7: nerdctl.v1.CreateContainerRequest.restart_policy:type_name -> nerdctl.v1.RestartPolicy
	73, // 8: nerdctl.v1.CreateContainerRequest.platform:type_name -> nerdctl.v1.Platform
	57, // 9: nerdctl.v1.RunContainerRequest.labels:type_name -> nerdctl.v1.RunContainerRequest.LabelsEntry
	66, // 10: nerdctl.v1.RunContainerRequest.network_config:type_name -> nerdctl.v1.NetworkConfig
	67, // 11: nerdctl.v1.RunContainerRequest.mounts:type_name -> nerdctl.v1.VolumeMount
	68, // 12: nerdctl.v1.RunContainerRequest.resources:type_name -> nerdctl.v1.ResourceLimits
	69, // 13: nerdctl.v1.RunContainerRequest.security:type_name -> nerdctl.v1.SecurityOptions
	73, // 14: nerdctl.v1.RunContainerRequest.platform:type_name -> nerdctl.v1.Platform
	72, // 15: nerdctl.v1.RunContainerRequest.restart_policy:type_name -> nerdctl.v1.RestartPolicy
	74, // 16: nerdctl.v1.RunContainerResponse.status:type_name -> nerdctl.v1.ContainerStatus
	75, // 17: nerdctl.v1.RunContainerStreamResponse.progress:type_name -> nerdctl.v1.OperationProgress
	25, // 18: nerdctl.v1.RunContainerStreamResponse.log:type_name -> nerdctl.v1.LogEntry
	18, // 19: nerdctl.v1.RunContainerStreamResponse.result:type_name -> nerdctl.v1.RunContainerResponse
	58, // 20: nerdctl.v1.ListContainersRequest.filters:type_name -> nerdctl.v1.ListContainersRequest.FiltersEntry
	76, // 21: nerdctl.v1.ListContainersResponse.containers:type_name -> nerdctl.v1.ContainerInfo
	76, // 22: nerdctl.v1.InspectContainerResponse.container:type_name -> nerdctl.v1.ContainerInfo
	77, // 23: nerdctl.v1.LogEntry.timestamp:type_name -> google.protobuf.Timestamp
	27, // 24: nerdctl.v1.AttachContainerRequest.options:type_name -> nerdctl.v1.AttachContainerOptions
	29, // 25: nerdctl.v1.ExecContainerStreamRequest.exec:type_name -> nerdctl.v1.ExecContainerRequest
	77, // 26: nerdctl.v1.ContainerStats.timestamp:type_name -> google.protobuf.Timestamp
	59, // 27: nerdctl.v1.ContainerStats.cpu:type_name -> nerdctl.v1.ContainerStats.CPUStats
	60, // 28: nerdctl.v1.ContainerStats.memory:type_name -> nerdctl.v1.ContainerStats.MemoryStats
	61, // 29: nerdctl.v1.ContainerStats.blkio:type_name -> nerdctl.v1.ContainerStats.BlkioStats
	63, // 30: nerdctl.v1.ContainerStats.networks:type_name -> nerdctl.v1.ContainerStats.NetworksEntry
	64, // 31: nerdctl.v1.ContainerStats.pids:type_name -> nerdctl.v1.ContainerStats.PidsStats
	68, // 32: nerdctl.v1.UpdateContainerRequest.resources:type_name -> nerdctl.v1.ResourceLimits
	72, // 33: nerdctl.v1.UpdateContainerRequest.restart_policy:type_name -> nerdctl.v1.RestartPolicy
	42, // 34: nerdctl.v1.CopyToContainerRequest.options:type_name -> nerdctl.v1.CopyToContainerOptions
	0,  // 35: nerdctl.v1.ContainerChange.kind:type_name -> nerdctl.v1.ContainerChange.Kind
	49, // 36: nerdctl.v1.DiffContainerResponse.changes:type_name -> nerdctl.v1.ContainerChange
	65, // 37: nerdctl.v1.PruneContainersRequest.filters:type_name -> nerdctl.v1.PruneContainersRequest.FiltersEntry
	54, // 38: nerdctl.v1.PruneContainersResponse.pruned:type_name -> nerdctl.v1.PruneContainerInfo
	62, // 39: nerdctl.v1.ContainerStats.NetworksEntry.value:type_name -> nerdctl.v1.ContainerStats.NetworkStats
	1,  // 40: nerdctl.v1.ContainerService.CreateContainer:input_type -> nerdctl.v1.CreateContainerRequest
	3,  // 41: nerdctl.v1.ContainerService.StartContainer:input_type -> nerdctl.v1.StartContainerRequest
	5,  // 42: nerdctl.v1.ContainerService.StopContainer:input_type -> nerdctl.v1.StopContainerRequest
	7,  // 43: nerdctl.v1.ContainerService.RestartContainer:input_type -> nerdctl.v1.RestartContainerRequest
	9,  // 44: nerdctl.v1.ContainerService.RemoveContainer:input_type -> nerdctl.v1.RemoveContainerRequest
	11, // 45: nerdctl.v1.ContainerService.KillContainer:input_type -> nerdctl.v1.KillContainerRequest
	13, // 46: nerdctl.v1.ContainerService.PauseContainer:input_type -> nerdctl.v1.PauseContainerRequest
	15, // 47: nerdctl.v1.ContainerService.UnpauseContainer:input_type -> nerdctl.v1.UnpauseContainerRequest
	17, // 48: nerdctl.v1.ContainerService.RunContainer:input_type -> nerdctl.v1.RunContainerRequest
	17, // 49: nerdctl.v1.ContainerService.RunContainerStream:input_type -> nerdctl.v1.RunContainerRequest
	20, // 50: nerdctl.v1.ContainerService.ListContainers:input_type -> nerdctl.v1.ListContainersRequest
	22, // 51: nerdctl.v1.ContainerService.InspectContainer:input_type -> nerdctl.v1.InspectContainerRequest
	24, // 52: nerdctl.v1.ContainerService.GetContainerLogs:input_type -> nerdctl.v1.GetContainerLogsRequest
	26, // 53: nerdctl.v1.ContainerService.AttachContainer:input_type -> nerdctl.v1.AttachContainerRequest
	29, // 54: nerdctl.v1.ContainerService.ExecContainer:input_type -> nerdctl.v1.ExecContainerRequest
	31, // 55: nerdctl.v1.ContainerService.ExecContainerStream:input_type -> nerdctl.v1.ExecContainerStreamRequest
	33, // 56: nerdctl.v1.ContainerService.GetContainerStats:input_type -> nerdctl.v1.GetContainerStatsRequest
	35, // 57: nerdctl.v1.ContainerService.WaitContainer:input_type -> nerdctl.v1.WaitContainerRequest
	37, // 58: nerdctl.v1.ContainerService.RenameContainer:input_type -> nerdctl.v1.RenameContainerRequest
	39, // 59: nerdctl.v1.ContainerService.UpdateContainer:input_type -> nerdctl.v1.UpdateContainerRequest
	41, // 60: nerdctl.v1.ContainerService.CopyToContainer:input_type -> nerdctl.v1.CopyToContainerRequest
	44, // 61: nerdctl.v1.ContainerService.CopyFromContainer:input_type -> nerdctl.v1.CopyFromContainerRequest
	46, // 62: nerdctl.v1.ContainerService.ExportContainer:input_type -> nerdctl.v1.ExportContainerRequest
	48, // 63: nerdctl.v1.ContainerService.DiffContainer:input_type -> nerdctl.v1.DiffContainerRequest
	51, // 64: nerdctl.v1.ContainerService.CommitContainer:input_type -> nerdctl.v1.CommitContainerRequest
	53, // 65: nerdctl.v1.ContainerService.PruneContainers:input_type -> nerdctl.v1.PruneContainersRequest
	2,  // 66: nerdctl.v1.ContainerService.CreateContainer:output_type -> nerdctl.v1.CreateContainerResponse
	4,  // 67: nerdctl.v1.ContainerService.StartContainer:output_type -> nerdctl.v1.StartContainerResponse
	6,  // 68: nerdctl.v1.ContainerService.StopContainer:output_type -> nerdctl.v1.StopContainerResponse
	8,  // 69: nerdctl.v1.ContainerService.RestartContainer:output_type -> nerdctl.v1.RestartContainerResponse
	10, // 70: nerdctl.v1.ContainerService.RemoveContainer:output_type -> nerdctl.v1.RemoveContainerResponse
	12, // 71: nerdctl.v1.ContainerService.KillContainer:output_type -> nerdctl.v1.KillContainerResponse
	14, // 72: nerdctl.v1.ContainerService.PauseContainer:output_type -> nerdctl.v1.PauseContainerResponse
	16, // 73: nerdctl.v1.ContainerService.UnpauseContainer:output_type -> nerdctl.v1.UnpauseContainerResponse
	18, // 74: nerdctl.v1.ContainerService.RunContainer:output_type -> nerdctl.v1.RunContainerResponse
	19, // 75: nerdctl.v1.ContainerService.RunContainerStream:output_type -> nerdctl.v1.RunContainerStreamResponse
	21, // 76: nerdctl.v1.ContainerService.ListContainers:output_type -> nerdctl.v1.ListContainersResponse
	23, // 77: nerdctl.v1.ContainerService.InspectContainer:output_type -> nerdctl.v1.InspectContainerResponse
	25, // 78: nerdctl.v1.ContainerService.GetContainerLogs:output_type -> nerdctl.v1.LogEntry
	28, // 79: nerdctl.v1.ContainerService.AttachContainer:output_type -> nerdctl.v1.AttachContainerResponse
	30, // 80: nerdctl.v1.ContainerService.ExecContainer:output_type -> nerdctl.v1.ExecContainerResponse
	32, // 81: nerdctl.v1.ContainerService.ExecContainerStream:output_type -> nerdctl.v1.ExecContainerStreamResponse
	34, // 82: nerdctl.v1.ContainerService.GetContainerStats:output_type -> nerdctl.v1.ContainerStats
	36, // 83: nerdctl.v1.ContainerService.WaitContainer:output_type -> nerdctl.v1.WaitContainerResponse
	38, // 84: nerdctl.v1.ContainerService.RenameContainer:output_type -> nerdctl.v1.RenameContainerResponse
	40, // 85: nerdctl.v1.ContainerService.UpdateContainer:output_type -> nerdctl.v1.UpdateContainerResponse
	43, // 86: nerdctl.v1.ContainerService.CopyToContainer:output_type -> nerdctl.v1.CopyToContainerResponse
	45, // 87: nerdctl.v1.ContainerService.CopyFromContainer:output_type -> nerdctl.v1.CopyFromContainerResponse
	47, // 88: nerdctl.v1.ContainerService.ExportContainer:output_type -> nerdctl.v1.ExportContainerResponse
	50, // 89: nerdctl.v1.ContainerService.DiffContainer:output_type -> nerdctl.v1.DiffContainerResponse
	52, // 90: nerdctl.v1.ContainerService.CommitContainer:output_type -> nerdctl.v1.CommitContainerResponse
	55, // 91: nerdctl.v1.ContainerService.PruneContainers:output_type -> nerdctl.v1.PruneContainersResponse
	66, // [66:92] is the sub-list for method output_type
	40, // [40:66] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_api_proto_container_service_proto_init() }
func file_api_proto_container_service_proto_init() {
	if File_api_proto_container_service_proto != nil {
		return
	}
	file_api_proto_common_proto_init()
	file_api_proto_container_service_proto_msgTypes[18].OneofWrappers = []any{
		(*RunContainerStreamResponse_Progress)(nil),
		(*RunContainerStreamResponse_Log)(nil),
		(*RunContainerStreamResponse_Result)(nil),
	}
	file_api_proto_container_service_proto_msgTypes[25].OneofWrappers = []any{
		(*AttachContainerRequest_Options)(nil),
		(*AttachContainerRequest_Stdin)(nil),
	}
	file_api_proto_container_service_proto_msgTypes[27].OneofWrappers = []any{
		(*AttachContainerResponse_Stdout)(nil),
		(*AttachContainerResponse_Stderr)(nil),
		(*AttachContainerResponse_Detached)(nil),
	}
	file_api_proto_container_service_proto_msgTypes[30].OneofWrappers = []any{
		(*ExecContainerStreamRequest_Exec)(nil),
		(*ExecContainerStreamRequest_Stdin)(nil),
	}
	file_api_proto_container_service_proto_msgTypes[31].OneofWrappers = []any{
		(*ExecContainerStreamResponse_Stdout)(nil),
		(*ExecContainerStreamResponse_Stderr)(nil),
		(*ExecContainerStreamResponse_ExitCode)(nil),
	}
	file_api_proto_container_service_proto_msgTypes[40].OneofWrappers = []any{
		(*CopyToContainerRequest_Options)(nil),
		(*CopyToContainerRequest_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_container_service_proto_rawDesc), len(file_api_proto_container_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_container_service_proto_goTypes,
		DependencyIndexes: file_api_proto_container_service_proto_depIdxs,
		EnumInfos:         file_api_proto_container_service_proto_enumTypes,
		MessageInfos:      file_api_proto_container_service_proto_msgTypes,
	}.Build()
	File_api_proto_container_service_proto = out.File
	file_api_proto_container_service_proto_goTypes = nil
	file_api_proto_container_service_proto_depIdxs = nil
}
