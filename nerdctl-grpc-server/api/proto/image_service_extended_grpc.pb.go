// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/image_service_extended.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageServiceExtended_PullImage_FullMethodName             = "/nerdctl.v1.ImageServiceExtended/PullImage"
	ImageServiceExtended_PushImage_FullMethodName             = "/nerdctl.v1.ImageServiceExtended/PushImage"
	ImageServiceExtended_ListImages_FullMethodName            = "/nerdctl.v1.ImageServiceExtended/ListImages"
	ImageServiceExtended_InspectImage_FullMethodName          = "/nerdctl.v1.ImageServiceExtended/InspectImage"
	ImageServiceExtended_RemoveImage_FullMethodName           = "/nerdctl.v1.ImageServiceExtended/RemoveImage"
	ImageServiceExtended_TagImage_FullMethodName              = "/nerdctl.v1.ImageServiceExtended/TagImage"
	ImageServiceExtended_UntagImage_FullMethodName            = "/nerdctl.v1.ImageServiceExtended/UntagImage"
	ImageServiceExtended_BuildImage_FullMethodName            = "/nerdctl.v1.ImageServiceExtended/BuildImage"
	ImageServiceExtended_BuildImageFromContext_FullMethodName = "/nerdctl.v1.ImageServiceExtended/BuildImageFromContext"
	ImageServiceExtended_SaveImage_FullMethodName             = "/nerdctl.v1.ImageServiceExtended/SaveImage"
	ImageServiceExtended_LoadImage_FullMethodName             = "/nerdctl.v1.ImageServiceExtended/LoadImage"
	ImageServiceExtended_ExportImage_FullMethodName           = "/nerdctl.v1.ImageServiceExtended/ExportImage"
	ImageServiceExtended_ImportImage_FullMethodName           = "/nerdctl.v1.ImageServiceExtended/ImportImage"
	ImageServiceExtended_ConvertImage_FullMethodName          = "/nerdctl.v1.ImageServiceExtended/ConvertImage"
	ImageServiceExtended_EncryptImage_FullMethodName          = "/nerdctl.v1.ImageServiceExtended/EncryptImage"
	ImageServiceExtended_DecryptImage_FullMethodName          = "/nerdctl.v1.ImageServiceExtended/DecryptImage"
	ImageServiceExtended_GetImageHistory_FullMethodName       = "/nerdctl.v1.ImageServiceExtended/GetImageHistory"
	ImageServiceExtended_GetImageLayers_FullMethodName        = "/nerdctl.v1.ImageServiceExtended/GetImageLayers"
	ImageServiceExtended_DiffImage_FullMethodName             = "/nerdctl.v1.ImageServiceExtended/DiffImage"
	ImageServiceExtended_PruneImages_FullMethodName           = "/nerdctl.v1.ImageServiceExtended/PruneImages"
	ImageServiceExtended_CleanupImages_FullMethodName         = "/nerdctl.v1.ImageServiceExtended/CleanupImages"
	ImageServiceExtended_CreateManifestList_FullMethodName    = "/nerdctl.v1.ImageServiceExtended/CreateManifestList"
	ImageServiceExtended_InspectManifestList_FullMethodName   = "/nerdctl.v1.ImageServiceExtended/InspectManifestList"
	ImageServiceExtended_LoginRegistry_FullMethodName         = "/nerdctl.v1.ImageServiceExtended/LoginRegistry"
	ImageServiceExtended_LogoutRegistry_FullMethodName        = "/nerdctl.v1.ImageServiceExtended/LogoutRegistry"
	ImageServiceExtended_SearchRegistry_FullMethodName        = "/nerdctl.v1.ImageServiceExtended/SearchRegistry"
	ImageServiceExtended_SignImage_FullMethodName             = "/nerdctl.v1.ImageServiceExtended/SignImage"
	ImageServiceExtended_VerifyImage_FullMethodName           = "/nerdctl.v1.ImageServiceExtended/VerifyImage"
	ImageServiceExtended_BatchImageOperation_FullMethodName   = "/nerdctl.v1.ImageServiceExtended/BatchImageOperation"
	ImageServiceExtended_MonitorImageEvents_FullMethodName    = "/nerdctl.v1.ImageServiceExtended/MonitorImageEvents"
)

// ImageServiceExtendedClient is the client API for ImageServiceExtended service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Extended Image service for comprehensive image management
type ImageServiceExtendedClient interface {
	// Basic image operations
	PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullImageResponse], error)
	PushImage(ctx context.Context, in *PushImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PushImageResponse], error)
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	InspectImage(ctx context.Context, in *InspectImageRequest, opts ...grpc.CallOption) (*InspectImageResponse, error)
	RemoveImage(ctx context.Context, in *RemoveImageRequest, opts ...grpc.CallOption) (*RemoveImageResponse, error)
	TagImage(ctx context.Context, in *TagImageRequest, opts ...grpc.CallOption) (*TagImageResponse, error)
	UntagImage(ctx context.Context, in *UntagImageRequest, opts ...grpc.CallOption) (*UntagImageResponse, error)
	// Image build operations
	BuildImage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuildImageRequest, BuildImageResponse], error)
	BuildImageFromContext(ctx context.Context, in *BuildImageFromContextRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BuildImageResponse], error)
	// Image transfer operations
	SaveImage(ctx context.Context, in *SaveImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SaveImageResponse], error)
	LoadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadImageRequest, LoadImageResponse], error)
	ExportImage(ctx context.Context, in *ExportImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportImageResponse], error)
	ImportImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImportImageRequest, ImportImageResponse], error)
	// Image conversion and encryption
	ConvertImage(ctx context.Context, in *ConvertImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConvertImageResponse], error)
	EncryptImage(ctx context.Context, in *EncryptImageRequest, opts ...grpc.CallOption) (*EncryptImageResponse, error)
	DecryptImage(ctx context.Context, in *DecryptImageRequest, opts ...grpc.CallOption) (*DecryptImageResponse, error)
	// Image history and analysis
	GetImageHistory(ctx context.Context, in *GetImageHistoryRequest, opts ...grpc.CallOption) (*GetImageHistoryResponse, error)
	GetImageLayers(ctx context.Context, in *GetImageLayersRequest, opts ...grpc.CallOption) (*GetImageLayersResponse, error)
	DiffImage(ctx context.Context, in *DiffImageRequest, opts ...grpc.CallOption) (*DiffImageResponse, error)
	// Image maintenance
	PruneImages(ctx context.Context, in *PruneImagesRequest, opts ...grpc.CallOption) (*PruneImagesResponse, error)
	CleanupImages(ctx context.Context, in *CleanupImagesRequest, opts ...grpc.CallOption) (*CleanupImagesResponse, error)
	// Multi-platform image operations
	CreateManifestList(ctx context.Context, in *CreateManifestListRequest, opts ...grpc.CallOption) (*CreateManifestListResponse, error)
	InspectManifestList(ctx context.Context, in *InspectManifestListRequest, opts ...grpc.CallOption) (*InspectManifestListResponse, error)
	// Registry operations
	LoginRegistry(ctx context.Context, in *LoginRegistryRequest, opts ...grpc.CallOption) (*LoginRegistryResponse, error)
	LogoutRegistry(ctx context.Context, in *LogoutRegistryRequest, opts ...grpc.CallOption) (*LogoutRegistryResponse, error)
	SearchRegistry(ctx context.Context, in *SearchRegistryRequest, opts ...grpc.CallOption) (*SearchRegistryResponse, error)
	// Image signing and verification
	SignImage(ctx context.Context, in *SignImageRequest, opts ...grpc.CallOption) (*SignImageResponse, error)
	VerifyImage(ctx context.Context, in *VerifyImageRequest, opts ...grpc.CallOption) (*VerifyImageResponse, error)
	// Batch operations
	BatchImageOperation(ctx context.Context, in *BatchImageRequest, opts ...grpc.CallOption) (*BatchImageResponse, error)
	// Image events
	MonitorImageEvents(ctx context.Context, in *MonitorImageEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageEvent], error)
}

type imageServiceExtendedClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceExtendedClient(cc grpc.ClientConnInterface) ImageServiceExtendedClient {
	return &imageServiceExtendedClient{cc}
}

func (c *imageServiceExtendedClient) PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[0], ImageServiceExtended_PullImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullImageRequest, PullImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_PullImageClient = grpc.ServerStreamingClient[PullImageResponse]

func (c *imageServiceExtendedClient) PushImage(ctx context.Context, in *PushImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PushImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[1], ImageServiceExtended_PushImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushImageRequest, PushImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_PushImageClient = grpc.ServerStreamingClient[PushImageResponse]

func (c *imageServiceExtendedClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_ListImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) InspectImage(ctx context.Context, in *InspectImageRequest, opts ...grpc.CallOption) (*InspectImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InspectImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_InspectImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) RemoveImage(ctx context.Context, in *RemoveImageRequest, opts ...grpc.CallOption) (*RemoveImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_RemoveImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) TagImage(ctx context.Context, in *TagImageRequest, opts ...grpc.CallOption) (*TagImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_TagImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) UntagImage(ctx context.Context, in *UntagImageRequest, opts ...grpc.CallOption) (*UntagImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UntagImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_UntagImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) BuildImage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BuildImageRequest, BuildImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[2], ImageServiceExtended_BuildImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BuildImageRequest, BuildImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_BuildImageClient = grpc.BidiStreamingClient[BuildImageRequest, BuildImageResponse]

func (c *imageServiceExtendedClient) BuildImageFromContext(ctx context.Context, in *BuildImageFromContextRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BuildImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[3], ImageServiceExtended_BuildImageFromContext_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BuildImageFromContextRequest, BuildImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_BuildImageFromContextClient = grpc.ServerStreamingClient[BuildImageResponse]

func (c *imageServiceExtendedClient) SaveImage(ctx context.Context, in *SaveImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SaveImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[4], ImageServiceExtended_SaveImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SaveImageRequest, SaveImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_SaveImageClient = grpc.ServerStreamingClient[SaveImageResponse]

func (c *imageServiceExtendedClient) LoadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadImageRequest, LoadImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[5], ImageServiceExtended_LoadImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoadImageRequest, LoadImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_LoadImageClient = grpc.ClientStreamingClient[LoadImageRequest, LoadImageResponse]

func (c *imageServiceExtendedClient) ExportImage(ctx context.Context, in *ExportImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[6], ImageServiceExtended_ExportImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportImageRequest, ExportImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_ExportImageClient = grpc.ServerStreamingClient[ExportImageResponse]

func (c *imageServiceExtendedClient) ImportImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImportImageRequest, ImportImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[7], ImageServiceExtended_ImportImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImportImageRequest, ImportImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_ImportImageClient = grpc.ClientStreamingClient[ImportImageRequest, ImportImageResponse]

func (c *imageServiceExtendedClient) ConvertImage(ctx context.Context, in *ConvertImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConvertImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[8], ImageServiceExtended_ConvertImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConvertImageRequest, ConvertImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_ConvertImageClient = grpc.ServerStreamingClient[ConvertImageResponse]

func (c *imageServiceExtendedClient) EncryptImage(ctx context.Context, in *EncryptImageRequest, opts ...grpc.CallOption) (*EncryptImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_EncryptImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) DecryptImage(ctx context.Context, in *DecryptImageRequest, opts ...grpc.CallOption) (*DecryptImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecryptImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_DecryptImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) GetImageHistory(ctx context.Context, in *GetImageHistoryRequest, opts ...grpc.CallOption) (*GetImageHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageHistoryResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_GetImageHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) GetImageLayers(ctx context.Context, in *GetImageLayersRequest, opts ...grpc.CallOption) (*GetImageLayersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageLayersResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_GetImageLayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) DiffImage(ctx context.Context, in *DiffImageRequest, opts ...grpc.CallOption) (*DiffImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiffImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_DiffImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) PruneImages(ctx context.Context, in *PruneImagesRequest, opts ...grpc.CallOption) (*PruneImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruneImagesResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_PruneImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) CleanupImages(ctx context.Context, in *CleanupImagesRequest, opts ...grpc.CallOption) (*CleanupImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupImagesResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_CleanupImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) CreateManifestList(ctx context.Context, in *CreateManifestListRequest, opts ...grpc.CallOption) (*CreateManifestListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateManifestListResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_CreateManifestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) InspectManifestList(ctx context.Context, in *InspectManifestListRequest, opts ...grpc.CallOption) (*InspectManifestListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InspectManifestListResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_InspectManifestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) LoginRegistry(ctx context.Context, in *LoginRegistryRequest, opts ...grpc.CallOption) (*LoginRegistryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginRegistryResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_LoginRegistry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) LogoutRegistry(ctx context.Context, in *LogoutRegistryRequest, opts ...grpc.CallOption) (*LogoutRegistryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutRegistryResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_LogoutRegistry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) SearchRegistry(ctx context.Context, in *SearchRegistryRequest, opts ...grpc.CallOption) (*SearchRegistryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRegistryResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_SearchRegistry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) SignImage(ctx context.Context, in *SignImageRequest, opts ...grpc.CallOption) (*SignImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_SignImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) VerifyImage(ctx context.Context, in *VerifyImageRequest, opts ...grpc.CallOption) (*VerifyImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_VerifyImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) BatchImageOperation(ctx context.Context, in *BatchImageRequest, opts ...grpc.CallOption) (*BatchImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchImageResponse)
	err := c.cc.Invoke(ctx, ImageServiceExtended_BatchImageOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceExtendedClient) MonitorImageEvents(ctx context.Context, in *MonitorImageEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageServiceExtended_ServiceDesc.Streams[9], ImageServiceExtended_MonitorImageEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorImageEventsRequest, ImageEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_MonitorImageEventsClient = grpc.ServerStreamingClient[ImageEvent]

// ImageServiceExtendedServer is the server API for ImageServiceExtended service.
// All implementations must embed UnimplementedImageServiceExtendedServer
// for forward compatibility.
//
// Extended Image service for comprehensive image management
type ImageServiceExtendedServer interface {
	// Basic image operations
	PullImage(*PullImageRequest, grpc.ServerStreamingServer[PullImageResponse]) error
	PushImage(*PushImageRequest, grpc.ServerStreamingServer[PushImageResponse]) error
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	InspectImage(context.Context, *InspectImageRequest) (*InspectImageResponse, error)
	RemoveImage(context.Context, *RemoveImageRequest) (*RemoveImageResponse, error)
	TagImage(context.Context, *TagImageRequest) (*TagImageResponse, error)
	UntagImage(context.Context, *UntagImageRequest) (*UntagImageResponse, error)
	// Image build operations
	BuildImage(grpc.BidiStreamingServer[BuildImageRequest, BuildImageResponse]) error
	BuildImageFromContext(*BuildImageFromContextRequest, grpc.ServerStreamingServer[BuildImageResponse]) error
	// Image transfer operations
	SaveImage(*SaveImageRequest, grpc.ServerStreamingServer[SaveImageResponse]) error
	LoadImage(grpc.ClientStreamingServer[LoadImageRequest, LoadImageResponse]) error
	ExportImage(*ExportImageRequest, grpc.ServerStreamingServer[ExportImageResponse]) error
	ImportImage(grpc.ClientStreamingServer[ImportImageRequest, ImportImageResponse]) error
	// Image conversion and encryption
	ConvertImage(*ConvertImageRequest, grpc.ServerStreamingServer[ConvertImageResponse]) error
	EncryptImage(context.Context, *EncryptImageRequest) (*EncryptImageResponse, error)
	DecryptImage(context.Context, *DecryptImageRequest) (*DecryptImageResponse, error)
	// Image history and analysis
	GetImageHistory(context.Context, *GetImageHistoryRequest) (*GetImageHistoryResponse, error)
	GetImageLayers(context.Context, *GetImageLayersRequest) (*GetImageLayersResponse, error)
	DiffImage(context.Context, *DiffImageRequest) (*DiffImageResponse, error)
	// Image maintenance
	PruneImages(context.Context, *PruneImagesRequest) (*PruneImagesResponse, error)
	CleanupImages(context.Context, *CleanupImagesRequest) (*CleanupImagesResponse, error)
	// Multi-platform image operations
	CreateManifestList(context.Context, *CreateManifestListRequest) (*CreateManifestListResponse, error)
	InspectManifestList(context.Context, *InspectManifestListRequest) (*InspectManifestListResponse, error)
	// Registry operations
	LoginRegistry(context.Context, *LoginRegistryRequest) (*LoginRegistryResponse, error)
	LogoutRegistry(context.Context, *LogoutRegistryRequest) (*LogoutRegistryResponse, error)
	SearchRegistry(context.Context, *SearchRegistryRequest) (*SearchRegistryResponse, error)
	// Image signing and verification
	SignImage(context.Context, *SignImageRequest) (*SignImageResponse, error)
	VerifyImage(context.Context, *VerifyImageRequest) (*VerifyImageResponse, error)
	// Batch operations
	BatchImageOperation(context.Context, *BatchImageRequest) (*BatchImageResponse, error)
	// Image events
	MonitorImageEvents(*MonitorImageEventsRequest, grpc.ServerStreamingServer[ImageEvent]) error
	mustEmbedUnimplementedImageServiceExtendedServer()
}

// UnimplementedImageServiceExtendedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageServiceExtendedServer struct{}

func (UnimplementedImageServiceExtendedServer) PullImage(*PullImageRequest, grpc.ServerStreamingServer[PullImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) PushImage(*PushImageRequest, grpc.ServerStreamingServer[PushImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PushImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedImageServiceExtendedServer) InspectImage(context.Context, *InspectImageRequest) (*InspectImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) RemoveImage(context.Context, *RemoveImageRequest) (*RemoveImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) TagImage(context.Context, *TagImageRequest) (*TagImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) UntagImage(context.Context, *UntagImageRequest) (*UntagImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) BuildImage(grpc.BidiStreamingServer[BuildImageRequest, BuildImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BuildImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) BuildImageFromContext(*BuildImageFromContextRequest, grpc.ServerStreamingServer[BuildImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BuildImageFromContext not implemented")
}
func (UnimplementedImageServiceExtendedServer) SaveImage(*SaveImageRequest, grpc.ServerStreamingServer[SaveImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SaveImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) LoadImage(grpc.ClientStreamingServer[LoadImageRequest, LoadImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LoadImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) ExportImage(*ExportImageRequest, grpc.ServerStreamingServer[ExportImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExportImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) ImportImage(grpc.ClientStreamingServer[ImportImageRequest, ImportImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ImportImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) ConvertImage(*ConvertImageRequest, grpc.ServerStreamingServer[ConvertImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConvertImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) EncryptImage(context.Context, *EncryptImageRequest) (*EncryptImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) DecryptImage(context.Context, *DecryptImageRequest) (*DecryptImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) GetImageHistory(context.Context, *GetImageHistoryRequest) (*GetImageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageHistory not implemented")
}
func (UnimplementedImageServiceExtendedServer) GetImageLayers(context.Context, *GetImageLayersRequest) (*GetImageLayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageLayers not implemented")
}
func (UnimplementedImageServiceExtendedServer) DiffImage(context.Context, *DiffImageRequest) (*DiffImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) PruneImages(context.Context, *PruneImagesRequest) (*PruneImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneImages not implemented")
}
func (UnimplementedImageServiceExtendedServer) CleanupImages(context.Context, *CleanupImagesRequest) (*CleanupImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupImages not implemented")
}
func (UnimplementedImageServiceExtendedServer) CreateManifestList(context.Context, *CreateManifestListRequest) (*CreateManifestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManifestList not implemented")
}
func (UnimplementedImageServiceExtendedServer) InspectManifestList(context.Context, *InspectManifestListRequest) (*InspectManifestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectManifestList not implemented")
}
func (UnimplementedImageServiceExtendedServer) LoginRegistry(context.Context, *LoginRegistryRequest) (*LoginRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginRegistry not implemented")
}
func (UnimplementedImageServiceExtendedServer) LogoutRegistry(context.Context, *LogoutRegistryRequest) (*LogoutRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutRegistry not implemented")
}
func (UnimplementedImageServiceExtendedServer) SearchRegistry(context.Context, *SearchRegistryRequest) (*SearchRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRegistry not implemented")
}
func (UnimplementedImageServiceExtendedServer) SignImage(context.Context, *SignImageRequest) (*SignImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) VerifyImage(context.Context, *VerifyImageRequest) (*VerifyImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyImage not implemented")
}
func (UnimplementedImageServiceExtendedServer) BatchImageOperation(context.Context, *BatchImageRequest) (*BatchImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchImageOperation not implemented")
}
func (UnimplementedImageServiceExtendedServer) MonitorImageEvents(*MonitorImageEventsRequest, grpc.ServerStreamingServer[ImageEvent]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorImageEvents not implemented")
}
func (UnimplementedImageServiceExtendedServer) mustEmbedUnimplementedImageServiceExtendedServer() {}
func (UnimplementedImageServiceExtendedServer) testEmbeddedByValue()                              {}

// UnsafeImageServiceExtendedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceExtendedServer will
// result in compilation errors.
type UnsafeImageServiceExtendedServer interface {
	mustEmbedUnimplementedImageServiceExtendedServer()
}

func RegisterImageServiceExtendedServer(s grpc.ServiceRegistrar, srv ImageServiceExtendedServer) {
	// If the following call pancis, it indicates UnimplementedImageServiceExtendedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageServiceExtended_ServiceDesc, srv)
}

func _ImageServiceExtended_PullImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceExtendedServer).PullImage(m, &grpc.GenericServerStream[PullImageRequest, PullImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_PullImageServer = grpc.ServerStreamingServer[PullImageResponse]

func _ImageServiceExtended_PushImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceExtendedServer).PushImage(m, &grpc.GenericServerStream[PushImageRequest, PushImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_PushImageServer = grpc.ServerStreamingServer[PushImageResponse]

func _ImageServiceExtended_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_ListImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_InspectImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).InspectImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_InspectImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).InspectImage(ctx, req.(*InspectImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_RemoveImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).RemoveImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_RemoveImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).RemoveImage(ctx, req.(*RemoveImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_TagImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).TagImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_TagImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).TagImage(ctx, req.(*TagImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_UntagImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UntagImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).UntagImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_UntagImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).UntagImage(ctx, req.(*UntagImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_BuildImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServiceExtendedServer).BuildImage(&grpc.GenericServerStream[BuildImageRequest, BuildImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_BuildImageServer = grpc.BidiStreamingServer[BuildImageRequest, BuildImageResponse]

func _ImageServiceExtended_BuildImageFromContext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildImageFromContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceExtendedServer).BuildImageFromContext(m, &grpc.GenericServerStream[BuildImageFromContextRequest, BuildImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_BuildImageFromContextServer = grpc.ServerStreamingServer[BuildImageResponse]

func _ImageServiceExtended_SaveImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SaveImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceExtendedServer).SaveImage(m, &grpc.GenericServerStream[SaveImageRequest, SaveImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_SaveImageServer = grpc.ServerStreamingServer[SaveImageResponse]

func _ImageServiceExtended_LoadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServiceExtendedServer).LoadImage(&grpc.GenericServerStream[LoadImageRequest, LoadImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_LoadImageServer = grpc.ClientStreamingServer[LoadImageRequest, LoadImageResponse]

func _ImageServiceExtended_ExportImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceExtendedServer).ExportImage(m, &grpc.GenericServerStream[ExportImageRequest, ExportImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_ExportImageServer = grpc.ServerStreamingServer[ExportImageResponse]

func _ImageServiceExtended_ImportImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServiceExtendedServer).ImportImage(&grpc.GenericServerStream[ImportImageRequest, ImportImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_ImportImageServer = grpc.ClientStreamingServer[ImportImageRequest, ImportImageResponse]

func _ImageServiceExtended_ConvertImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConvertImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceExtendedServer).ConvertImage(m, &grpc.GenericServerStream[ConvertImageRequest, ConvertImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_ConvertImageServer = grpc.ServerStreamingServer[ConvertImageResponse]

func _ImageServiceExtended_EncryptImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).EncryptImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_EncryptImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).EncryptImage(ctx, req.(*EncryptImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_DecryptImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).DecryptImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_DecryptImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).DecryptImage(ctx, req.(*DecryptImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_GetImageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).GetImageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_GetImageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).GetImageHistory(ctx, req.(*GetImageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_GetImageLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageLayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).GetImageLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_GetImageLayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).GetImageLayers(ctx, req.(*GetImageLayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_DiffImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).DiffImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_DiffImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).DiffImage(ctx, req.(*DiffImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_PruneImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).PruneImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_PruneImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).PruneImages(ctx, req.(*PruneImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_CleanupImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).CleanupImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_CleanupImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).CleanupImages(ctx, req.(*CleanupImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_CreateManifestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManifestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).CreateManifestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_CreateManifestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).CreateManifestList(ctx, req.(*CreateManifestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_InspectManifestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectManifestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).InspectManifestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_InspectManifestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).InspectManifestList(ctx, req.(*InspectManifestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_LoginRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).LoginRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_LoginRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).LoginRegistry(ctx, req.(*LoginRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_LogoutRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).LogoutRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_LogoutRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).LogoutRegistry(ctx, req.(*LogoutRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_SearchRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).SearchRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_SearchRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).SearchRegistry(ctx, req.(*SearchRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_SignImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).SignImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_SignImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).SignImage(ctx, req.(*SignImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_VerifyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).VerifyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_VerifyImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).VerifyImage(ctx, req.(*VerifyImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_BatchImageOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceExtendedServer).BatchImageOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceExtended_BatchImageOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceExtendedServer).BatchImageOperation(ctx, req.(*BatchImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceExtended_MonitorImageEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorImageEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceExtendedServer).MonitorImageEvents(m, &grpc.GenericServerStream[MonitorImageEventsRequest, ImageEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageServiceExtended_MonitorImageEventsServer = grpc.ServerStreamingServer[ImageEvent]

// ImageServiceExtended_ServiceDesc is the grpc.ServiceDesc for ImageServiceExtended service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageServiceExtended_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nerdctl.v1.ImageServiceExtended",
	HandlerType: (*ImageServiceExtendedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListImages",
			Handler:    _ImageServiceExtended_ListImages_Handler,
		},
		{
			MethodName: "InspectImage",
			Handler:    _ImageServiceExtended_InspectImage_Handler,
		},
		{
			MethodName: "RemoveImage",
			Handler:    _ImageServiceExtended_RemoveImage_Handler,
		},
		{
			MethodName: "TagImage",
			Handler:    _ImageServiceExtended_TagImage_Handler,
		},
		{
			MethodName: "UntagImage",
			Handler:    _ImageServiceExtended_UntagImage_Handler,
		},
		{
			MethodName: "EncryptImage",
			Handler:    _ImageServiceExtended_EncryptImage_Handler,
		},
		{
			MethodName: "DecryptImage",
			Handler:    _ImageServiceExtended_DecryptImage_Handler,
		},
		{
			MethodName: "GetImageHistory",
			Handler:    _ImageServiceExtended_GetImageHistory_Handler,
		},
		{
			MethodName: "GetImageLayers",
			Handler:    _ImageServiceExtended_GetImageLayers_Handler,
		},
		{
			MethodName: "DiffImage",
			Handler:    _ImageServiceExtended_DiffImage_Handler,
		},
		{
			MethodName: "PruneImages",
			Handler:    _ImageServiceExtended_PruneImages_Handler,
		},
		{
			MethodName: "CleanupImages",
			Handler:    _ImageServiceExtended_CleanupImages_Handler,
		},
		{
			MethodName: "CreateManifestList",
			Handler:    _ImageServiceExtended_CreateManifestList_Handler,
		},
		{
			MethodName: "InspectManifestList",
			Handler:    _ImageServiceExtended_InspectManifestList_Handler,
		},
		{
			MethodName: "LoginRegistry",
			Handler:    _ImageServiceExtended_LoginRegistry_Handler,
		},
		{
			MethodName: "LogoutRegistry",
			Handler:    _ImageServiceExtended_LogoutRegistry_Handler,
		},
		{
			MethodName: "SearchRegistry",
			Handler:    _ImageServiceExtended_SearchRegistry_Handler,
		},
		{
			MethodName: "SignImage",
			Handler:    _ImageServiceExtended_SignImage_Handler,
		},
		{
			MethodName: "VerifyImage",
			Handler:    _ImageServiceExtended_VerifyImage_Handler,
		},
		{
			MethodName: "BatchImageOperation",
			Handler:    _ImageServiceExtended_BatchImageOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullImage",
			Handler:       _ImageServiceExtended_PullImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushImage",
			Handler:       _ImageServiceExtended_PushImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildImage",
			Handler:       _ImageServiceExtended_BuildImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BuildImageFromContext",
			Handler:       _ImageServiceExtended_BuildImageFromContext_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveImage",
			Handler:       _ImageServiceExtended_SaveImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoadImage",
			Handler:       _ImageServiceExtended_LoadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExportImage",
			Handler:       _ImageServiceExtended_ExportImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportImage",
			Handler:       _ImageServiceExtended_ImportImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ConvertImage",
			Handler:       _ImageServiceExtended_ConvertImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorImageEvents",
			Handler:       _ImageServiceExtended_MonitorImageEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/image_service_extended.proto",
}
