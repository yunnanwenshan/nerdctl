// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/container_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContainerService_CreateContainer_FullMethodName     = "/nerdctl.v1.ContainerService/CreateContainer"
	ContainerService_StartContainer_FullMethodName      = "/nerdctl.v1.ContainerService/StartContainer"
	ContainerService_StopContainer_FullMethodName       = "/nerdctl.v1.ContainerService/StopContainer"
	ContainerService_RestartContainer_FullMethodName    = "/nerdctl.v1.ContainerService/RestartContainer"
	ContainerService_RemoveContainer_FullMethodName     = "/nerdctl.v1.ContainerService/RemoveContainer"
	ContainerService_KillContainer_FullMethodName       = "/nerdctl.v1.ContainerService/KillContainer"
	ContainerService_PauseContainer_FullMethodName      = "/nerdctl.v1.ContainerService/PauseContainer"
	ContainerService_UnpauseContainer_FullMethodName    = "/nerdctl.v1.ContainerService/UnpauseContainer"
	ContainerService_RunContainer_FullMethodName        = "/nerdctl.v1.ContainerService/RunContainer"
	ContainerService_RunContainerStream_FullMethodName  = "/nerdctl.v1.ContainerService/RunContainerStream"
	ContainerService_ListContainers_FullMethodName      = "/nerdctl.v1.ContainerService/ListContainers"
	ContainerService_InspectContainer_FullMethodName    = "/nerdctl.v1.ContainerService/InspectContainer"
	ContainerService_GetContainerLogs_FullMethodName    = "/nerdctl.v1.ContainerService/GetContainerLogs"
	ContainerService_AttachContainer_FullMethodName     = "/nerdctl.v1.ContainerService/AttachContainer"
	ContainerService_ExecContainer_FullMethodName       = "/nerdctl.v1.ContainerService/ExecContainer"
	ContainerService_ExecContainerStream_FullMethodName = "/nerdctl.v1.ContainerService/ExecContainerStream"
	ContainerService_GetContainerStats_FullMethodName   = "/nerdctl.v1.ContainerService/GetContainerStats"
	ContainerService_WaitContainer_FullMethodName       = "/nerdctl.v1.ContainerService/WaitContainer"
	ContainerService_RenameContainer_FullMethodName     = "/nerdctl.v1.ContainerService/RenameContainer"
	ContainerService_UpdateContainer_FullMethodName     = "/nerdctl.v1.ContainerService/UpdateContainer"
	ContainerService_CopyToContainer_FullMethodName     = "/nerdctl.v1.ContainerService/CopyToContainer"
	ContainerService_CopyFromContainer_FullMethodName   = "/nerdctl.v1.ContainerService/CopyFromContainer"
	ContainerService_ExportContainer_FullMethodName     = "/nerdctl.v1.ContainerService/ExportContainer"
	ContainerService_DiffContainer_FullMethodName       = "/nerdctl.v1.ContainerService/DiffContainer"
	ContainerService_CommitContainer_FullMethodName     = "/nerdctl.v1.ContainerService/CommitContainer"
	ContainerService_PruneContainers_FullMethodName     = "/nerdctl.v1.ContainerService/PruneContainers"
)

// ContainerServiceClient is the client API for ContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Container service for managing container lifecycle
type ContainerServiceClient interface {
	// Create a new container
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	// Start a container
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)
	// Stop a container
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error)
	// Restart a container
	RestartContainer(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*RestartContainerResponse, error)
	// Remove a container
	RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*RemoveContainerResponse, error)
	// Kill a container (send signal)
	KillContainer(ctx context.Context, in *KillContainerRequest, opts ...grpc.CallOption) (*KillContainerResponse, error)
	// Pause a container
	PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*PauseContainerResponse, error)
	// Unpause a container
	UnpauseContainer(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*UnpauseContainerResponse, error)
	// Run a container (create + start)
	RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerResponse, error)
	// Run a container with streaming output
	RunContainerStream(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunContainerStreamResponse], error)
	// List containers
	ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
	// Get container information
	InspectContainer(ctx context.Context, in *InspectContainerRequest, opts ...grpc.CallOption) (*InspectContainerResponse, error)
	// Get container logs
	GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	// Attach to container
	AttachContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AttachContainerRequest, AttachContainerResponse], error)
	// Execute command in container
	ExecContainer(ctx context.Context, in *ExecContainerRequest, opts ...grpc.CallOption) (*ExecContainerResponse, error)
	// Execute command in container with streaming
	ExecContainerStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecContainerStreamRequest, ExecContainerStreamResponse], error)
	// Get container statistics
	GetContainerStats(ctx context.Context, in *GetContainerStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerStats], error)
	// Wait for container to finish
	WaitContainer(ctx context.Context, in *WaitContainerRequest, opts ...grpc.CallOption) (*WaitContainerResponse, error)
	// Rename a container
	RenameContainer(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*RenameContainerResponse, error)
	// Update container resources
	UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error)
	// Copy files/folders between container and host
	CopyToContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CopyToContainerRequest, CopyToContainerResponse], error)
	CopyFromContainer(ctx context.Context, in *CopyFromContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CopyFromContainerResponse], error)
	// Export container as tar archive
	ExportContainer(ctx context.Context, in *ExportContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportContainerResponse], error)
	// Create container diff
	DiffContainer(ctx context.Context, in *DiffContainerRequest, opts ...grpc.CallOption) (*DiffContainerResponse, error)
	// Commit container to new image
	CommitContainer(ctx context.Context, in *CommitContainerRequest, opts ...grpc.CallOption) (*CommitContainerResponse, error)
	// Prune containers
	PruneContainers(ctx context.Context, in *PruneContainersRequest, opts ...grpc.CallOption) (*PruneContainersResponse, error)
}

type containerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerServiceClient(cc grpc.ClientConnInterface) ContainerServiceClient {
	return &containerServiceClient{cc}
}

func (c *containerServiceClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_CreateContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_StartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_StopContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) RestartContainer(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*RestartContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_RestartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*RemoveContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_RemoveContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) KillContainer(ctx context.Context, in *KillContainerRequest, opts ...grpc.CallOption) (*KillContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KillContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_KillContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*PauseContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_PauseContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) UnpauseContainer(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*UnpauseContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpauseContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_UnpauseContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_RunContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) RunContainerStream(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunContainerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[0], ContainerService_RunContainerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunContainerRequest, RunContainerStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_RunContainerStreamClient = grpc.ServerStreamingClient[RunContainerStreamResponse]

func (c *containerServiceClient) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContainersResponse)
	err := c.cc.Invoke(ctx, ContainerService_ListContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) InspectContainer(ctx context.Context, in *InspectContainerRequest, opts ...grpc.CallOption) (*InspectContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InspectContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_InspectContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[1], ContainerService_GetContainerLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetContainerLogsRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_GetContainerLogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *containerServiceClient) AttachContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AttachContainerRequest, AttachContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[2], ContainerService_AttachContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AttachContainerRequest, AttachContainerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_AttachContainerClient = grpc.BidiStreamingClient[AttachContainerRequest, AttachContainerResponse]

func (c *containerServiceClient) ExecContainer(ctx context.Context, in *ExecContainerRequest, opts ...grpc.CallOption) (*ExecContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_ExecContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) ExecContainerStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecContainerStreamRequest, ExecContainerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[3], ContainerService_ExecContainerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecContainerStreamRequest, ExecContainerStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_ExecContainerStreamClient = grpc.BidiStreamingClient[ExecContainerStreamRequest, ExecContainerStreamResponse]

func (c *containerServiceClient) GetContainerStats(ctx context.Context, in *GetContainerStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerStats], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[4], ContainerService_GetContainerStats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetContainerStatsRequest, ContainerStats]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_GetContainerStatsClient = grpc.ServerStreamingClient[ContainerStats]

func (c *containerServiceClient) WaitContainer(ctx context.Context, in *WaitContainerRequest, opts ...grpc.CallOption) (*WaitContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WaitContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_WaitContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) RenameContainer(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*RenameContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_RenameContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_UpdateContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) CopyToContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CopyToContainerRequest, CopyToContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[5], ContainerService_CopyToContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CopyToContainerRequest, CopyToContainerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_CopyToContainerClient = grpc.ClientStreamingClient[CopyToContainerRequest, CopyToContainerResponse]

func (c *containerServiceClient) CopyFromContainer(ctx context.Context, in *CopyFromContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CopyFromContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[6], ContainerService_CopyFromContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CopyFromContainerRequest, CopyFromContainerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_CopyFromContainerClient = grpc.ServerStreamingClient[CopyFromContainerResponse]

func (c *containerServiceClient) ExportContainer(ctx context.Context, in *ExportContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[7], ContainerService_ExportContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportContainerRequest, ExportContainerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_ExportContainerClient = grpc.ServerStreamingClient[ExportContainerResponse]

func (c *containerServiceClient) DiffContainer(ctx context.Context, in *DiffContainerRequest, opts ...grpc.CallOption) (*DiffContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiffContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_DiffContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) CommitContainer(ctx context.Context, in *CommitContainerRequest, opts ...grpc.CallOption) (*CommitContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_CommitContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) PruneContainers(ctx context.Context, in *PruneContainersRequest, opts ...grpc.CallOption) (*PruneContainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruneContainersResponse)
	err := c.cc.Invoke(ctx, ContainerService_PruneContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerServiceServer is the server API for ContainerService service.
// All implementations must embed UnimplementedContainerServiceServer
// for forward compatibility.
//
// Container service for managing container lifecycle
type ContainerServiceServer interface {
	// Create a new container
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	// Start a container
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	// Stop a container
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	// Restart a container
	RestartContainer(context.Context, *RestartContainerRequest) (*RestartContainerResponse, error)
	// Remove a container
	RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error)
	// Kill a container (send signal)
	KillContainer(context.Context, *KillContainerRequest) (*KillContainerResponse, error)
	// Pause a container
	PauseContainer(context.Context, *PauseContainerRequest) (*PauseContainerResponse, error)
	// Unpause a container
	UnpauseContainer(context.Context, *UnpauseContainerRequest) (*UnpauseContainerResponse, error)
	// Run a container (create + start)
	RunContainer(context.Context, *RunContainerRequest) (*RunContainerResponse, error)
	// Run a container with streaming output
	RunContainerStream(*RunContainerRequest, grpc.ServerStreamingServer[RunContainerStreamResponse]) error
	// List containers
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	// Get container information
	InspectContainer(context.Context, *InspectContainerRequest) (*InspectContainerResponse, error)
	// Get container logs
	GetContainerLogs(*GetContainerLogsRequest, grpc.ServerStreamingServer[LogEntry]) error
	// Attach to container
	AttachContainer(grpc.BidiStreamingServer[AttachContainerRequest, AttachContainerResponse]) error
	// Execute command in container
	ExecContainer(context.Context, *ExecContainerRequest) (*ExecContainerResponse, error)
	// Execute command in container with streaming
	ExecContainerStream(grpc.BidiStreamingServer[ExecContainerStreamRequest, ExecContainerStreamResponse]) error
	// Get container statistics
	GetContainerStats(*GetContainerStatsRequest, grpc.ServerStreamingServer[ContainerStats]) error
	// Wait for container to finish
	WaitContainer(context.Context, *WaitContainerRequest) (*WaitContainerResponse, error)
	// Rename a container
	RenameContainer(context.Context, *RenameContainerRequest) (*RenameContainerResponse, error)
	// Update container resources
	UpdateContainer(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error)
	// Copy files/folders between container and host
	CopyToContainer(grpc.ClientStreamingServer[CopyToContainerRequest, CopyToContainerResponse]) error
	CopyFromContainer(*CopyFromContainerRequest, grpc.ServerStreamingServer[CopyFromContainerResponse]) error
	// Export container as tar archive
	ExportContainer(*ExportContainerRequest, grpc.ServerStreamingServer[ExportContainerResponse]) error
	// Create container diff
	DiffContainer(context.Context, *DiffContainerRequest) (*DiffContainerResponse, error)
	// Commit container to new image
	CommitContainer(context.Context, *CommitContainerRequest) (*CommitContainerResponse, error)
	// Prune containers
	PruneContainers(context.Context, *PruneContainersRequest) (*PruneContainersResponse, error)
	mustEmbedUnimplementedContainerServiceServer()
}

// UnimplementedContainerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContainerServiceServer struct{}

func (UnimplementedContainerServiceServer) CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedContainerServiceServer) StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedContainerServiceServer) StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedContainerServiceServer) RestartContainer(context.Context, *RestartContainerRequest) (*RestartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartContainer not implemented")
}
func (UnimplementedContainerServiceServer) RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContainer not implemented")
}
func (UnimplementedContainerServiceServer) KillContainer(context.Context, *KillContainerRequest) (*KillContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillContainer not implemented")
}
func (UnimplementedContainerServiceServer) PauseContainer(context.Context, *PauseContainerRequest) (*PauseContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseContainer not implemented")
}
func (UnimplementedContainerServiceServer) UnpauseContainer(context.Context, *UnpauseContainerRequest) (*UnpauseContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseContainer not implemented")
}
func (UnimplementedContainerServiceServer) RunContainer(context.Context, *RunContainerRequest) (*RunContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunContainer not implemented")
}
func (UnimplementedContainerServiceServer) RunContainerStream(*RunContainerRequest, grpc.ServerStreamingServer[RunContainerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RunContainerStream not implemented")
}
func (UnimplementedContainerServiceServer) ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (UnimplementedContainerServiceServer) InspectContainer(context.Context, *InspectContainerRequest) (*InspectContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectContainer not implemented")
}
func (UnimplementedContainerServiceServer) GetContainerLogs(*GetContainerLogsRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method GetContainerLogs not implemented")
}
func (UnimplementedContainerServiceServer) AttachContainer(grpc.BidiStreamingServer[AttachContainerRequest, AttachContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AttachContainer not implemented")
}
func (UnimplementedContainerServiceServer) ExecContainer(context.Context, *ExecContainerRequest) (*ExecContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecContainer not implemented")
}
func (UnimplementedContainerServiceServer) ExecContainerStream(grpc.BidiStreamingServer[ExecContainerStreamRequest, ExecContainerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecContainerStream not implemented")
}
func (UnimplementedContainerServiceServer) GetContainerStats(*GetContainerStatsRequest, grpc.ServerStreamingServer[ContainerStats]) error {
	return status.Errorf(codes.Unimplemented, "method GetContainerStats not implemented")
}
func (UnimplementedContainerServiceServer) WaitContainer(context.Context, *WaitContainerRequest) (*WaitContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitContainer not implemented")
}
func (UnimplementedContainerServiceServer) RenameContainer(context.Context, *RenameContainerRequest) (*RenameContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameContainer not implemented")
}
func (UnimplementedContainerServiceServer) UpdateContainer(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContainer not implemented")
}
func (UnimplementedContainerServiceServer) CopyToContainer(grpc.ClientStreamingServer[CopyToContainerRequest, CopyToContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CopyToContainer not implemented")
}
func (UnimplementedContainerServiceServer) CopyFromContainer(*CopyFromContainerRequest, grpc.ServerStreamingServer[CopyFromContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CopyFromContainer not implemented")
}
func (UnimplementedContainerServiceServer) ExportContainer(*ExportContainerRequest, grpc.ServerStreamingServer[ExportContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExportContainer not implemented")
}
func (UnimplementedContainerServiceServer) DiffContainer(context.Context, *DiffContainerRequest) (*DiffContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffContainer not implemented")
}
func (UnimplementedContainerServiceServer) CommitContainer(context.Context, *CommitContainerRequest) (*CommitContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitContainer not implemented")
}
func (UnimplementedContainerServiceServer) PruneContainers(context.Context, *PruneContainersRequest) (*PruneContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneContainers not implemented")
}
func (UnimplementedContainerServiceServer) mustEmbedUnimplementedContainerServiceServer() {}
func (UnimplementedContainerServiceServer) testEmbeddedByValue()                          {}

// UnsafeContainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerServiceServer will
// result in compilation errors.
type UnsafeContainerServiceServer interface {
	mustEmbedUnimplementedContainerServiceServer()
}

func RegisterContainerServiceServer(s grpc.ServiceRegistrar, srv ContainerServiceServer) {
	// If the following call pancis, it indicates UnimplementedContainerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContainerService_ServiceDesc, srv)
}

func _ContainerService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_CreateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_StartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_StopContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_RestartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).RestartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_RestartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).RestartContainer(ctx, req.(*RestartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_RemoveContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).RemoveContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_RemoveContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).RemoveContainer(ctx, req.(*RemoveContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_KillContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).KillContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_KillContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).KillContainer(ctx, req.(*KillContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_PauseContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).PauseContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_PauseContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).PauseContainer(ctx, req.(*PauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_UnpauseContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).UnpauseContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_UnpauseContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).UnpauseContainer(ctx, req.(*UnpauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_RunContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).RunContainer(ctx, req.(*RunContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_RunContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunContainerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).RunContainerStream(m, &grpc.GenericServerStream[RunContainerRequest, RunContainerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_RunContainerStreamServer = grpc.ServerStreamingServer[RunContainerStreamResponse]

func _ContainerService_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_ListContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).ListContainers(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_InspectContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).InspectContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_InspectContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).InspectContainer(ctx, req.(*InspectContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_GetContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).GetContainerLogs(m, &grpc.GenericServerStream[GetContainerLogsRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_GetContainerLogsServer = grpc.ServerStreamingServer[LogEntry]

func _ContainerService_AttachContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).AttachContainer(&grpc.GenericServerStream[AttachContainerRequest, AttachContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_AttachContainerServer = grpc.BidiStreamingServer[AttachContainerRequest, AttachContainerResponse]

func _ContainerService_ExecContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).ExecContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_ExecContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).ExecContainer(ctx, req.(*ExecContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_ExecContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).ExecContainerStream(&grpc.GenericServerStream[ExecContainerStreamRequest, ExecContainerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_ExecContainerStreamServer = grpc.BidiStreamingServer[ExecContainerStreamRequest, ExecContainerStreamResponse]

func _ContainerService_GetContainerStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContainerStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).GetContainerStats(m, &grpc.GenericServerStream[GetContainerStatsRequest, ContainerStats]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_GetContainerStatsServer = grpc.ServerStreamingServer[ContainerStats]

func _ContainerService_WaitContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).WaitContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_WaitContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).WaitContainer(ctx, req.(*WaitContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_RenameContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).RenameContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_RenameContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).RenameContainer(ctx, req.(*RenameContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_UpdateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).UpdateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_UpdateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).UpdateContainer(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_CopyToContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceServer).CopyToContainer(&grpc.GenericServerStream[CopyToContainerRequest, CopyToContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_CopyToContainerServer = grpc.ClientStreamingServer[CopyToContainerRequest, CopyToContainerResponse]

func _ContainerService_CopyFromContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFromContainerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).CopyFromContainer(m, &grpc.GenericServerStream[CopyFromContainerRequest, CopyFromContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_CopyFromContainerServer = grpc.ServerStreamingServer[CopyFromContainerResponse]

func _ContainerService_ExportContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportContainerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).ExportContainer(m, &grpc.GenericServerStream[ExportContainerRequest, ExportContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_ExportContainerServer = grpc.ServerStreamingServer[ExportContainerResponse]

func _ContainerService_DiffContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).DiffContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_DiffContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).DiffContainer(ctx, req.(*DiffContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_CommitContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).CommitContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_CommitContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).CommitContainer(ctx, req.(*CommitContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_PruneContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).PruneContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_PruneContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).PruneContainers(ctx, req.(*PruneContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerService_ServiceDesc is the grpc.ServiceDesc for ContainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nerdctl.v1.ContainerService",
	HandlerType: (*ContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _ContainerService_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _ContainerService_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _ContainerService_StopContainer_Handler,
		},
		{
			MethodName: "RestartContainer",
			Handler:    _ContainerService_RestartContainer_Handler,
		},
		{
			MethodName: "RemoveContainer",
			Handler:    _ContainerService_RemoveContainer_Handler,
		},
		{
			MethodName: "KillContainer",
			Handler:    _ContainerService_KillContainer_Handler,
		},
		{
			MethodName: "PauseContainer",
			Handler:    _ContainerService_PauseContainer_Handler,
		},
		{
			MethodName: "UnpauseContainer",
			Handler:    _ContainerService_UnpauseContainer_Handler,
		},
		{
			MethodName: "RunContainer",
			Handler:    _ContainerService_RunContainer_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _ContainerService_ListContainers_Handler,
		},
		{
			MethodName: "InspectContainer",
			Handler:    _ContainerService_InspectContainer_Handler,
		},
		{
			MethodName: "ExecContainer",
			Handler:    _ContainerService_ExecContainer_Handler,
		},
		{
			MethodName: "WaitContainer",
			Handler:    _ContainerService_WaitContainer_Handler,
		},
		{
			MethodName: "RenameContainer",
			Handler:    _ContainerService_RenameContainer_Handler,
		},
		{
			MethodName: "UpdateContainer",
			Handler:    _ContainerService_UpdateContainer_Handler,
		},
		{
			MethodName: "DiffContainer",
			Handler:    _ContainerService_DiffContainer_Handler,
		},
		{
			MethodName: "CommitContainer",
			Handler:    _ContainerService_CommitContainer_Handler,
		},
		{
			MethodName: "PruneContainers",
			Handler:    _ContainerService_PruneContainers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunContainerStream",
			Handler:       _ContainerService_RunContainerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContainerLogs",
			Handler:       _ContainerService_GetContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AttachContainer",
			Handler:       _ContainerService_AttachContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecContainerStream",
			Handler:       _ContainerService_ExecContainerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetContainerStats",
			Handler:       _ContainerService_GetContainerStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CopyToContainer",
			Handler:       _ContainerService_CopyToContainer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyFromContainer",
			Handler:       _ContainerService_CopyFromContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportContainer",
			Handler:       _ContainerService_ExportContainer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/container_service.proto",
}
