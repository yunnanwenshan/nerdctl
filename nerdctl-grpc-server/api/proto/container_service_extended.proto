syntax = "proto3";

package nerdctl.v1;

option go_package = "github.com/containerd/nerdctl-grpc-server/api/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "api/proto/common.proto";
import "api/proto/container_service.proto";

// Extended Container service for comprehensive container management
service ContainerServiceExtended {
  // Basic container lifecycle operations
  rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse);
  rpc StartContainer(StartContainerRequest) returns (StartContainerResponse);
  rpc StopContainer(StopContainerRequest) returns (StopContainerResponse);
  rpc RestartContainer(RestartContainerRequest) returns (RestartContainerResponse);
  rpc RemoveContainer(RemoveContainerRequest) returns (RemoveContainerResponse);
  rpc KillContainer(KillContainerRequest) returns (KillContainerResponse);
  rpc PauseContainer(PauseContainerRequest) returns (PauseContainerResponse);
  rpc UnpauseContainer(UnpauseContainerRequest) returns (UnpauseContainerResponse);
  
  // Advanced container operations
  rpc RunContainer(RunContainerRequest) returns (RunContainerResponse);
  rpc RunContainerStream(RunContainerRequest) returns (stream RunContainerStreamResponse);
  rpc ListContainers(ListContainersRequest) returns (ListContainersResponse);
  rpc InspectContainer(InspectContainerRequest) returns (InspectContainerResponse);
  rpc GetContainerLogs(GetContainerLogsRequest) returns (stream LogEntry);
  rpc AttachContainer(stream AttachContainerRequest) returns (stream AttachContainerResponse);
  rpc ExecContainer(ExecContainerRequest) returns (ExecContainerResponse);
  rpc ExecContainerStream(stream ExecContainerStreamRequest) returns (stream ExecContainerStreamResponse);
  rpc GetContainerStats(GetContainerStatsRequest) returns (stream ContainerStats);
  rpc WaitContainer(WaitContainerRequest) returns (WaitContainerResponse);
  rpc RenameContainer(RenameContainerRequest) returns (RenameContainerResponse);
  rpc UpdateContainer(UpdateContainerRequest) returns (UpdateContainerResponse);
  
  // File operations
  rpc CopyToContainer(stream CopyToContainerRequest) returns (CopyToContainerResponse);
  rpc CopyFromContainer(CopyFromContainerRequest) returns (stream CopyFromContainerResponse);
  
  // Container maintenance operations
  rpc ExportContainer(ExportContainerRequest) returns (stream ExportContainerResponse);
  rpc DiffContainer(DiffContainerRequest) returns (DiffContainerResponse);
  rpc CommitContainer(CommitContainerRequest) returns (CommitContainerResponse);
  rpc PruneContainers(PruneContainersRequest) returns (PruneContainersResponse);
  
  // Advanced monitoring and control
  rpc GetContainerTop(GetContainerTopRequest) returns (GetContainerTopResponse);
  rpc GetContainerPort(GetContainerPortRequest) returns (GetContainerPortResponse);
  rpc HealthCheckContainer(HealthCheckContainerRequest) returns (HealthCheckContainerResponse);
  
  // Batch operations
  rpc BatchContainerOperation(BatchContainerRequest) returns (BatchContainerResponse);
  rpc MonitorContainers(MonitorContainersRequest) returns (stream ContainerEvent);
}

// Enhanced container configuration
message ContainerConfig {
  // Basic configuration
  string image = 1;
  string name = 2;
  repeated string command = 3;
  repeated string args = 4;
  repeated string env = 5;
  string working_dir = 6;
  map<string, string> labels = 7;
  string user = 8;
  
  // Network configuration
  NetworkConfig network_config = 9;
  repeated string dns = 10;
  repeated string dns_search = 11;
  repeated string dns_opts = 12;
  string hostname = 13;
  string domainname = 14;
  repeated string extra_hosts = 15;
  
  // Storage configuration
  repeated VolumeMount mounts = 16;
  repeated string volumes_from = 17;
  repeated string tmpfs = 18;
  string shm_size = 19;
  
  // Resource configuration
  ResourceLimits resources = 20;
  string cgroup_parent = 21;
  repeated string ulimit = 22;
  repeated string sysctl = 23;
  
  // Security configuration
  SecurityOptions security = 24;
  repeated string cap_add = 25;
  repeated string cap_drop = 26;
  bool privileged = 27;
  string user_ns_mode = 28;
  
  // Process configuration
  bool tty = 29;
  bool stdin = 30;
  bool init = 31;
  string init_binary = 32;
  string pid_mode = 33;
  string ipc_mode = 34;
  string uts_mode = 35;
  
  // Device configuration
  repeated string device = 36;
  repeated string device_cgroup_rule = 37;
  
  // Health and logging
  HealthCheck health_check = 38;
  LogConfig log_config = 39;
  
  // Runtime configuration
  RestartPolicy restart_policy = 40;
  Platform platform = 41;
  string runtime = 42;
  map<string, string> runtime_options = 43;
  
  // Stop configuration
  string stop_signal = 44;
  int32 stop_timeout = 45;
  
  // Advanced options
  bool auto_remove = 46;
  bool read_only = 47;
  string isolation = 48;
  repeated string group_add = 49;
  bool no_new_privileges = 50;
  string apparmor_profile = 51;
  string seccomp_profile = 52;
}

// Extended container port information
message Port {
  string ip = 1;
  int32 private_port = 2;
  int32 public_port = 3;
  string type = 4;
}

// Network settings for containers
message NetworkSettings {
  string bridge = 1;
  string sandbox_id = 2;
  bool hairpin_mode = 3;
  string link_local_ipv6_address = 4;
  int32 link_local_ipv6_prefix_len = 5;
  map<string, EndpointSettings> networks = 6;
  string sandbox_key = 7;
}

message EndpointSettings {
  string ipam_config = 1;
  repeated string links = 2;
  repeated string aliases = 3;
  string network_id = 4;
  string endpoint_id = 5;
  string gateway = 6;
  string ip_address = 7;
  int32 ip_prefix_len = 8;
  string ipv6_gateway = 9;
  string global_ipv6_address = 10;
  int32 global_ipv6_prefix_len = 11;
  string mac_address = 12;
  map<string, string> driver_opts = 13;
}

// Mount point information
message MountPoint {
  string type = 1;
  string name = 2;
  string source = 3;
  string destination = 4;
  string driver = 5;
  string mode = 6;
  bool rw = 7;
  string propagation = 8;
}

// Container statistics
message ContainerStatsDetail {
  string container_id = 1;
  string name = 2;
  CPUStats cpu_stats = 3;
  MemoryStats memory_stats = 4;
  NetworkStats network_stats = 5;
  BlockIOStats blkio_stats = 6;
  PidsStats pids_stats = 7;
  google.protobuf.Timestamp timestamp = 8;
  string preread = 9;
  string read = 10;
}

message CPUStats {
  CPUUsage cpu_usage = 1;
  uint64 system_cpu_usage = 2;
  uint64 online_cpus = 3;
  ThrottlingData throttling_data = 4;
}

message CPUUsage {
  uint64 total_usage = 1;
  repeated uint64 percpu_usage = 2;
  uint64 usage_in_kernelmode = 3;
  uint64 usage_in_usermode = 4;
}

message ThrottlingData {
  uint64 periods = 1;
  uint64 throttled_periods = 2;
  uint64 throttled_time = 3;
}

message MemoryStats {
  uint64 usage = 1;
  uint64 max_usage = 2;
  uint64 limit = 3;
  MemoryDetails stats = 4;
  uint64 fail_cnt = 5;
}

message MemoryDetails {
  uint64 active_anon = 1;
  uint64 active_file = 2;
  uint64 cache = 3;
  uint64 dirty = 4;
  uint64 hierarchical_memory_limit = 5;
  uint64 hierarchical_memsw_limit = 6;
  uint64 inactive_anon = 7;
  uint64 inactive_file = 8;
  uint64 mapped_file = 9;
  uint64 pgfault = 10;
  uint64 pgmajfault = 11;
  uint64 pgpgin = 12;
  uint64 pgpgout = 13;
  uint64 rss = 14;
  uint64 rss_huge = 15;
  uint64 total_active_anon = 16;
  uint64 total_active_file = 17;
  uint64 total_cache = 18;
  uint64 total_dirty = 19;
  uint64 total_inactive_anon = 20;
  uint64 total_inactive_file = 21;
  uint64 total_mapped_file = 22;
  uint64 total_pgfault = 23;
  uint64 total_pgmajfault = 24;
  uint64 total_pgpgin = 25;
  uint64 total_pgpgout = 26;
  uint64 total_rss = 27;
  uint64 total_rss_huge = 28;
  uint64 total_unevictable = 29;
  uint64 total_writeback = 30;
  uint64 unevictable = 31;
  uint64 writeback = 32;
}

message NetworkStats {
  map<string, InterfaceStats> interfaces = 1;
}

message InterfaceStats {
  uint64 rx_bytes = 1;
  uint64 rx_packets = 2;
  uint64 rx_errors = 3;
  uint64 rx_dropped = 4;
  uint64 tx_bytes = 5;
  uint64 tx_packets = 6;
  uint64 tx_errors = 7;
  uint64 tx_dropped = 8;
}

message BlockIOStats {
  repeated BlkioStatEntry io_service_bytes_recursive = 1;
  repeated BlkioStatEntry io_serviced_recursive = 2;
  repeated BlkioStatEntry io_queued_recursive = 3;
  repeated BlkioStatEntry io_service_time_recursive = 4;
  repeated BlkioStatEntry io_wait_time_recursive = 5;
  repeated BlkioStatEntry io_merged_recursive = 6;
  repeated BlkioStatEntry io_time_recursive = 7;
  repeated BlkioStatEntry sectors_recursive = 8;
}

message BlkioStatEntry {
  uint64 major = 1;
  uint64 minor = 2;
  string op = 3;
  uint64 value = 4;
}

message PidsStats {
  uint64 current = 1;
  uint64 limit = 2;
}

// Container process information
message ContainerTopRequest {
  string container_id = 1;
  string namespace = 2;
  string ps_args = 3;
}

message ContainerTopInfo {
  repeated string titles = 1;
  repeated ProcessInfo processes = 2;
}

message ProcessInfo {
  repeated string values = 1;
}

// Container port information
message ContainerPortInfo {
  string private_port = 1;
  string public_port = 2;
  string type = 3;
  string ip = 4;
}

// Container health check
message ContainerHealthInfo {
  string status = 1;
  int32 failing_streak = 2;
  repeated HealthCheckResult log = 3;
}

message HealthCheckResult {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
  int32 exit_code = 3;
  string output = 4;
}

// Batch operations
message BatchContainerRequest {
  string operation = 1;  // start, stop, remove, etc.
  repeated string container_ids = 2;
  string namespace = 3;
  map<string, string> options = 4;
  bool continue_on_error = 5;
}

message BatchContainerResponse {
  repeated BatchOperationResult results = 1;
  int32 success_count = 2;
  int32 error_count = 3;
}

message BatchOperationResult {
  string container_id = 1;
  bool success = 2;
  string error = 3;
  string warning = 4;
}

// Container events
message ContainerEvent {
  string type = 1;          // create, start, stop, die, destroy, etc.
  string container_id = 2;
  string container_name = 3;
  string image = 4;
  google.protobuf.Timestamp timestamp = 5;
  map<string, string> attributes = 6;
}

message MonitorContainersRequest {
  repeated string container_ids = 1;  // Empty = all containers
  repeated string event_types = 2;    // Empty = all events
  string namespace = 3;
  google.protobuf.Timestamp since = 4;
  google.protobuf.Timestamp until = 5;
  map<string, string> filters = 6;
}

// Request/Response definitions for new operations
message GetContainerTopRequest {
  string container_id = 1;
  string namespace = 2;
  string ps_args = 3;
}

message GetContainerTopResponse {
  ContainerTopInfo top_info = 1;
}

message GetContainerPortRequest {
  string container_id = 1;
  string namespace = 2;
  string private_port = 3;
}

message GetContainerPortResponse {
  repeated ContainerPortInfo ports = 1;
}

message HealthCheckContainerRequest {
  string container_id = 1;
  string namespace = 2;
}

message HealthCheckContainerResponse {
  ContainerHealthInfo health_info = 1;
}

// Enhanced create request with full configuration
message CreateContainerRequestExtended {
  ContainerConfig config = 1;
  string namespace = 2;
  bool dry_run = 3;
}

message CreateContainerResponseExtended {
  string container_id = 1;
  repeated string warnings = 2;
  ContainerInfo container_info = 3;
}

// Enhanced run request
message RunContainerRequestExtended {
  ContainerConfig config = 1;
  string namespace = 2;
  bool detach = 3;
  string detach_keys = 4;
  bool rm = 5;
  repeated string attach = 6;
  map<string, string> env_file = 7;
}

message RunContainerResponseExtended {
  string container_id = 1;
  int32 exit_code = 2;
  repeated string warnings = 3;
  ContainerInfo container_info = 4;
}

// Enhanced list request
message ListContainersRequestExtended {
  string namespace = 1;
  bool all = 2;
  int32 last = 3;
  bool latest = 4;
  bool no_trunc = 5;
  bool quiet = 6;
  bool size = 7;
  map<string, string> filters = 8;
  string format = 9;
}

message ListContainersResponseExtended {
  repeated ContainerInfo containers = 1;
  int32 total_count = 2;
}

// Enhanced inspect response
message InspectContainerResponseExtended {
  ContainerInfo container_info = 1;
  google.protobuf.Struct raw_data = 2;  // Raw JSON data from nerdctl
}