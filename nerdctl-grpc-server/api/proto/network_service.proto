syntax = "proto3";

package nerdctl.v1;

option go_package = "github.com/containerd/nerdctl-grpc-server/api/proto";

import "google/protobuf/timestamp.proto";
import "api/proto/common.proto";

// Network service for managing container networks
service NetworkService {
  // Create a network
  rpc CreateNetwork(CreateNetworkRequest) returns (CreateNetworkResponse);
  
  // Remove a network
  rpc RemoveNetwork(RemoveNetworkRequest) returns (RemoveNetworkResponse);
  
  // List networks
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  
  // Inspect network
  rpc InspectNetwork(InspectNetworkRequest) returns (InspectNetworkResponse);
  
  // Connect container to network
  rpc ConnectNetwork(ConnectNetworkRequest) returns (ConnectNetworkResponse);
  
  // Disconnect container from network
  rpc DisconnectNetwork(DisconnectNetworkRequest) returns (DisconnectNetworkResponse);
  
  // Prune unused networks
  rpc PruneNetworks(PruneNetworksRequest) returns (PruneNetworksResponse);
}

// Network information
message NetworkInfo {
  string id = 1;                              // Network ID
  string name = 2;                            // Network name
  string driver = 3;                          // Network driver
  string scope = 4;                           // Network scope
  map<string, string> options = 5;           // Driver options
  repeated IPAMConfig ipam = 6;               // IPAM configuration
  bool internal = 7;                          // Internal network
  bool attachable = 8;                        // Attachable to containers
  bool ingress = 9;                           // Ingress network
  google.protobuf.Timestamp created = 10;    // Creation time
  map<string, string> labels = 11;           // Network labels
  repeated NetworkContainer containers = 12;  // Connected containers
}

message IPAMConfig {
  string subnet = 1;                          // Subnet CIDR
  string gateway = 2;                         // Gateway IP
  string ip_range = 3;                        // IP range
  map<string, string> aux_addresses = 4;     // Auxiliary addresses
  map<string, string> options = 5;           // IPAM options
}

message NetworkContainer {
  string container_id = 1;                    // Container ID
  string name = 2;                            // Container name
  string ipv4_address = 3;                    // IPv4 address
  string ipv6_address = 4;                    // IPv6 address
  string mac_address = 5;                     // MAC address
  map<string, string> endpoints = 6;         // Network endpoints
}

// Create network request/response
message CreateNetworkRequest {
  string name = 1;                            // Network name
  string namespace = 2;                       // Containerd namespace
  string driver = 3;                          // Network driver (bridge, macvlan, etc.)
  repeated IPAMConfig ipam = 4;               // IPAM configuration
  bool internal = 5;                          // Internal network
  bool attachable = 6;                        // Attachable to containers
  bool ingress = 7;                           // Ingress network
  bool ipv6 = 8;                              // Enable IPv6
  map<string, string> options = 9;           // Driver options
  map<string, string> labels = 10;           // Network labels
  repeated string aux_addresses = 11;        // Auxiliary addresses
  string config_file = 12;                   // CNI config file path
}

message CreateNetworkResponse {
  string network_id = 1;                      // Created network ID
  repeated string warnings = 2;               // Warning messages
}

// Remove network request/response
message RemoveNetworkRequest {
  repeated string networks = 1;               // Networks to remove
  string namespace = 2;                       // Containerd namespace
  bool force = 3;                             // Force removal
}

message RemoveNetworkResponse {
  repeated string removed = 1;                // Removed network IDs
}

// List networks request/response
message ListNetworksRequest {
  string namespace = 1;                       // Containerd namespace
  map<string, string> filters = 2;           // Filters (name, driver, etc.)
  bool quiet = 3;                             // Only show network IDs
  string format = 4;                          // Output format
  bool no_trunc = 5;                          // Don't truncate output
}

message ListNetworksResponse {
  repeated NetworkInfo networks = 1;          // Network list
}

// Inspect network request/response
message InspectNetworkRequest {
  string network = 1;                         // Network ID or name
  string namespace = 2;                       // Containerd namespace
  string format = 3;                          // Output format
}

message InspectNetworkResponse {
  NetworkInfo network = 1;                    // Network information
}

// Connect network request/response
message ConnectNetworkRequest {
  string network = 1;                         // Network ID or name
  string container = 2;                       // Container ID or name
  string namespace = 3;                       // Containerd namespace
  NetworkEndpointConfig endpoint_config = 4; // Endpoint configuration
}

message NetworkEndpointConfig {
  string ipv4_address = 1;                    // IPv4 address
  string ipv6_address = 2;                    // IPv6 address
  repeated string aliases = 3;                // Network aliases
  repeated string links = 4;                  // Container links
  map<string, string> driver_opts = 5;       // Driver options
  string mac_address = 6;                     // MAC address
}

message ConnectNetworkResponse {
  bool connected = 1;                         // Whether container was connected
}

// Disconnect network request/response
message DisconnectNetworkRequest {
  string network = 1;                         // Network ID or name
  string container = 2;                       // Container ID or name
  string namespace = 3;                       // Containerd namespace
  bool force = 4;                             // Force disconnection
}

message DisconnectNetworkResponse {
  bool disconnected = 1;                      // Whether container was disconnected
}

// Prune networks request/response
message PruneNetworksRequest {
  string namespace = 1;                       // Containerd namespace
  map<string, string> filters = 2;           // Filters for pruning
}

message PrunedNetwork {
  string network_id = 1;                      // Pruned network ID
  string name = 2;                            // Network name
}

message PruneNetworksResponse {
  repeated PrunedNetwork pruned = 1;          // Pruned networks
}