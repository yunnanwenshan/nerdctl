syntax = "proto3";

package nerdctl.v1;

option go_package = "github.com/containerd/nerdctl-grpc-server/api/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "api/proto/common.proto";

// Extended Image service for comprehensive image management
service ImageServiceExtended {
  // Basic image operations
  rpc PullImage(PullImageRequest) returns (stream PullImageResponse);
  rpc PushImage(PushImageRequest) returns (stream PushImageResponse);
  rpc ListImages(ListImagesRequest) returns (ListImagesResponse);
  rpc InspectImage(InspectImageRequest) returns (InspectImageResponse);
  rpc RemoveImage(RemoveImageRequest) returns (RemoveImageResponse);
  rpc TagImage(TagImageRequest) returns (TagImageResponse);
  rpc UntagImage(UntagImageRequest) returns (UntagImageResponse);
  
  // Image build operations
  rpc BuildImage(stream BuildImageRequest) returns (stream BuildImageResponse);
  rpc BuildImageFromContext(BuildImageFromContextRequest) returns (stream BuildImageResponse);
  
  // Image transfer operations
  rpc SaveImage(SaveImageRequest) returns (stream SaveImageResponse);
  rpc LoadImage(stream LoadImageRequest) returns (LoadImageResponse);
  rpc ExportImage(ExportImageRequest) returns (stream ExportImageResponse);
  rpc ImportImage(stream ImportImageRequest) returns (ImportImageResponse);
  
  // Image conversion and encryption
  rpc ConvertImage(ConvertImageRequest) returns (stream ConvertImageResponse);
  rpc EncryptImage(EncryptImageRequest) returns (EncryptImageResponse);
  rpc DecryptImage(DecryptImageRequest) returns (DecryptImageResponse);
  
  // Image history and analysis
  rpc GetImageHistory(GetImageHistoryRequest) returns (GetImageHistoryResponse);
  rpc GetImageLayers(GetImageLayersRequest) returns (GetImageLayersResponse);
  rpc DiffImage(DiffImageRequest) returns (DiffImageResponse);
  
  // Image maintenance
  rpc PruneImages(PruneImagesRequest) returns (PruneImagesResponse);
  rpc CleanupImages(CleanupImagesRequest) returns (CleanupImagesResponse);
  
  // Multi-platform image operations
  rpc CreateManifestList(CreateManifestListRequest) returns (CreateManifestListResponse);
  rpc InspectManifestList(InspectManifestListRequest) returns (InspectManifestListResponse);
  
  // Registry operations
  rpc LoginRegistry(LoginRegistryRequest) returns (LoginRegistryResponse);
  rpc LogoutRegistry(LogoutRegistryRequest) returns (LogoutRegistryResponse);
  rpc SearchRegistry(SearchRegistryRequest) returns (SearchRegistryResponse);
  
  // Image signing and verification
  rpc SignImage(SignImageRequest) returns (SignImageResponse);
  rpc VerifyImage(VerifyImageRequest) returns (VerifyImageResponse);
  
  // Batch operations
  rpc BatchImageOperation(BatchImageRequest) returns (BatchImageResponse);
  
  // Image events
  rpc MonitorImageEvents(MonitorImageEventsRequest) returns (stream ImageEvent);
}

// Extended image information with detailed metadata
message ExtendedImageInfo {
  string id = 1;
  string digest = 2;
  repeated string repo_tags = 3;
  repeated string repo_digests = 4;
  string parent_id = 5;
  string comment = 6;
  google.protobuf.Timestamp created = 7;
  string container = 8;
  string author = 9;
  string architecture = 10;
  string os = 11;
  string os_version = 12;
  int64 size = 13;
  int64 virtual_size = 14;
  int64 shared_size = 15;
  map<string, string> labels = 16;
  ImageConfig config = 17;
  RootFS root_fs = 18;
  repeated HistoryEntry history = 19;
  ManifestInfo manifest = 20;
  map<string, string> annotations = 21;
  Platform platform = 22;
}

// Image configuration
message ImageConfig {
  string user = 1;
  repeated string exposed_ports = 2;
  repeated string env = 3;
  repeated string entrypoint = 4;
  repeated string cmd = 5;
  string working_dir = 6;
  repeated string volumes = 7;
  map<string, string> labels = 8;
  string stop_signal = 9;
  int32 stop_timeout = 10;
  HealthCheckConfig health_check = 11;
  string shell = 12;
}

// Root filesystem information
message RootFS {
  string type = 1;
  repeated string diff_ids = 2;
}

// Image history entry
message HistoryEntry {
  string id = 1;
  google.protobuf.Timestamp created = 2;
  string created_by = 3;
  string comment = 4;
  int64 size = 5;
  bool empty_layer = 6;
  map<string, string> labels = 7;
}

// Manifest information
message ManifestInfo {
  string media_type = 1;
  int64 size = 2;
  string digest = 3;
  Platform platform = 4;
  repeated LayerInfo layers = 5;
  ConfigInfo config = 6;
  map<string, string> annotations = 7;
}

// Layer information
message LayerInfo {
  string media_type = 1;
  int64 size = 2;
  string digest = 3;
  repeated string urls = 4;
  map<string, string> annotations = 5;
}

// Config information
message ConfigInfo {
  string media_type = 1;
  int64 size = 2;
  string digest = 3;
}

// Health check configuration for images
message HealthCheckConfig {
  repeated string test = 1;
  string interval = 2;
  string timeout = 3;
  int32 retries = 4;
  string start_period = 5;
}

// Request/Response messages

// Pull image
message PullImageRequest {
  string image = 1;
  string platform = 2;
  bool all_tags = 3;
  bool quiet = 4;
  map<string, string> auth_config = 5;
  string namespace = 6;
  bool verify = 7;
  string unpack = 8;
}

message PullImageResponse {
  string status = 1;
  string progress = 2;
  string layer_id = 3;
  int64 current = 4;
  int64 total = 5;
  string error = 6;
  bool complete = 7;
}

// Push image
message PushImageRequest {
  string image = 1;
  bool all_tags = 2;
  bool quiet = 3;
  map<string, string> auth_config = 4;
  string namespace = 5;
  bool sign = 6;
  string platform = 7;
}

message PushImageResponse {
  string status = 1;
  string progress = 2;
  string layer_id = 3;
  int64 current = 4;
  int64 total = 5;
  string error = 6;
  bool complete = 7;
}

// List images
message ListImagesRequest {
  string namespace = 1;
  bool all = 2;
  bool quiet = 3;
  bool no_trunc = 4;
  bool digests = 5;
  string format = 6;
  map<string, string> filters = 7;
}

message ListImagesResponse {
  repeated ExtendedImageInfo images = 1;
  int32 total_count = 2;
}

// Inspect image
message InspectImageRequest {
  string image = 1;
  string namespace = 2;
  string format = 3;
  string platform = 4;
}

message InspectImageResponse {
  ImageInfo image_info = 1;
  google.protobuf.Struct raw_data = 2;
}

// Remove image
message RemoveImageRequest {
  repeated string images = 1;
  string namespace = 2;
  bool force = 3;
  bool no_prune = 4;
}

message RemoveImageResponse {
  repeated RemovedImage removed = 1;
  int64 space_reclaimed = 2;
}

message RemovedImage {
  string image = 1;
  bool untagged = 2;
  bool deleted = 3;
  string error = 4;
}

// Tag image
message TagImageRequest {
  string source_image = 1;
  string target_image = 2;
  string namespace = 3;
}

message TagImageResponse {
  bool success = 1;
  string message = 2;
}

// Untag image
message UntagImageRequest {
  string image = 1;
  string namespace = 2;
}

message UntagImageResponse {
  bool success = 1;
  string message = 2;
}

// Build image
message BuildImageRequest {
  oneof request {
    BuildConfig config = 1;
    bytes chunk = 2;
  }
}

message BuildConfig {
  string dockerfile = 1;
  string context = 2;
  repeated string tags = 3;
  map<string, string> build_args = 4;
  repeated string target = 5;
  string platform = 6;
  bool no_cache = 7;
  bool rm = 8;
  bool force_rm = 9;
  bool pull = 10;
  bool quiet = 11;
  string output = 12;
  repeated string secrets = 13;
  repeated string ssh = 14;
  string progress = 15;
  map<string, string> labels = 16;
  string namespace = 17;
}

message BuildImageFromContextRequest {
  BuildConfig config = 1;
  string context_path = 2;
}

message BuildImageResponse {
  string status = 1;
  string stream = 2;
  string progress = 3;
  string error = 4;
  string image_id = 5;
  bool complete = 6;
}

// Save image
message SaveImageRequest {
  repeated string images = 1;
  string namespace = 2;
  string output = 3;
  bool all_tags = 4;
}

message SaveImageResponse {
  bytes chunk = 1;
  bool complete = 2;
  string error = 3;
}

// Load image
message LoadImageRequest {
  bytes chunk = 1;
  bool complete = 2;
  string namespace = 3;
  bool quiet = 4;
}

message LoadImageResponse {
  repeated string loaded_images = 1;
  string message = 2;
  string error = 3;
}

// Export image
message ExportImageRequest {
  string image = 1;
  string namespace = 2;
  string output = 3;
  string platform = 4;
}

message ExportImageResponse {
  bytes chunk = 1;
  bool complete = 2;
  string error = 3;
}

// Import image
message ImportImageRequest {
  oneof request {
    ImportConfig config = 1;
    bytes chunk = 2;
  }
}

message ImportConfig {
  string repository = 1;
  string tag = 2;
  string message = 3;
  repeated string changes = 4;
  string namespace = 5;
  string platform = 6;
}

message ImportImageResponse {
  string image_id = 1;
  string message = 2;
  string error = 3;
}

// Convert image
message ConvertImageRequest {
  string source_image = 1;
  string target_image = 2;
  string format = 3;
  string namespace = 4;
  string platform = 5;
  map<string, string> options = 6;
}

message ConvertImageResponse {
  string status = 1;
  string progress = 2;
  string error = 3;
  bool complete = 4;
}

// Encrypt image
message EncryptImageRequest {
  string image = 1;
  string recipient = 2;
  string namespace = 3;
  string platform = 4;
  repeated string keys = 5;
}

message EncryptImageResponse {
  string image_id = 1;
  string message = 2;
}

// Decrypt image
message DecryptImageRequest {
  string image = 1;
  string namespace = 2;
  string platform = 3;
  repeated string keys = 4;
}

message DecryptImageResponse {
  string image_id = 1;
  string message = 2;
}

// Get image history
message GetImageHistoryRequest {
  string image = 1;
  string namespace = 2;
  bool no_trunc = 3;
  bool quiet = 4;
  string format = 5;
}

message GetImageHistoryResponse {
  repeated HistoryEntry history = 1;
}

// Get image layers
message GetImageLayersRequest {
  string image = 1;
  string namespace = 2;
  string platform = 3;
}

message GetImageLayersResponse {
  repeated LayerInfo layers = 1;
}

// Diff image
message DiffImageRequest {
  string image1 = 1;
  string image2 = 2;
  string namespace = 3;
}

message DiffImageResponse {
  repeated string changes = 1;
}

// Prune images
message PruneImagesRequest {
  string namespace = 1;
  bool all = 2;
  map<string, string> filters = 3;
}

message PruneImagesResponse {
  repeated string deleted_images = 1;
  int64 space_reclaimed = 2;
}

// Cleanup images
message CleanupImagesRequest {
  string namespace = 1;
  bool aggressive = 2;
  string max_age = 3;
}

message CleanupImagesResponse {
  int32 images_removed = 1;
  int64 space_reclaimed = 2;
}

// Create manifest list
message CreateManifestListRequest {
  string name = 1;
  repeated string images = 2;
  string namespace = 3;
  bool amend = 4;
}

message CreateManifestListResponse {
  string manifest_list = 1;
  string digest = 2;
}

// Inspect manifest list
message InspectManifestListRequest {
  string manifest_list = 1;
  string namespace = 2;
}

message InspectManifestListResponse {
  ManifestListInfo manifest_list_info = 1;
}

message ManifestListInfo {
  string media_type = 1;
  int64 size = 2;
  string digest = 3;
  repeated ManifestInfo manifests = 4;
  map<string, string> annotations = 5;
}

// Registry operations
message LoginRegistryRequest {
  string server = 1;
  string username = 2;
  string password = 3;
  bool password_stdin = 4;
}

message LoginRegistryResponse {
  bool success = 1;
  string message = 2;
}

message LogoutRegistryRequest {
  string server = 1;
}

message LogoutRegistryResponse {
  bool success = 1;
  string message = 2;
}

message SearchRegistryRequest {
  string term = 1;
  int32 limit = 2;
  map<string, string> filters = 3;
  bool no_trunc = 4;
}

message SearchRegistryResponse {
  repeated SearchResult results = 1;
}

message SearchResult {
  string name = 1;
  string description = 2;
  int32 star_count = 3;
  bool is_official = 4;
  bool is_automated = 5;
}

// Image signing and verification
message SignImageRequest {
  string image = 1;
  string key = 2;
  string namespace = 3;
  map<string, string> annotations = 4;
}

message SignImageResponse {
  bool success = 1;
  string signature = 2;
  string message = 3;
}

message VerifyImageRequest {
  string image = 1;
  string key = 2;
  string namespace = 3;
}

message VerifyImageResponse {
  bool verified = 1;
  repeated string signatures = 2;
  string message = 3;
}

// Batch operations
message BatchImageRequest {
  string operation = 1;  // pull, push, remove, tag
  repeated string images = 2;
  string namespace = 3;
  map<string, string> options = 4;
  bool continue_on_error = 5;
}

message BatchImageResponse {
  repeated BatchImageResult results = 1;
  int32 success_count = 2;
  int32 error_count = 3;
}

message BatchImageResult {
  string image = 1;
  bool success = 2;
  string error = 3;
  string warning = 4;
}

// Image events
message ImageEvent {
  string type = 1;          // push, pull, remove, tag, untag
  string image = 2;
  string tag = 3;
  string digest = 4;
  google.protobuf.Timestamp timestamp = 5;
  map<string, string> attributes = 6;
}

message MonitorImageEventsRequest {
  repeated string images = 1;     // Empty = all images
  repeated string event_types = 2; // Empty = all events
  string namespace = 3;
  google.protobuf.Timestamp since = 4;
  google.protobuf.Timestamp until = 5;
  map<string, string> filters = 6;
}