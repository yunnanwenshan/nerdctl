// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/container_service_extended.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContainerServiceExtended_CreateContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/CreateContainer"
	ContainerServiceExtended_StartContainer_FullMethodName          = "/nerdctl.v1.ContainerServiceExtended/StartContainer"
	ContainerServiceExtended_StopContainer_FullMethodName           = "/nerdctl.v1.ContainerServiceExtended/StopContainer"
	ContainerServiceExtended_RestartContainer_FullMethodName        = "/nerdctl.v1.ContainerServiceExtended/RestartContainer"
	ContainerServiceExtended_RemoveContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/RemoveContainer"
	ContainerServiceExtended_KillContainer_FullMethodName           = "/nerdctl.v1.ContainerServiceExtended/KillContainer"
	ContainerServiceExtended_PauseContainer_FullMethodName          = "/nerdctl.v1.ContainerServiceExtended/PauseContainer"
	ContainerServiceExtended_UnpauseContainer_FullMethodName        = "/nerdctl.v1.ContainerServiceExtended/UnpauseContainer"
	ContainerServiceExtended_RunContainer_FullMethodName            = "/nerdctl.v1.ContainerServiceExtended/RunContainer"
	ContainerServiceExtended_RunContainerStream_FullMethodName      = "/nerdctl.v1.ContainerServiceExtended/RunContainerStream"
	ContainerServiceExtended_ListContainers_FullMethodName          = "/nerdctl.v1.ContainerServiceExtended/ListContainers"
	ContainerServiceExtended_InspectContainer_FullMethodName        = "/nerdctl.v1.ContainerServiceExtended/InspectContainer"
	ContainerServiceExtended_GetContainerLogs_FullMethodName        = "/nerdctl.v1.ContainerServiceExtended/GetContainerLogs"
	ContainerServiceExtended_AttachContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/AttachContainer"
	ContainerServiceExtended_ExecContainer_FullMethodName           = "/nerdctl.v1.ContainerServiceExtended/ExecContainer"
	ContainerServiceExtended_ExecContainerStream_FullMethodName     = "/nerdctl.v1.ContainerServiceExtended/ExecContainerStream"
	ContainerServiceExtended_GetContainerStats_FullMethodName       = "/nerdctl.v1.ContainerServiceExtended/GetContainerStats"
	ContainerServiceExtended_WaitContainer_FullMethodName           = "/nerdctl.v1.ContainerServiceExtended/WaitContainer"
	ContainerServiceExtended_RenameContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/RenameContainer"
	ContainerServiceExtended_UpdateContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/UpdateContainer"
	ContainerServiceExtended_CopyToContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/CopyToContainer"
	ContainerServiceExtended_CopyFromContainer_FullMethodName       = "/nerdctl.v1.ContainerServiceExtended/CopyFromContainer"
	ContainerServiceExtended_ExportContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/ExportContainer"
	ContainerServiceExtended_DiffContainer_FullMethodName           = "/nerdctl.v1.ContainerServiceExtended/DiffContainer"
	ContainerServiceExtended_CommitContainer_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/CommitContainer"
	ContainerServiceExtended_PruneContainers_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/PruneContainers"
	ContainerServiceExtended_GetContainerTop_FullMethodName         = "/nerdctl.v1.ContainerServiceExtended/GetContainerTop"
	ContainerServiceExtended_GetContainerPort_FullMethodName        = "/nerdctl.v1.ContainerServiceExtended/GetContainerPort"
	ContainerServiceExtended_HealthCheckContainer_FullMethodName    = "/nerdctl.v1.ContainerServiceExtended/HealthCheckContainer"
	ContainerServiceExtended_BatchContainerOperation_FullMethodName = "/nerdctl.v1.ContainerServiceExtended/BatchContainerOperation"
	ContainerServiceExtended_MonitorContainers_FullMethodName       = "/nerdctl.v1.ContainerServiceExtended/MonitorContainers"
)

// ContainerServiceExtendedClient is the client API for ContainerServiceExtended service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Extended Container service for comprehensive container management
type ContainerServiceExtendedClient interface {
	// Basic container lifecycle operations
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error)
	RestartContainer(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*RestartContainerResponse, error)
	RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*RemoveContainerResponse, error)
	KillContainer(ctx context.Context, in *KillContainerRequest, opts ...grpc.CallOption) (*KillContainerResponse, error)
	PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*PauseContainerResponse, error)
	UnpauseContainer(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*UnpauseContainerResponse, error)
	// Advanced container operations
	RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerResponse, error)
	RunContainerStream(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunContainerStreamResponse], error)
	ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
	InspectContainer(ctx context.Context, in *InspectContainerRequest, opts ...grpc.CallOption) (*InspectContainerResponse, error)
	GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	AttachContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AttachContainerRequest, AttachContainerResponse], error)
	ExecContainer(ctx context.Context, in *ExecContainerRequest, opts ...grpc.CallOption) (*ExecContainerResponse, error)
	ExecContainerStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecContainerStreamRequest, ExecContainerStreamResponse], error)
	GetContainerStats(ctx context.Context, in *GetContainerStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerStats], error)
	WaitContainer(ctx context.Context, in *WaitContainerRequest, opts ...grpc.CallOption) (*WaitContainerResponse, error)
	RenameContainer(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*RenameContainerResponse, error)
	UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error)
	// File operations
	CopyToContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CopyToContainerRequest, CopyToContainerResponse], error)
	CopyFromContainer(ctx context.Context, in *CopyFromContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CopyFromContainerResponse], error)
	// Container maintenance operations
	ExportContainer(ctx context.Context, in *ExportContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportContainerResponse], error)
	DiffContainer(ctx context.Context, in *DiffContainerRequest, opts ...grpc.CallOption) (*DiffContainerResponse, error)
	CommitContainer(ctx context.Context, in *CommitContainerRequest, opts ...grpc.CallOption) (*CommitContainerResponse, error)
	PruneContainers(ctx context.Context, in *PruneContainersRequest, opts ...grpc.CallOption) (*PruneContainersResponse, error)
	// Advanced monitoring and control
	GetContainerTop(ctx context.Context, in *GetContainerTopRequest, opts ...grpc.CallOption) (*GetContainerTopResponse, error)
	GetContainerPort(ctx context.Context, in *GetContainerPortRequest, opts ...grpc.CallOption) (*GetContainerPortResponse, error)
	HealthCheckContainer(ctx context.Context, in *HealthCheckContainerRequest, opts ...grpc.CallOption) (*HealthCheckContainerResponse, error)
	// Batch operations
	BatchContainerOperation(ctx context.Context, in *BatchContainerRequest, opts ...grpc.CallOption) (*BatchContainerResponse, error)
	MonitorContainers(ctx context.Context, in *MonitorContainersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerEvent], error)
}

type containerServiceExtendedClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerServiceExtendedClient(cc grpc.ClientConnInterface) ContainerServiceExtendedClient {
	return &containerServiceExtendedClient{cc}
}

func (c *containerServiceExtendedClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_CreateContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_StartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_StopContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) RestartContainer(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*RestartContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_RestartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*RemoveContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_RemoveContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) KillContainer(ctx context.Context, in *KillContainerRequest, opts ...grpc.CallOption) (*KillContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KillContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_KillContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*PauseContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_PauseContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) UnpauseContainer(ctx context.Context, in *UnpauseContainerRequest, opts ...grpc.CallOption) (*UnpauseContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpauseContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_UnpauseContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_RunContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) RunContainerStream(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunContainerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[0], ContainerServiceExtended_RunContainerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunContainerRequest, RunContainerStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_RunContainerStreamClient = grpc.ServerStreamingClient[RunContainerStreamResponse]

func (c *containerServiceExtendedClient) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContainersResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_ListContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) InspectContainer(ctx context.Context, in *InspectContainerRequest, opts ...grpc.CallOption) (*InspectContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InspectContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_InspectContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[1], ContainerServiceExtended_GetContainerLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetContainerLogsRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_GetContainerLogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *containerServiceExtendedClient) AttachContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AttachContainerRequest, AttachContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[2], ContainerServiceExtended_AttachContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AttachContainerRequest, AttachContainerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_AttachContainerClient = grpc.BidiStreamingClient[AttachContainerRequest, AttachContainerResponse]

func (c *containerServiceExtendedClient) ExecContainer(ctx context.Context, in *ExecContainerRequest, opts ...grpc.CallOption) (*ExecContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_ExecContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) ExecContainerStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecContainerStreamRequest, ExecContainerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[3], ContainerServiceExtended_ExecContainerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecContainerStreamRequest, ExecContainerStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_ExecContainerStreamClient = grpc.BidiStreamingClient[ExecContainerStreamRequest, ExecContainerStreamResponse]

func (c *containerServiceExtendedClient) GetContainerStats(ctx context.Context, in *GetContainerStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerStats], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[4], ContainerServiceExtended_GetContainerStats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetContainerStatsRequest, ContainerStats]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_GetContainerStatsClient = grpc.ServerStreamingClient[ContainerStats]

func (c *containerServiceExtendedClient) WaitContainer(ctx context.Context, in *WaitContainerRequest, opts ...grpc.CallOption) (*WaitContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WaitContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_WaitContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) RenameContainer(ctx context.Context, in *RenameContainerRequest, opts ...grpc.CallOption) (*RenameContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_RenameContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_UpdateContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) CopyToContainer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CopyToContainerRequest, CopyToContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[5], ContainerServiceExtended_CopyToContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CopyToContainerRequest, CopyToContainerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_CopyToContainerClient = grpc.ClientStreamingClient[CopyToContainerRequest, CopyToContainerResponse]

func (c *containerServiceExtendedClient) CopyFromContainer(ctx context.Context, in *CopyFromContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CopyFromContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[6], ContainerServiceExtended_CopyFromContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CopyFromContainerRequest, CopyFromContainerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_CopyFromContainerClient = grpc.ServerStreamingClient[CopyFromContainerResponse]

func (c *containerServiceExtendedClient) ExportContainer(ctx context.Context, in *ExportContainerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportContainerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[7], ContainerServiceExtended_ExportContainer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportContainerRequest, ExportContainerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_ExportContainerClient = grpc.ServerStreamingClient[ExportContainerResponse]

func (c *containerServiceExtendedClient) DiffContainer(ctx context.Context, in *DiffContainerRequest, opts ...grpc.CallOption) (*DiffContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiffContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_DiffContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) CommitContainer(ctx context.Context, in *CommitContainerRequest, opts ...grpc.CallOption) (*CommitContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_CommitContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) PruneContainers(ctx context.Context, in *PruneContainersRequest, opts ...grpc.CallOption) (*PruneContainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruneContainersResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_PruneContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) GetContainerTop(ctx context.Context, in *GetContainerTopRequest, opts ...grpc.CallOption) (*GetContainerTopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContainerTopResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_GetContainerTop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) GetContainerPort(ctx context.Context, in *GetContainerPortRequest, opts ...grpc.CallOption) (*GetContainerPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContainerPortResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_GetContainerPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) HealthCheckContainer(ctx context.Context, in *HealthCheckContainerRequest, opts ...grpc.CallOption) (*HealthCheckContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_HealthCheckContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) BatchContainerOperation(ctx context.Context, in *BatchContainerRequest, opts ...grpc.CallOption) (*BatchContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchContainerResponse)
	err := c.cc.Invoke(ctx, ContainerServiceExtended_BatchContainerOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceExtendedClient) MonitorContainers(ctx context.Context, in *MonitorContainersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerServiceExtended_ServiceDesc.Streams[8], ContainerServiceExtended_MonitorContainers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorContainersRequest, ContainerEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_MonitorContainersClient = grpc.ServerStreamingClient[ContainerEvent]

// ContainerServiceExtendedServer is the server API for ContainerServiceExtended service.
// All implementations must embed UnimplementedContainerServiceExtendedServer
// for forward compatibility.
//
// Extended Container service for comprehensive container management
type ContainerServiceExtendedServer interface {
	// Basic container lifecycle operations
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	RestartContainer(context.Context, *RestartContainerRequest) (*RestartContainerResponse, error)
	RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error)
	KillContainer(context.Context, *KillContainerRequest) (*KillContainerResponse, error)
	PauseContainer(context.Context, *PauseContainerRequest) (*PauseContainerResponse, error)
	UnpauseContainer(context.Context, *UnpauseContainerRequest) (*UnpauseContainerResponse, error)
	// Advanced container operations
	RunContainer(context.Context, *RunContainerRequest) (*RunContainerResponse, error)
	RunContainerStream(*RunContainerRequest, grpc.ServerStreamingServer[RunContainerStreamResponse]) error
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	InspectContainer(context.Context, *InspectContainerRequest) (*InspectContainerResponse, error)
	GetContainerLogs(*GetContainerLogsRequest, grpc.ServerStreamingServer[LogEntry]) error
	AttachContainer(grpc.BidiStreamingServer[AttachContainerRequest, AttachContainerResponse]) error
	ExecContainer(context.Context, *ExecContainerRequest) (*ExecContainerResponse, error)
	ExecContainerStream(grpc.BidiStreamingServer[ExecContainerStreamRequest, ExecContainerStreamResponse]) error
	GetContainerStats(*GetContainerStatsRequest, grpc.ServerStreamingServer[ContainerStats]) error
	WaitContainer(context.Context, *WaitContainerRequest) (*WaitContainerResponse, error)
	RenameContainer(context.Context, *RenameContainerRequest) (*RenameContainerResponse, error)
	UpdateContainer(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error)
	// File operations
	CopyToContainer(grpc.ClientStreamingServer[CopyToContainerRequest, CopyToContainerResponse]) error
	CopyFromContainer(*CopyFromContainerRequest, grpc.ServerStreamingServer[CopyFromContainerResponse]) error
	// Container maintenance operations
	ExportContainer(*ExportContainerRequest, grpc.ServerStreamingServer[ExportContainerResponse]) error
	DiffContainer(context.Context, *DiffContainerRequest) (*DiffContainerResponse, error)
	CommitContainer(context.Context, *CommitContainerRequest) (*CommitContainerResponse, error)
	PruneContainers(context.Context, *PruneContainersRequest) (*PruneContainersResponse, error)
	// Advanced monitoring and control
	GetContainerTop(context.Context, *GetContainerTopRequest) (*GetContainerTopResponse, error)
	GetContainerPort(context.Context, *GetContainerPortRequest) (*GetContainerPortResponse, error)
	HealthCheckContainer(context.Context, *HealthCheckContainerRequest) (*HealthCheckContainerResponse, error)
	// Batch operations
	BatchContainerOperation(context.Context, *BatchContainerRequest) (*BatchContainerResponse, error)
	MonitorContainers(*MonitorContainersRequest, grpc.ServerStreamingServer[ContainerEvent]) error
	mustEmbedUnimplementedContainerServiceExtendedServer()
}

// UnimplementedContainerServiceExtendedServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContainerServiceExtendedServer struct{}

func (UnimplementedContainerServiceExtendedServer) CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) RestartContainer(context.Context, *RestartContainerRequest) (*RestartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) KillContainer(context.Context, *KillContainerRequest) (*KillContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) PauseContainer(context.Context, *PauseContainerRequest) (*PauseContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) UnpauseContainer(context.Context, *UnpauseContainerRequest) (*UnpauseContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) RunContainer(context.Context, *RunContainerRequest) (*RunContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) RunContainerStream(*RunContainerRequest, grpc.ServerStreamingServer[RunContainerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RunContainerStream not implemented")
}
func (UnimplementedContainerServiceExtendedServer) ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (UnimplementedContainerServiceExtendedServer) InspectContainer(context.Context, *InspectContainerRequest) (*InspectContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) GetContainerLogs(*GetContainerLogsRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method GetContainerLogs not implemented")
}
func (UnimplementedContainerServiceExtendedServer) AttachContainer(grpc.BidiStreamingServer[AttachContainerRequest, AttachContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AttachContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) ExecContainer(context.Context, *ExecContainerRequest) (*ExecContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) ExecContainerStream(grpc.BidiStreamingServer[ExecContainerStreamRequest, ExecContainerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecContainerStream not implemented")
}
func (UnimplementedContainerServiceExtendedServer) GetContainerStats(*GetContainerStatsRequest, grpc.ServerStreamingServer[ContainerStats]) error {
	return status.Errorf(codes.Unimplemented, "method GetContainerStats not implemented")
}
func (UnimplementedContainerServiceExtendedServer) WaitContainer(context.Context, *WaitContainerRequest) (*WaitContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) RenameContainer(context.Context, *RenameContainerRequest) (*RenameContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) UpdateContainer(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) CopyToContainer(grpc.ClientStreamingServer[CopyToContainerRequest, CopyToContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CopyToContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) CopyFromContainer(*CopyFromContainerRequest, grpc.ServerStreamingServer[CopyFromContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CopyFromContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) ExportContainer(*ExportContainerRequest, grpc.ServerStreamingServer[ExportContainerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExportContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) DiffContainer(context.Context, *DiffContainerRequest) (*DiffContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) CommitContainer(context.Context, *CommitContainerRequest) (*CommitContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) PruneContainers(context.Context, *PruneContainersRequest) (*PruneContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneContainers not implemented")
}
func (UnimplementedContainerServiceExtendedServer) GetContainerTop(context.Context, *GetContainerTopRequest) (*GetContainerTopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerTop not implemented")
}
func (UnimplementedContainerServiceExtendedServer) GetContainerPort(context.Context, *GetContainerPortRequest) (*GetContainerPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerPort not implemented")
}
func (UnimplementedContainerServiceExtendedServer) HealthCheckContainer(context.Context, *HealthCheckContainerRequest) (*HealthCheckContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheckContainer not implemented")
}
func (UnimplementedContainerServiceExtendedServer) BatchContainerOperation(context.Context, *BatchContainerRequest) (*BatchContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchContainerOperation not implemented")
}
func (UnimplementedContainerServiceExtendedServer) MonitorContainers(*MonitorContainersRequest, grpc.ServerStreamingServer[ContainerEvent]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorContainers not implemented")
}
func (UnimplementedContainerServiceExtendedServer) mustEmbedUnimplementedContainerServiceExtendedServer() {
}
func (UnimplementedContainerServiceExtendedServer) testEmbeddedByValue() {}

// UnsafeContainerServiceExtendedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerServiceExtendedServer will
// result in compilation errors.
type UnsafeContainerServiceExtendedServer interface {
	mustEmbedUnimplementedContainerServiceExtendedServer()
}

func RegisterContainerServiceExtendedServer(s grpc.ServiceRegistrar, srv ContainerServiceExtendedServer) {
	// If the following call pancis, it indicates UnimplementedContainerServiceExtendedServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContainerServiceExtended_ServiceDesc, srv)
}

func _ContainerServiceExtended_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_CreateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_StartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_StopContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_RestartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).RestartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_RestartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).RestartContainer(ctx, req.(*RestartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_RemoveContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).RemoveContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_RemoveContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).RemoveContainer(ctx, req.(*RemoveContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_KillContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).KillContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_KillContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).KillContainer(ctx, req.(*KillContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_PauseContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).PauseContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_PauseContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).PauseContainer(ctx, req.(*PauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_UnpauseContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).UnpauseContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_UnpauseContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).UnpauseContainer(ctx, req.(*UnpauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_RunContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).RunContainer(ctx, req.(*RunContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_RunContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunContainerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceExtendedServer).RunContainerStream(m, &grpc.GenericServerStream[RunContainerRequest, RunContainerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_RunContainerStreamServer = grpc.ServerStreamingServer[RunContainerStreamResponse]

func _ContainerServiceExtended_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_ListContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).ListContainers(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_InspectContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).InspectContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_InspectContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).InspectContainer(ctx, req.(*InspectContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_GetContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceExtendedServer).GetContainerLogs(m, &grpc.GenericServerStream[GetContainerLogsRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_GetContainerLogsServer = grpc.ServerStreamingServer[LogEntry]

func _ContainerServiceExtended_AttachContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceExtendedServer).AttachContainer(&grpc.GenericServerStream[AttachContainerRequest, AttachContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_AttachContainerServer = grpc.BidiStreamingServer[AttachContainerRequest, AttachContainerResponse]

func _ContainerServiceExtended_ExecContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).ExecContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_ExecContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).ExecContainer(ctx, req.(*ExecContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_ExecContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceExtendedServer).ExecContainerStream(&grpc.GenericServerStream[ExecContainerStreamRequest, ExecContainerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_ExecContainerStreamServer = grpc.BidiStreamingServer[ExecContainerStreamRequest, ExecContainerStreamResponse]

func _ContainerServiceExtended_GetContainerStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContainerStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceExtendedServer).GetContainerStats(m, &grpc.GenericServerStream[GetContainerStatsRequest, ContainerStats]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_GetContainerStatsServer = grpc.ServerStreamingServer[ContainerStats]

func _ContainerServiceExtended_WaitContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).WaitContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_WaitContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).WaitContainer(ctx, req.(*WaitContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_RenameContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).RenameContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_RenameContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).RenameContainer(ctx, req.(*RenameContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_UpdateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).UpdateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_UpdateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).UpdateContainer(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_CopyToContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerServiceExtendedServer).CopyToContainer(&grpc.GenericServerStream[CopyToContainerRequest, CopyToContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_CopyToContainerServer = grpc.ClientStreamingServer[CopyToContainerRequest, CopyToContainerResponse]

func _ContainerServiceExtended_CopyFromContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFromContainerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceExtendedServer).CopyFromContainer(m, &grpc.GenericServerStream[CopyFromContainerRequest, CopyFromContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_CopyFromContainerServer = grpc.ServerStreamingServer[CopyFromContainerResponse]

func _ContainerServiceExtended_ExportContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportContainerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceExtendedServer).ExportContainer(m, &grpc.GenericServerStream[ExportContainerRequest, ExportContainerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_ExportContainerServer = grpc.ServerStreamingServer[ExportContainerResponse]

func _ContainerServiceExtended_DiffContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).DiffContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_DiffContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).DiffContainer(ctx, req.(*DiffContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_CommitContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).CommitContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_CommitContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).CommitContainer(ctx, req.(*CommitContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_PruneContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).PruneContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_PruneContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).PruneContainers(ctx, req.(*PruneContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_GetContainerTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerTopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).GetContainerTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_GetContainerTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).GetContainerTop(ctx, req.(*GetContainerTopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_GetContainerPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).GetContainerPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_GetContainerPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).GetContainerPort(ctx, req.(*GetContainerPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_HealthCheckContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).HealthCheckContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_HealthCheckContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).HealthCheckContainer(ctx, req.(*HealthCheckContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_BatchContainerOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceExtendedServer).BatchContainerOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerServiceExtended_BatchContainerOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceExtendedServer).BatchContainerOperation(ctx, req.(*BatchContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerServiceExtended_MonitorContainers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorContainersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceExtendedServer).MonitorContainers(m, &grpc.GenericServerStream[MonitorContainersRequest, ContainerEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerServiceExtended_MonitorContainersServer = grpc.ServerStreamingServer[ContainerEvent]

// ContainerServiceExtended_ServiceDesc is the grpc.ServiceDesc for ContainerServiceExtended service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerServiceExtended_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nerdctl.v1.ContainerServiceExtended",
	HandlerType: (*ContainerServiceExtendedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _ContainerServiceExtended_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _ContainerServiceExtended_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _ContainerServiceExtended_StopContainer_Handler,
		},
		{
			MethodName: "RestartContainer",
			Handler:    _ContainerServiceExtended_RestartContainer_Handler,
		},
		{
			MethodName: "RemoveContainer",
			Handler:    _ContainerServiceExtended_RemoveContainer_Handler,
		},
		{
			MethodName: "KillContainer",
			Handler:    _ContainerServiceExtended_KillContainer_Handler,
		},
		{
			MethodName: "PauseContainer",
			Handler:    _ContainerServiceExtended_PauseContainer_Handler,
		},
		{
			MethodName: "UnpauseContainer",
			Handler:    _ContainerServiceExtended_UnpauseContainer_Handler,
		},
		{
			MethodName: "RunContainer",
			Handler:    _ContainerServiceExtended_RunContainer_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _ContainerServiceExtended_ListContainers_Handler,
		},
		{
			MethodName: "InspectContainer",
			Handler:    _ContainerServiceExtended_InspectContainer_Handler,
		},
		{
			MethodName: "ExecContainer",
			Handler:    _ContainerServiceExtended_ExecContainer_Handler,
		},
		{
			MethodName: "WaitContainer",
			Handler:    _ContainerServiceExtended_WaitContainer_Handler,
		},
		{
			MethodName: "RenameContainer",
			Handler:    _ContainerServiceExtended_RenameContainer_Handler,
		},
		{
			MethodName: "UpdateContainer",
			Handler:    _ContainerServiceExtended_UpdateContainer_Handler,
		},
		{
			MethodName: "DiffContainer",
			Handler:    _ContainerServiceExtended_DiffContainer_Handler,
		},
		{
			MethodName: "CommitContainer",
			Handler:    _ContainerServiceExtended_CommitContainer_Handler,
		},
		{
			MethodName: "PruneContainers",
			Handler:    _ContainerServiceExtended_PruneContainers_Handler,
		},
		{
			MethodName: "GetContainerTop",
			Handler:    _ContainerServiceExtended_GetContainerTop_Handler,
		},
		{
			MethodName: "GetContainerPort",
			Handler:    _ContainerServiceExtended_GetContainerPort_Handler,
		},
		{
			MethodName: "HealthCheckContainer",
			Handler:    _ContainerServiceExtended_HealthCheckContainer_Handler,
		},
		{
			MethodName: "BatchContainerOperation",
			Handler:    _ContainerServiceExtended_BatchContainerOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunContainerStream",
			Handler:       _ContainerServiceExtended_RunContainerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContainerLogs",
			Handler:       _ContainerServiceExtended_GetContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AttachContainer",
			Handler:       _ContainerServiceExtended_AttachContainer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecContainerStream",
			Handler:       _ContainerServiceExtended_ExecContainerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetContainerStats",
			Handler:       _ContainerServiceExtended_GetContainerStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CopyToContainer",
			Handler:       _ContainerServiceExtended_CopyToContainer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyFromContainer",
			Handler:       _ContainerServiceExtended_CopyFromContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportContainer",
			Handler:       _ContainerServiceExtended_ExportContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorContainers",
			Handler:       _ContainerServiceExtended_MonitorContainers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/container_service_extended.proto",
}
