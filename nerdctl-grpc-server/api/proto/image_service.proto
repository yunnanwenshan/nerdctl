syntax = "proto3";

package nerdctl.v1;

option go_package = "github.com/containerd/nerdctl-grpc-server/api/proto";

import "google/protobuf/timestamp.proto";
import "api/proto/common.proto";

// Image service for managing container images
service ImageService {
  // Pull an image from registry
  rpc PullImage(PullImageRequest) returns (stream PullImageResponse);
  
  // Push an image to registry
  rpc PushImage(PushImageRequest) returns (stream PushImageResponse);
  
  // List images
  rpc ListImages(ListImagesRequest) returns (ListImagesResponse);
  
  // Remove images
  rpc RemoveImage(RemoveImageRequest) returns (RemoveImageResponse);
  
  // Inspect image
  rpc InspectImage(InspectImageRequest) returns (InspectImageResponse);
  
  // Tag image
  rpc TagImage(TagImageRequest) returns (TagImageResponse);
  
  // Build image from Dockerfile
  rpc BuildImage(stream BuildImageRequest) returns (stream BuildImageResponse);
  
  // Load images from tar archive
  rpc LoadImage(stream LoadImageRequest) returns (LoadImageResponse);
  
  // Save images to tar archive
  rpc SaveImage(SaveImageRequest) returns (stream SaveImageResponse);
  
  // Import image from tar archive
  rpc ImportImage(stream ImportImageRequest) returns (ImportImageResponse);
  
  // Export image as tar archive
  rpc ExportImage(ExportImageRequest) returns (stream ExportImageResponse);
  
  // Get image history
  rpc ImageHistory(ImageHistoryRequest) returns (ImageHistoryResponse);
  
  // Prune unused images
  rpc PruneImages(PruneImagesRequest) returns (PruneImagesResponse);
  
  // Search images in registry
  rpc SearchImages(SearchImagesRequest) returns (SearchImagesResponse);
  
  // Convert image format
  rpc ConvertImage(ConvertImageRequest) returns (ConvertImageResponse);
  
  // Encrypt image
  rpc EncryptImage(EncryptImageRequest) returns (EncryptImageResponse);
  
  // Decrypt image
  rpc DecryptImage(DecryptImageRequest) returns (DecryptImageResponse);
  
  // Sign image
  rpc SignImage(SignImageRequest) returns (SignImageResponse);
  
  // Verify image signature
  rpc VerifyImage(VerifyImageRequest) returns (VerifyImageResponse);
}

// Pull image request/response
message PullImageRequest {
  string image = 1;                      // Image reference
  string namespace = 2;                  // Containerd namespace
  Platform platform = 3;                // Platform specification
  bool all_platforms = 4;                // Pull all platforms
  bool quiet = 5;                        // Suppress output
  RegistryAuth auth = 6;                 // Registry authentication
  map<string, string> pull_opts = 7;     // Additional pull options
  bool verify = 8;                       // Verify image signature
  string snapshotter = 9;                // Snapshotter to use
  repeated string unpack_opts = 10;      // Unpack options
}

message PullImageResponse {
  oneof response {
    OperationProgress progress = 1;      // Pull progress
    string layer_id = 2;                // Layer being pulled
    int64 offset = 3;                   // Bytes downloaded
    int64 total = 4;                    // Total bytes
    string status = 5;                  // Status message
    ImageInfo image = 6;                // Final result
  }
}

// Push image request/response
message PushImageRequest {
  string image = 1;                      // Image reference
  string namespace = 2;                  // Containerd namespace
  Platform platform = 3;                // Platform specification
  bool all_platforms = 4;               // Push all platforms
  bool quiet = 5;                       // Suppress output
  RegistryAuth auth = 6;                // Registry authentication
  bool sign = 7;                        // Sign image during push
  map<string, string> push_opts = 8;    // Additional push options
}

message PushImageResponse {
  oneof response {
    OperationProgress progress = 1;      // Push progress
    string layer_id = 2;                // Layer being pushed
    int64 offset = 3;                   // Bytes uploaded
    int64 total = 4;                    // Total bytes
    string status = 5;                  // Status message
    string digest = 6;                  // Final image digest
  }
}

// List images request/response
message ListImagesRequest {
  string namespace = 1;                  // Containerd namespace
  map<string, string> filters = 2;      // Filters (name, label, etc.)
  bool all = 3;                         // Include intermediate images
  bool digests = 4;                     // Show digests
  bool quiet = 5;                       // Only show image IDs
  string format = 6;                    // Output format
}

message ListImagesResponse {
  repeated ImageInfo images = 1;         // Image list
}

// Remove image request/response
message RemoveImageRequest {
  repeated string images = 1;           // Images to remove
  string namespace = 2;                 // Containerd namespace
  bool force = 3;                       // Force removal
  bool no_prune = 4;                    // Don't delete untagged parents
}

message RemovedImage {
  string image_id = 1;                  // Removed image ID
  string untagged = 2;                  // Untagged reference
  string deleted = 3;                   // Deleted image ID
}

message RemoveImageResponse {
  repeated RemovedImage removed = 1;     // Removed images
}

// Inspect image request/response
message InspectImageRequest {
  string image = 1;                     // Image reference
  string namespace = 2;                 // Containerd namespace
  Platform platform = 3;               // Platform specification
}

message InspectImageResponse {
  ImageInfo image = 1;                  // Image information
  ImageManifest manifest = 2;           // Image manifest
  ImageConfig config = 3;               // Image configuration
}

message ImageManifest {
  int32 schema_version = 1;             // Manifest schema version
  string media_type = 2;                // Media type
  ImageConfig config = 3;               // Configuration
  repeated ImageLayer layers = 4;       // Layers
  map<string, string> annotations = 5;  // Annotations
}

message ImageConfig {
  string media_type = 1;                // Media type
  string digest = 2;                    // Digest
  int64 size = 3;                       // Size in bytes
  repeated string env = 4;              // Environment variables
  repeated string cmd = 5;              // Default command
  repeated string entrypoint = 6;       // Entrypoint
  string working_dir = 7;               // Working directory
  string user = 8;                      // User
  repeated string exposed_ports = 9;    // Exposed ports
  repeated string volumes = 10;         // Volumes
  map<string, string> labels = 11;     // Labels
  string stop_signal = 12;              // Stop signal
}

message ImageLayer {
  string media_type = 1;                // Media type
  string digest = 2;                    // Digest
  int64 size = 3;                       // Size in bytes
  repeated string urls = 4;             // Download URLs
}

// Tag image request/response
message TagImageRequest {
  string source_image = 1;              // Source image reference
  string target_image = 2;              // Target image reference
  string namespace = 3;                 // Containerd namespace
}

message TagImageResponse {
  bool tagged = 1;                      // Whether image was tagged
}

// Build image request/response
message BuildImageRequest {
  oneof request {
    BuildImageOptions options = 1;       // Build options
    bytes dockerfile = 2;               // Dockerfile content
    bytes context = 3;                  // Build context data
  }
}

message BuildImageOptions {
  string tag = 1;                       // Image tag
  string namespace = 2;                 // Containerd namespace
  string dockerfile = 3;                // Dockerfile path
  repeated string build_args = 4;       // Build arguments
  repeated string labels = 5;           // Image labels
  string target = 6;                    // Build target
  Platform platform = 7;               // Platform specification
  bool no_cache = 8;                    // Don't use cache
  bool pull = 9;                        // Always pull base images
  bool rm = 10;                         // Remove intermediate containers
  bool force_rm = 11;                   // Always remove intermediate containers
  bool quiet = 12;                      // Suppress build output
  int64 memory = 13;                    // Memory limit
  int64 memory_swap = 14;               // Memory + swap limit
  int32 cpu_shares = 15;                // CPU shares
  string cpu_set_cpus = 16;             // CPUs to use
  string cpu_set_mems = 17;             // Memory nodes to use
  repeated string cache_from = 18;      // Cache source images
  string isolation = 19;                // Container isolation
  string shm_size = 20;                 // Shared memory size
  bool squash = 21;                     // Squash layers
  map<string, string> annotations = 22; // Image annotations
  string network = 23;                  // Network mode during build
  repeated string secrets = 24;         // Build secrets
  repeated string ssh = 25;             // SSH agent sockets
  string buildkit_host = 26;            // BuildKit daemon address
}

message BuildImageResponse {
  oneof response {
    string output = 1;                  // Build output
    OperationProgress progress = 2;     // Build progress
    ImageInfo image = 3;                // Final result
    ErrorDetail error = 4;              // Build error
  }
}

// Load image request/response
message LoadImageRequest {
  oneof request {
    LoadImageOptions options = 1;       // Load options
    bytes data = 2;                     // Tar archive data
  }
}

message LoadImageOptions {
  string namespace = 1;                 // Containerd namespace
  bool quiet = 2;                       // Suppress output
  repeated Platform platforms = 3;      // Platforms to load
  bool all_platforms = 4;               // Load all platforms
}

message LoadImageResponse {
  repeated string loaded = 1;           // Loaded image references
}

// Save image request/response
message SaveImageRequest {
  repeated string images = 1;           // Images to save
  string namespace = 2;                 // Containerd namespace
  repeated Platform platforms = 3;      // Platforms to save
  bool all_platforms = 4;               // Save all platforms
}

message SaveImageResponse {
  bytes data = 1;                       // Tar archive data chunk
  bool finished = 2;                    // Whether save is finished
}

// Import image request/response
message ImportImageRequest {
  oneof request {
    ImportImageOptions options = 1;     // Import options
    bytes data = 2;                     // Tar archive data
  }
}

message ImportImageOptions {
  string repository = 1;                // Repository name
  string tag = 2;                       // Tag name
  string namespace = 3;                 // Containerd namespace
  string message = 4;                   // Commit message
  repeated string changes = 5;          // Dockerfile changes
  Platform platform = 6;               // Platform specification
}

message ImportImageResponse {
  string image_id = 1;                  // Imported image ID
}

// Export image request/response
message ExportImageRequest {
  string image = 1;                     // Image reference
  string namespace = 2;                 // Containerd namespace
  Platform platform = 3;               // Platform specification
}

message ExportImageResponse {
  bytes data = 1;                       // Tar archive data chunk
  bool finished = 2;                    // Whether export is finished
}

// Image history request/response
message ImageHistoryRequest {
  string image = 1;                     // Image reference
  string namespace = 2;                 // Containerd namespace
  bool human = 3;                       // Human readable output
  bool quiet = 4;                       // Only show image IDs
  bool no_trunc = 5;                    // Don't truncate output
}

message ImageHistoryEntry {
  string id = 1;                        // Layer ID
  google.protobuf.Timestamp created = 2; // Creation time
  string created_by = 3;                // Command that created the layer
  int64 size = 4;                       // Layer size
  string comment = 5;                   // Layer comment
  repeated string tags = 6;             // Associated tags
}

message ImageHistoryResponse {
  repeated ImageHistoryEntry history = 1; // Image history
}

// Prune images request/response
message PruneImagesRequest {
  string namespace = 1;                 // Containerd namespace
  map<string, string> filters = 2;     // Filters for pruning
  bool all = 3;                         // Remove all unused images
}

message PrunedImage {
  string image_id = 1;                  // Pruned image ID
  repeated string repo_tags = 2;        // Repository tags
  int64 size = 3;                       // Reclaimed size
}

message PruneImagesResponse {
  repeated PrunedImage pruned = 1;      // Pruned images
  int64 space_reclaimed = 2;            // Total space reclaimed
}

// Search images request/response
message SearchImagesRequest {
  string term = 1;                      // Search term
  int32 limit = 2;                      // Maximum results
  map<string, string> filters = 3;     // Search filters
  bool no_trunc = 4;                    // Don't truncate output
  RegistryAuth auth = 5;                // Registry authentication
}

message SearchResult {
  string name = 1;                      // Image name
  string description = 2;               // Image description
  int32 star_count = 3;                 // Star count
  bool official = 4;                    // Official image
  bool automated = 5;                   // Automated build
}

message SearchImagesResponse {
  repeated SearchResult results = 1;     // Search results
}

// Convert image request/response
message ConvertImageRequest {
  string source_image = 1;              // Source image reference
  string target_image = 2;              // Target image reference
  string namespace = 3;                 // Containerd namespace
  string format = 4;                    // Target format (oci, docker)
  Platform platform = 5;               // Platform specification
  bool uncompress = 6;                  // Uncompress layers
  string oci_media_types = 7;           // Use OCI media types
}

message ConvertImageResponse {
  string converted_image = 1;           // Converted image reference
}

// Encrypt image request/response
message EncryptImageRequest {
  string source_image = 1;              // Source image reference
  string target_image = 2;              // Target image reference
  string namespace = 3;                 // Containerd namespace
  repeated string recipients = 4;       // Encryption recipients
  string encryption_key = 5;            // Encryption key
  Platform platform = 6;               // Platform specification
}

message EncryptImageResponse {
  string encrypted_image = 1;           // Encrypted image reference
}

// Decrypt image request/response
message DecryptImageRequest {
  string source_image = 1;              // Source image reference
  string target_image = 2;              // Target image reference
  string namespace = 3;                 // Containerd namespace
  string decryption_key = 4;            // Decryption key
  Platform platform = 5;               // Platform specification
}

message DecryptImageResponse {
  string decrypted_image = 1;           // Decrypted image reference
}

// Sign image request/response
message SignImageRequest {
  string image = 1;                     // Image reference
  string namespace = 2;                 // Containerd namespace
  string key = 3;                       // Signing key
  string cert = 4;                      // Certificate
  string format = 5;                    // Signature format
  map<string, string> annotations = 6;  // Signature annotations
}

message SignImageResponse {
  string signature = 1;                 // Image signature
  string digest = 2;                    // Signed image digest
}

// Verify image request/response
message VerifyImageRequest {
  string image = 1;                     // Image reference
  string namespace = 2;                 // Containerd namespace
  string key = 3;                       // Verification key
  string cert = 4;                      // Certificate
  bool check_claims = 5;                // Check signature claims
}

message VerifyImageResponse {
  bool verified = 1;                    // Whether signature is valid
  string signer = 2;                    // Signature signer
  repeated string claims = 3;           // Signature claims
  google.protobuf.Timestamp signed_at = 4; // Signature timestamp
}